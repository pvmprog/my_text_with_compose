package com.pvmprog.mytextwithcompose.data.locale

import android.os.Build
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import com.pvmprog.mytextwithcompose.data.model.ExampleCode
import com.pvmprog.mytextwithcompose.data.model.TextClickLink
import com.pvmprog.mytextwithcompose.ui.examples.AnimationBgGradient
import com.pvmprog.mytextwithcompose.ui.examples.AnimationChildren
import com.pvmprog.mytextwithcompose.ui.examples.AnimationContent
import com.pvmprog.mytextwithcompose.ui.examples.AnimationContentSize
import com.pvmprog.mytextwithcompose.ui.examples.AnimationCrossfade
import com.pvmprog.mytextwithcompose.ui.examples.AnimationTransition
import com.pvmprog.mytextwithcompose.ui.examples.AnimationVisibilityContent
import com.pvmprog.mytextwithcompose.ui.examples.AnimationVisibilityExpend
import com.pvmprog.mytextwithcompose.ui.examples.AnimationVisibilityScale
import com.pvmprog.mytextwithcompose.ui.examples.AnimationVisibilitySlade
import com.pvmprog.mytextwithcompose.ui.examples.Animation_AsState
import com.pvmprog.mytextwithcompose.ui.examples.Animation_AsStateRepeatable
import com.pvmprog.mytextwithcompose.ui.examples.SimpleAlign
import com.pvmprog.mytextwithcompose.ui.examples.AnnotatedHtmlString
import com.pvmprog.mytextwithcompose.ui.examples.AnnotatedPushStyleAndUrl
import com.pvmprog.mytextwithcompose.ui.examples.BackgroundDriver
import com.pvmprog.mytextwithcompose.ui.examples.BorderExampleText
import com.pvmprog.mytextwithcompose.ui.examples.BoxCenterLambdaFun
import com.pvmprog.mytextwithcompose.ui.examples.DecorationExampleText
import com.pvmprog.mytextwithcompose.ui.examples.DirectionExampleText
import com.pvmprog.mytextwithcompose.ui.examples.DrawAnimeScaleAText
import com.pvmprog.mytextwithcompose.ui.examples.DrawTextCanvas
import com.pvmprog.mytextwithcompose.ui.examples.ExampleFontSize
import com.pvmprog.mytextwithcompose.ui.examples.FontScale
import com.pvmprog.mytextwithcompose.ui.examples.GeometricTransform
import com.pvmprog.mytextwithcompose.ui.examples.GradientDriver
import com.pvmprog.mytextwithcompose.ui.examples.GradientOverview
import com.pvmprog.mytextwithcompose.ui.examples.GraphicsLayerTextDriver
import com.pvmprog.mytextwithcompose.ui.examples.ImageBrush
import com.pvmprog.mytextwithcompose.ui.examples.TextFontWeight
import com.pvmprog.mytextwithcompose.ui.examples.ItalicText
import com.pvmprog.mytextwithcompose.ui.examples.LetterSpacing
import com.pvmprog.mytextwithcompose.ui.examples.LineBreakText
import com.pvmprog.mytextwithcompose.ui.examples.SimpleLimit
import com.pvmprog.mytextwithcompose.ui.examples.AnnotatedStylesInText
import com.pvmprog.mytextwithcompose.ui.examples.OutSipmleArticle
import com.pvmprog.mytextwithcompose.ui.examples.ScaleDraver
import com.pvmprog.mytextwithcompose.ui.examples.SemanticsText
import com.pvmprog.mytextwithcompose.ui.examples.ShaderAnimation
import com.pvmprog.mytextwithcompose.ui.examples.ShaderDriver
import com.pvmprog.mytextwithcompose.ui.examples.ShadowDriver
import com.pvmprog.mytextwithcompose.ui.examples.SimpleWithPadding
import com.pvmprog.mytextwithcompose.ui.examples.Simple
import com.pvmprog.mytextwithcompose.ui.examples.SimpleStringResource
import com.pvmprog.mytextwithcompose.ui.examples.SimpleAlignJustify
import com.pvmprog.mytextwithcompose.ui.examples.StyleDraver
import com.pvmprog.mytextwithcompose.ui.examples.AnnotatedWithAddStyle
import com.pvmprog.mytextwithcompose.ui.examples.AnnotatedParagraph
import com.pvmprog.mytextwithcompose.ui.examples.AnnotatedBaseLineShift
import com.pvmprog.mytextwithcompose.ui.examples.ArrowIndicator
import com.pvmprog.mytextwithcompose.ui.examples.ArrowNewIndicator
import com.pvmprog.mytextwithcompose.ui.examples.BasicTextAutoSize
import com.pvmprog.mytextwithcompose.ui.examples.CircularIndicator
import com.pvmprog.mytextwithcompose.ui.examples.ClickableMyText
import com.pvmprog.mytextwithcompose.ui.examples.Emoticons
import com.pvmprog.mytextwithcompose.ui.examples.FormatString
import com.pvmprog.mytextwithcompose.ui.examples.CarouselProducts
import com.pvmprog.mytextwithcompose.ui.examples.CheckboxWithTextExample
import com.pvmprog.mytextwithcompose.ui.examples.EllipsisText
import com.pvmprog.mytextwithcompose.ui.examples.LineDriverIndicator
import com.pvmprog.mytextwithcompose.ui.examples.ListProducts
import com.pvmprog.mytextwithcompose.ui.examples.PieChart
import com.pvmprog.mytextwithcompose.ui.examples.SegmentedButtonExample
import com.pvmprog.mytextwithcompose.ui.examples.SelectableText
import com.pvmprog.mytextwithcompose.ui.examples.TextColorAny
import com.pvmprog.mytextwithcompose.ui.examples.TextFontFamalyAlternate
import com.pvmprog.mytextwithcompose.ui.examples.TextFontFamily
import com.pvmprog.mytextwithcompose.ui.examples.TextLineHeight
import com.pvmprog.mytextwithcompose.ui.examples.TypographyStyles
import com.pvmprog.mytextwithcompose.ui.examples.VertikalOrientationText
import com.pvmprog.mytextwithcompose.ui.examples.data.DataItemProducts
import kotlin.math.PI

object DataCodeUI {
    val codeUI: List<ExampleCode> = listOf(
        ExampleCode(
            id = 0,
            title = "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç",
            comment = """
–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç |Text| —Å–æ |!String| –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.

|!–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞|:

|text|:String - –≤—ã–≤–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç
  –∏–ª–∏
|text|:AnnotatedString - —Ç–µ–∫—Å—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç–∏–ª—è–º–∏. 

|modifier| - –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã.

|color| - —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é  |!Color.Unspecified| - –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

|fontSize| - —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞.

|fontStyle| - —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞.

|fontWeight| - —Ç–æ–ª—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç–∞.

|fontFamily| - —Ç–∏–ø —à—Ä–∏—Ñ—Ç–∞.

|letterSpacing| - –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏.

|textDecoration| - —Ç–∏–ø –¥–µ–∫–æ—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ).

|textAlign| - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.

|lineHeight| - –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞.

|overflow| - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –µ–≥–æ –≤—ã—Ö–æ–¥–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. 

|softWrap| - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏. 

|maxLines| - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, —Ç–æ –æ–Ω —É—Å–µ–∫–∞–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ overflow –∏ softWrap.

|onTextLayout| - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã–ø–æ–ª–Ω—è–µ–º—É—é –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞.

|style| - —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞.
                        
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞",
                    textUrl = "\uD83D\uDCD6 Developers", //üìó üìñ
                    url = "https://developer.android.com/develop/ui/compose/text?hl=ru"
                ),
                TextClickLink(
                    text = "–®–∫–∞–ª–∞ —Å—Ç–∏–ª–µ–π",
                    textUrl = "\uD83D\uDCD6 Type scale",
                    url = "https://m3.material.io/styles/typography/type-scale-tokens"
                ),
                TextClickLink(
                    text = "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ¬´Jetpack Compose¬ª –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ Android-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ",
                    textUrl = "\uD83D\uDCD6 Habr. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ Android. Kotlin. Jetpack Compose. ",
                    url = "https://habr.com/ru/articles/757572/"
                ),

                ),
/*
            highlightCode = highCodeList + listOf(
                HighlightCode("Simple", Color(0xFFffc530)),
                HighlightCode("Text", Color(0xFF3CEE0A)),
                HighlightCode("1", Color(0xFF2DB8FF)),
                ),

 */
            nameFun = "Simples.kt#L48-L63",
            lambdaFun =  @Composable { Simple() },
            code ="""
/*
   –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ Text(...)
*/                
@Composable
fun Simple() {

    Box(
        modifier = Modifier
            .fillMaxSize()
        contentAlignment = Alignment.Center
    ) {
        Column(
            modifier = Modifier
                .border(1.dp , MaterialTheme.colorScheme.onBackground)
        ) {
            Text("Hello, World!")
        }

    }
}
            """.trimIndent()
        ),


        ExampleCode(
            title = "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏",
            comment = """
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª –∏ —Ç. –¥.

–°–ø–æ—Å–æ–±—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

1. |–° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏| 
  "${'$'}{variable}"


2. |–° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–æ–≤|
 "${'$'}{"${'$'}%.nf".format(variable)}"
 
                
3. |–°  –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ String.format()|   
 "String.format("%.nf", variable)"
 –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ç–∏–ø–∞:                
 |%b| ‚Äì –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 |%c| ‚Äî —Å–∏–º–≤–æ–ª—ã (–∑–∞–∫–ª—é—á–µ–Ω—ã –≤ ‚Äò‚Äô)
 |%d| ‚Äì —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ —Å–æ –∑–Ω–∞–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 1,2,14.
 |%e| ‚Äî —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π –≤ –Ω–∞—É—á–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 1,5e12.
 |%f| ‚Äî —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä 45.2341.
 |%g| ‚Äî —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º –∏–ª–∏ –Ω–∞—É—á–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è.
 |%h| ‚Äì –•—ç—à-–∫–æ–¥ –¥–∞–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
 |%n| ‚Äì —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
 |%o| ‚Äì –≤–æ—Å—å–º–µ—Ä–∏—á–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 8)
 |%s| ‚Äì –°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.
 |%t| ‚Äî –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.
 |%x| ‚Äì —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 16.   
 

4. |C –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è(padding)|  
 "[String.format("%-ns", variable)]"
         
5. |C –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π padStart() –∏ padEnd()| 
 "variable.padStart(n)"
 "variable.padEnd(n)"
          
–®–∞–±–ª–æ–Ω—ã:                
                
        |%d|     –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ —Ç–∏–ø–∞ Int;
        |%3d|    –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ —Ç–∏–ø–∞ Int, –∑–∞–Ω—è–≤ –Ω–µ –º–µ–Ω—å—à–µ —Ç—Ä—ë—Ö –ø–æ–∑–∏—Ü–∏–π (–ø—É—Å—Ç—ã–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–±–µ–ª–∞–º–∏);
        |%c|     –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–∏–º–≤–æ–ª;
        |%s|     –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É;
        |%20s|   –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É, –∑–∞–Ω—è–≤ –Ω–µ –º–µ–Ω—å—à–µ 20 –ø–æ–∑–∏—Ü–∏–π;
        |%lf|    –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ —Ç–∏–ø–∞ Double –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ;
        |%le|    –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ —Ç–∏–ø–∞ Double –≤ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤–∏–¥–∞ 1.3e+4;
        |%6.2lf| –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ —Ç–∏–ø–∞ Double –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∑–∞–Ω—è–≤ –Ω–µ –º–µ–Ω—å—à–µ —à–µ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π –∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–æ–≤–Ω–æ –¥–≤–∞ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
                
            """.trimIndent(),

            links = listOf(
                TextClickLink(
                    text = "Format String in Kotlin With Examples",
                    textUrl = "\uD83D\uDCD6 SparkByExamples.com",
                    url = "https://sparkbyexamples.com/kotlin/format-string-in-kotlin-with-examples/"
                ),
                TextClickLink(
                    text = "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ ",
                    textUrl = "\uD83D\uDCD6 Kotlin Playground",
                    url = "https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS45LjIwIiwiY29kZSI6ImZ1biBtYWluKCkge1xuICAgIHZhbCBudW0gPSAxNDdcbiAgICB2YWwgdHlwZXMgPSBhcnJheU9mKFxuICAgICAgICBcImRlY2ltYWw6XCIsXG4gICAgICAgIFwiaGV4OlwiLFxuICAgICAgICBcImJpbmFyeTpcIlxuICAgIClcbiAgICB2YWwgdmFscyA9IGFycmF5T2YoXG4gICAgICAgIG51bS50b1N0cmluZygpLFxuICAgICAgICBudW0udG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkucGFkU3RhcnQoNCwnMCcpLFxuICAgICAgICBudW0udG9TdHJpbmcoMikucGFkU3RhcnQoOCwnMCcpXG4gICAgICAgIClcbiAgICBwcmludGxuKFwiXCIucGFkU3RhcnQoMjcsJy0nKSlcbiAgICBmb3IgKGkgaW4gMC4uMil7XG4gICAgICAgIHByaW50bG4oXCJ8IFwiICsgdHlwZXNbaV0ucGFkRW5kKDEwKSArXCIgfCBcIisgdmFsc1tpXS5wYWRTdGFydCgxMCkrXCIgfFwiKVxuICAgIHByaW50bG4oXCJcIi5wYWRTdGFydCgyNywnLScpKVxuICAgIH1cbiAgICBcbn0iLCJwbGF0Zm9ybSI6ImphdmEiLCJhcmdzIjoiIn0="
                ),
                TextClickLink(
                    text = "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è ",
                    textUrl = "\uD83D\uDCD6 Kotlin Playground",
                    url = "https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS44LjIxIiwiY29kZSI6ImltcG9ydCBqYXZhLnRleHQuU2ltcGxlRGF0ZUZvcm1hdFxuaW1wb3J0IGphdmEudXRpbC4qXG5cbmZ1biBtYWluKCkge1xuICAgIFxuICAgIHZhbCBkYXRlID0gRGF0ZSgpIFxuXG4gICAgcHJpbnRsbihcIkRhdGU6ICRkYXRlXCIpICBcblxuICAgIC8vIEZvcm1hdCB0aGUgZGF0ZSB2YWx1ZSB1c2luZyBTaW1wbGVEYXRlRm9ybWF0XG4gICAgcHJpbnRsbihcIkRhdGU6ICR7U2ltcGxlRGF0ZUZvcm1hdChcImRkLU1NLXl5eXlcIikuZm9ybWF0KGRhdGUpfVwiKSAgXG4gICAgcHJpbnRsbihcIlRpbWU6ICR7U2ltcGxlRGF0ZUZvcm1hdChcImhoOm1tOnNzXCIpLmZvcm1hdChkYXRlKX1cIikgIFxuIFxufSIsInBsYXRmb3JtIjoiamF2YSIsImFyZ3MiOiIifQ=="
                ),
            ),
            lambdaFun = { FormatString() },
            nameFun = "FormatString.kt",
            code ="""
@Preview("Dark Theme", showBackground = true, uiMode = Configuration.UI_MODE_NIGHT_YES)
@Composable
fun FormatString(){
    val date = Date()
    Column(
        modifier = Modifier
            .padding(16.dp)
            .fillMaxWidth()
            .verticalScroll(rememberScrollState()),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "1. –°—Ç—Ä–æ–∫–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è",
            fontWeight = FontWeight.Bold
        )
        var name = "–ü–∞–≤–µ–ª"
        val age = 30

        var message = "–ú–µ–Ω—è –∑–æ–≤—É—Ç ${'$'}name, –º–Ω–µ ${'$'}age –ª–µ—Ç"
        OutTextInfo(
            formatStr = "–ú–µ–Ω—è –∑–æ–≤—É—Ç ${'$'}name, –º–Ω–µ ${'$'}age –ª–µ—Ç",
            message = message,
        )

        Text(
            text = "2. –®–∞–±–ª–æ–Ω—ã",
            fontWeight = FontWeight.Bold
        )

        val quantity = 10
        val price = 1.23
        val total = price * quantity

        message = "–ò—Ç–æ–≥–æ: ${'$'}quantity —Ç–µ—Ç—Ä–∞–¥–µ–π \n—Å—Ç–æ—è—Ç ${'$'}{"$%.2f".format(total)}"
        OutTextInfo(
            formatStr = "\"–ò—Ç–æ–≥–æ: ${'$'}quantity —Ç–µ—Ç—Ä–∞–¥–µ–π \n—Å—Ç–æ—è—Ç ${'$'}{\"${'$'}%.2f\".format(total)}\"",
            message = message,

        )

        Text(
            text = "3. String.format()",
            fontWeight = FontWeight.Bold
        )

        val boolValue = true
        OutTextInfo(
            formatStr = "\"%b\".format(boolValue)\nboolValue=${'$'}boolValue",
            message = "%b".format(boolValue)
        )
        val charValue = 'A'
        OutTextInfo(
            formatStr = "\"%c\".format(charValue)\ncharValue='A'",
            message = "%c".format(charValue)
        )
        val intValue = 25
        OutTextInfo(
            formatStr = "\"%d\".format(intValue)\nintValue=${'$'}intValue",
            message = "%d".format(intValue)
        )
        OutTextInfo(
            formatStr = "\"%4d\".format(intValue)",
            message = "%4d".format(intValue)
        )
        OutTextInfo(
            formatStr = "\"%04d\".format(intValue)",
            message = "%04d".format(intValue)
        )
        val floatValue = 33.3449f
        OutTextInfo(
            formatStr = "\"%f\".format(floatValue)\nfloatValue=33.3449f",
            message = "%f".format(floatValue)
        )
        OutTextInfo(
            formatStr = "\"%.2f\".format(floatValue)",
            message = "%.2f".format(floatValue)
        )

        val doubleValue = 32.44
        OutTextInfo(
            formatStr = "\"%.1f\".format(doubleValue)\ndoubleValue=32.44",
            message = "%.1f".format(doubleValue)
        )
        val hexValue = 255
        OutTextInfo(
            formatStr = "\"%x\".format(hexValue)\nhexValue = 255",
            message = "%x".format(hexValue)
        )
        
        OutTextInfo(
            formatStr = "\"%04x\".format(hexValue).uppercase()",
            message = "%04x".format(hexValue).uppercase()
        )


        OutTextInfo(
            formatStr = "hexValue.toHexString()",
            message = hexValue.toHexString()
        )

        OutTextInfo(
            formatStr = "String.format(\"%.2f\", PI)",
            message = String.format("%.2f", PI)
        )
        message = "–ü–∏ = $PI"
        OutTextInfo(
            formatStr = "–ü–∏ = ${'$'}PI",
            message = message
        )
        OutTextInfo(
            formatStr = "String.format(\"%+.4f\", 3.141592)",
            message = String.format("%+.4f", 3.141592)
        )

        Text(
            text = "4. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (padding)",
            fontWeight = FontWeight.Bold
        )
        OutTextInfo(
            formatStr = "\"\".padStart(22,'-')",
            message = "".padStart(22,'-'),
            fontFamily = FontFamily.Monospace

        )
        name = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        OutTextInfo(
            formatStr = "| \${'$'}{String.format(\"%-20s\", name)} |",
            message = "|${'$'}{String.format("%-20s", name)}|",
            fontFamily = FontFamily.Monospace

        )
        name = "–°–µ–º–µ–Ω –°–µ–º–µ–Ω–æ–≤–∏—á"
        OutTextInfo(
            formatStr = "|\${'$'}{String.format(\"%-20s\", name)}|",
            message = "|${'$'}{String.format("%-20s", name)}|",
            fontFamily = FontFamily.Monospace

        )
        name = "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á"
        OutTextInfo(
            formatStr = "|\${'$'}{name.padEnd(20,' ')}|",
            message = "|${'$'}{name.padEnd(20, ' ')}|",
            fontFamily = FontFamily.Monospace
        )
        name = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        OutTextInfo(
            formatStr = "|\${'$'}{name.padStart(20,' ')}|",
            message = "|${'$'}{name.padStart(20, ' ')}|",
            fontFamily = FontFamily.Monospace
        )

        OutTextInfo(
            formatStr = "hexValue.toString(16).toUpperCase().padStart(4,'0')",
            message = hexValue.toString(16).toUpperCase().padStart(4,'0')
        )

        Text(
            text = "5. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
            fontWeight = FontWeight.Bold
        )
        message = date.toString()
        OutTextInfo(
            formatStr = "date.toString()",
            message = message
        )

        message = SimpleDateFormat("dd-MM-yyyy").format(date)
        OutTextInfo(
            formatStr = "SimpleDateFormat(\"dd-MM-yyyy\").format(date)",
            message = message
        )

        message = SimpleDateFormat("hh:mm:ss").format(date)
        OutTextInfo(
            formatStr = "SimpleDateFormat(\"hh:mm:ss\").format(date)",
            message = message
        )

        val time = 12567  //–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        message = timeSecondsToStr(time)
        OutTextInfo(
            formatStr = "String.format(\"%02d:%02d:%02d\", hour, minute, second)",
            message = message
        )

        val seconds = timeStrToSeconds(message)
        OutTextInfo(
            formatStr = "seconds.toString()",
            message = seconds.toString()
        )

    }
}

@Composable
fun OutTextInfo(
    formatStr:String = "",
    message:String = "",
    fontFamily:FontFamily = FontFamily.SansSerif
){
    Column(
        modifier = Modifier
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = formatStr,
            textAlign = TextAlign.Center,
            color = MaterialTheme.colorScheme.secondary,
            fontSize = 12.sp
        )
        Text(
            text = message,
            textAlign = TextAlign.Center,
            fontFamily = fontFamily
            )

    }

}

// convert int value (seconds) -> "hh:mm:ss" 
fun timeSecondsToStr(seconds: Int): String {
    val hour = seconds / 3600
    val minute = (seconds % 3600) / 60
    val second = seconds % 60
    return String.format("%02d:%02d:%02d", hour, minute, second)
}

// convert "hh:mm:ss" -> int value (seconds)
fun timeStrToSeconds(str: String): Int {
    val parts = str.split(":")
    var result = 0
    return try {
        for (part in parts) {
            val number = part.toInt()
            result = result * 60 + number
        }
        result
    }
    catch (e: NumberFormatException) {
        -1
    }
}                
            """.trimIndent()
        ),

        ExampleCode(
            id = 1,
            title = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |modifier| —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞—Ç—å  –∫–∞–∫–æ–π-–ª–∏–±–æ |compose|-–æ–±—ä–µ–∫—Ç, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ |Text|. 

–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–∑–≤–æ–ª—è—é—Ç:
 1)|–∏–∑–º–µ–Ω–µ–Ω—è—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥| —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—Ä–∞–∑–º–µ—Ä, –º–∞–∫–µ—Ç, –ø–æ–≤–µ–¥–µ–Ω–∏–µ );
 
 2)|–¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é|, –Ω–∞–ø—Ä–∏–º–µ—Ä –º–µ—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏;
 
 3)|–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è|;
 
 4)|–¥–æ–±–∞–≤–ª—è—Ç—å –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è|, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–¥–µ–ª–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–º, –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–º –∏–ª–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–º. 

–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞–∫–µ—Ç—ã, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ |Compose|, –æ–±–µ—Ä—Ç—ã–≤–∞—é—Ç —Å–≤–æ–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã.

–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –µ–≥–æ –¥–æ—á–µ—Ä–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º. 

–°–≤–æ–π—Å—Ç–≤–∞ –¥–æ—á–µ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å.

–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:
 |padding| - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –ø–æ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º;
 |offset| - —Å–¥–≤–∏–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏;              
 |background| - —Ü–≤–µ—Ç –∏–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è —Ñ–æ–Ω–∞ –∫–æ–º–ø–æ–Ω—É–µ–º–æ–≥–æ;
 |border| - —Ä–∞–º–∫–∞ –∫–æ–º–ø–æ–Ω—É–µ–º–æ–≥–æ;
 |fillMaxSize| - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–ª–∏ –µ–µ —á–∞—Å—Ç—å;
 |fillMaxWidth| - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ |—à–∏—Ä–∏–Ω–µ| –∏–ª–∏ –µ–µ —á–∞—Å—Ç—å;
 |fillMaxHeight| - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ |–≤—ã—Å–æ—Ç–µ| –∏–ª–∏ –µ–µ —á–∞—Å—Ç—å;
 |requiredSize| - —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –≤ dp |–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ| –æ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π;
 |requiredWidth|  - —à–∏—Ä–∏–Ω–∞ –≤ dp |–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ| –æ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π;
 |requiredHeight| - –≤—ã—Å–æ—Ç–∞ –≤ dp |–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ| –æ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π;
 |size| - —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –≤ dp. –í—Ö–æ–¥–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä;
 |width| - - —à–∏—Ä–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ |dp|. –í—Ö–æ–¥–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä;
 |height| - –≤—ã—Å–æ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ |dp|. –í—Ö–æ–¥–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä;
 |weight| - –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–µ—Å–∞, –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞;
 |aspectRatio| - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∏–ª–∏ –≤—ã—Å–æ—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω;
 |animateContentSize| - –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞; 
 
 –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö...

****************************
                
Modifier.|padding| –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å—Ç—É–ø–æ–≤.

–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç—Å—Ç—É–ø–æ–≤:

1)|!–æ—Ç –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏|:
fun Modifier.|padding|(
   |start|: Dp = 0.dp, 
   |top|: Dp = 0.dp, 
   |end|: Dp = 0.dp, 
   |bottom|: Dp = 0.dp
): Modifier

2)|!–ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏|:
fun Modifier.|padding|(
    |horizontal|: Dp = 0.dp, 
    |vertical|: Dp = 0.dp
): Modifier

3)|!–æ—Ç –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç–æ—Ä–æ–Ω|:
fun Modifier.|padding|(
    |all|: Dp
): Modifier

4)|!–≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ PaddingValues|:
fun Modifier.|padding|(
    |paddingValues|: PaddingValues
): Modifier
               
–í –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—Å—Ç—É–ø–æ–≤, –ø–æ—Ä—è–¥–æ–∫ –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ. –û—Ç—Å—Ç—É–ø—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏, –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–µ—Ä–≤—ã–º–∏.               

    val externalPadding = |PaddingValues|(
        |start| = 16.dp,
        |top| = 16.dp,
    )

    val innerPadding = |PaddingValues|(
        |all| = 16.dp,
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black)
    ) {
        Text(
            text = "Hello, world!",
            modifier = Modifier
                .|padding|(externalPadding)
                .background(Color.Blue)
                .|padding|(innerPadding),
            color = Color.White
        )
    }|
               
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Compose modifiers ",
                    url = "https://developer.android.com/develop/ui/compose/modifiers?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6  –íevelopers. Android. animateContentSize ",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier#(androidx.compose.ui.Modifier).animateContentSize(androidx.compose.animation.core.FiniteAnimationSpec,kotlin.Function2)"
                ),
            ),
            lambdaFun = { SimpleWithPadding() },
            nameFun = "Simples.kt#L66-L85",
            code ="""
            Text(
                text = "Hello, World!",
                modifier = Modifier
                    .padding(16.dp)
            )
            """.trimIndent()
        ),


        ExampleCode(
            title = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
            comment = """
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API |stringResource| –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤ –≤–∞—à–∏—Ö |!XML| —Ä–µ—Å—É—Ä—Å–∞—Ö.
                
–û–¥–∏–Ω —Ä–∞–∑ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑.

|!res/values/strings.xml|
  <|string| name="text_in_jetpack_compose">Text in jetpack Compose</string>

  <|string| name="day_of_month">There are %2${'$'}d days in %1${'$'}s</string>

|!res/values/dimens.xml|
  <|dimen| name="padding_medium">16dp</dimen>

                
            """.trimIndent(),

            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 –†–µ—Å—É—Ä—Å—ã –≤ Compose",
                    url = "https://developer.android.com/develop/ui/compose/resources?hl=ru#strings"
                ),
                TextClickLink(
                    text = "–°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã ",
                    textUrl = "\uD83D\uDCD6 Developers. String resource",
                    url = "https://developer.android.com/guide/topics/resources/string-resource?hl=ru"
                ),
            ),
            lambdaFun = { SimpleStringResource() },
            nameFun = "Simples.kt#L99-L134",
            code ="""
    val text1 = stringResource (
        id = R.string.hello_world  //Hello, World!
    )

    //–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    val text2 = stringResource(
        id = R.string.day_of_month, "January", 31
        //There are %2${'$'}d days in %1${'$'}s
    )

    val padding = dimensionResource (
        id = R.dimen.padding_medium  //16dp
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background),
        contentAlignment = Alignment.Center
    ) {
        Column(
            modifier = Modifier
                .border(1.dp, MaterialTheme.colorScheme.onBackground)
                .padding(padding),
            verticalArrangement = Arrangement.spacedBy(padding),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(text = text1)
            Text(text = text2)
        }
    }

}
            """.trimIndent()
        ),


        ExampleCode(
            id = 3,
            title = "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞",
            comment = """
–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º |fontSize|. 

–í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—É –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ |Int|, |Double| –∏ |Float|, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∏–ø –µ–¥–∏–Ω–∏—Ü: 
 1)|!sp| - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ –ø–∏–∫—Å–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28.sp); 
 2)|!em| - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18.em).
  
–ó–Ω–∞—á–µ–Ω–∏–µ |!TextUnit.Unspecified| —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã—Å–æ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
                
                
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞:
 |–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü|(|!22|sp)
 |–¢–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞|(|!14|sp)
 |–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ø–∏—Å–∫–æ–≤|(|!14|sp)
 |–í–∞–∂–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞|(|!16|sp)
 |–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–¥–ø–∏—Å–∏|(|!14|sp)
 |–ö–Ω–æ–ø–∫–∏, –≤–∫–ª–∞–¥–∫–∏|(|!14|sp)
 |–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞|(|!16|sp)
     
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "Material Design 3 –≤ Compose",
                    textUrl = "\uD83D\uDCD6 MaterialTheme.typography",
                    url = "https://developer.android.com/develop/ui/compose/designsystems/material3?hl=ru"
                ),
            ),

            lambdaFun = { ExampleFontSize() },
            nameFun = "ExampleFontSize.kt",
            code = """
                Text( 
                    text = text + "(default)",
                    fontSize = TextUnit.Unspecified
                )
                Text(
                    text = text + "(20.sp)",
                    fontSize = 20.sp
                )
                Text(
                    text = text + "(3.em)",
                    fontSize = 3.em
                )
                Text(
                    text = text + "(15.sp)",
                    style = TextStyle(
                        fontSize = 15.sp,
                    )
                )
            """.trimIndent()
        ),

        ExampleCode(
            id = 4,
            title = "–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ Material 3",
            comment = """
–ù–∞–±–æ—Ä —Å—Ç–∏–ª–µ–π |Typography| –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ —Ç–µ–∫—Å—Ç–∞. 

|Typography|(

|!//–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç|
    |displayLarge|: TextStyle,   
    |displayMedium|: TextStyle, 
    |displaySmall|: TextStyle,  

|!//–ù–æ–≤–æ—Å—Ç–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π 
–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ, –≤–∞–∂–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ü–∏—Ñ—Ä.
–î–ª—è headline –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–µ—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π,–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ.|
    |headlineLarge|: TextStyle,  
    |headlineMedium|: TextStyle, 
    |headlineSmall|: TextStyle,

|!//–ó–∞–≥–æ–ª–æ–≤–æ–∫ 
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º, –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–æ –¥–ª–∏–Ω–µ. 
–®—Ä–∏—Ñ—Ç—ã —Å –∑–∞—Å–µ—á–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑ –∑–∞—Å–µ—á–µ–∫ —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–π.|
    |titleLarge|: TextStyle,     
    |titleMedium|: TextStyle,
    |titleSmall|: TextStyle,
    
|!//–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç 
–û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞.| 
    bodyLarge: TextStyle,      
    bodyMedium: TextStyle,
    bodySmall: TextStyle,
  
|!//–ú–µ—Ç–∫–∞ 
–≠—Ç–æ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∫–Ω–æ–ø–æ–∫, –∞ —Ç–∞–∫–∂–µ –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö, –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–Ω–∞—Ö –∏ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö. 
–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –±–µ–∑ –∑–∞—Å–µ—á–µ–∫, –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏.|
    |labelLarge|: TextStyle,   
    |labelMedium|: TextStyle,
    |labelSmall|: TextStyle    
    
  )
  
 |displayLarge| - —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç. 
 |labelSmall| - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —à—Ä–∏—Ñ—Ç–∞. 
 
 –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        Text(
            text = "Hello, World!",
            style = MaterialTheme.typography.|titleLarge|
        )

            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–º –∏ –∫—Ä–∞—Å–∏–≤—ã–º.",
                    textUrl = "\uD83D\uDCD6 MaterialTheme.typography",
                    url = "https://m3.material.io/styles/typography/overview"
                ),
                TextClickLink(
                    text = "–®–∫–∞–ª–∞ —Å—Ç–∏–ª–µ–π",
                    textUrl = "\uD83D\uDCD6 Type scale",
                    url = "https://m3.material.io/styles/typography/type-scale-tokens"
                ),
                TextClickLink(
                    text = "Jetpack Compose –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é",
                    textUrl = "\uD83D\uDCD6 Material Design 3 –≤ Compose",
                    url = "https://developer.android.com/develop/ui/compose/designsystems/material3?hl=ru"
                ),
            ),
            nameFun = "TypographyStyles.kt",
            lambdaFun = { TypographyStyles() },
            code = """
data class TypographyStyle(
    val name: String,
    val style:TextStyle
)

@Composable
fun TypographyStyles() {
    val listStyle = listOf(
        TypographyStyle("DisplayLarge", MaterialTheme.typography.displayLarge),
        TypographyStyle("DisplayMedium", MaterialTheme.typography.displayMedium),
        TypographyStyle("DisplaySmall", MaterialTheme.typography.displaySmall),
        TypographyStyle("HeadlineLarge", MaterialTheme.typography.headlineLarge),
        TypographyStyle("HeadlineMedium", MaterialTheme.typography.headlineMedium),
        TypographyStyle("HeadlineSmall", MaterialTheme.typography.headlineSmall),
        TypographyStyle("TitleLarge", MaterialTheme.typography.titleLarge),
        TypographyStyle("TitleMedium", MaterialTheme.typography.titleMedium),
        TypographyStyle("TitleSmall", MaterialTheme.typography.titleSmall),
        TypographyStyle("BodyLarge", MaterialTheme.typography.bodyLarge),
        TypographyStyle("BodyMedium", MaterialTheme.typography.bodyMedium),
        TypographyStyle("BodySmall", MaterialTheme.typography.bodySmall),
        TypographyStyle("LabelLarge", MaterialTheme.typography.labelLarge),
        TypographyStyle("LabelMedium", MaterialTheme.typography.labelMedium),
        TypographyStyle("LabelSmall", MaterialTheme.typography.labelSmall),
    )

    LazyColumn(
        modifier = Modifier
            .padding(16.dp)
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        items(listStyle) {
            Column(
                modifier = Modifier
                    .fillMaxWidth(),
                horizontalAlignment = Alignment.CenterHorizontally,
            ) {
                Text(
                    text = it.name,
                    style = it.style
                )
                Text(
                    text = "(${'$'}{it.style.fontSize})",
                )
            }
        }

    }

}
            """.trimIndent()
        ),
        ExampleCode(
            id =  5,
            title = "–°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞",
            comment = """
–°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º |fontStyle|:
 
 FontStyle.|Italic| - –Ω–∞–∫–ª–æ–Ω–Ω–Ω—ã–π (–∫—É—Ä—Å–∏–≤–Ω—ã–π) —à—Ä–∏—Ñ—Ç;
 
 FontStyle.|Normal|  - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç.
                
            """.trimIndent(),
            nameFun = "Simples.kt#L138-L175",
            lambdaFun = { ItalicText() },
            code ="""
@Composable
fun ItalicText() {

    val text= stringResource(
        id = R.string.hello_world
    )

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )


    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background),
        contentAlignment = Alignment.Center
    ) {
        Column(
            modifier = Modifier
                .border(1.dp, MaterialTheme.colorScheme.onBackground)
                .padding(padding),
            verticalArrangement = Arrangement.spacedBy(padding),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = text + " (Italic)",
                fontStyle = FontStyle.Italic
            )
            Text(
                text = text + " (Normal)",
                fontStyle = FontStyle.Normal
            )
        }
    }


}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
            ),

            ),


        ExampleCode(
            id =  6,
            title = "–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —à—Ä–∏—Ñ—Ç–∞",
            comment = """
–¢–æ–ª—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç–∞ –∑–∞–¥–∞–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º |fontWeight|, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å |!FontWeight|.
                        
–î–≤–∞ —Å–ø–æ—Å–æ–±–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–ª—â–∏–Ω—ã —à—Ä–∏—Ñ—Ç–∞:
 
 1)–ø–µ—Ä–µ–¥–∞—á–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1 –¥–æ 1000;
 
 2)–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã |FontWeight|:
 
    |Black| (–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—é W900)

    |Bold| (W700)

    |ExtraBold| (W800)

    |ExtraLight| (W200)

    |Light| (W300)

    |Medium| (W500)

    |Normal| (W400 - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

    |SemiBold| (W600)

    |Thin| (W100)
                          
                
            """.trimIndent(),
            nameFun = "Simples.kt#L177-L240",
            lambdaFun = { TextFontWeight() },
            code ="""
@Composable
fun TextFontWeight() {

    val text = stringResource(
        id = R.string.text_in_jetpack_compose
    )

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val modifier = Modifier
        .padding(top = 16.dp)

    Column(
        modifier = Modifier
            .padding(padding)
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "${'$'}Text(Normal)",
            modifier = modifier,
            fontWeight = FontWeight.Normal
        )
        Text(
            text = "${'$'}Text (Bold)",
            modifier = modifier,
            fontWeight = FontWeight.Bold
        )
        Text(
            text = "${'$'}Text (ExtraBold)",
            modifier = modifier,
            fontWeight = FontWeight.ExtraBold
        )
        Text(
            text = "${'$'}Text (Light)",
            modifier = modifier,
            fontWeight = FontWeight.Light
        )
        Text(
            text = "${'$'}Text (W100)",
            modifier = modifier,
            fontWeight = FontWeight.W100
        )
        Text(
            text = "${'$'}Text (W300)",
            modifier = modifier,
            fontWeight = FontWeight.W300
        )
        Text(
            text = "${'$'}Text (W900)",
            modifier = modifier,
            fontWeight = FontWeight.W900
        )

    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
            ),

            ),

        ExampleCode(
            title = "–ú–µ–∂—Å–∏–º–≤–æ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |letterSpacing| –∑–∞–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∏ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∞—Å—Å–æ–º |TextUnit| –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –µ–¥–∏–Ω–∏—Ü |sp| –∏–ª–∏ |em| 
                
            """.trimIndent(),
            nameFun = "LetterSpacing.kt",
            lambdaFun = { LetterSpacing() },
            code ="""
@Composable
fun LetterSpacing(){
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
    ) {
        val text = "letterSpacing in Text of jetpack Compose"

        item {
            Column(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                Text(
                    text = text+" [default]",
                    letterSpacing = TextUnit.Unspecified, 
                )
                Text(
                    text = text+" [1.3.sp]",
                    letterSpacing = 1.3.sp,
                )
                Text(
                    text = text+" [0.1.sp]",
                    letterSpacing = 0.1.sp,
                )
                Text(
                    text = text+" [0.3.em]",
                    letterSpacing = 0.3.em,
                )

            }
        }
    }
}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. letterSpacing",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/TextStyle#letterSpacing()"
                ),
            ),
        ),

        ExampleCode(
            id = 9,
            title = "–í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |lineHeight| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã—Å–æ—Ç—É –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—É—Ç–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∫ –≤–µ—Ä—Ö—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –≤–µ—Ä—Ö—É –∏ –Ω–∏–∑—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏.         
               
            """.trimIndent(),
            nameFun = "TextLineHeight.kt",
            lambdaFun = { TextLineHeight() },
            code = """
@Composable
fun TextLineHeight() {

    val text = ("Text in jetpack Compose.").repeat(5)

    val padding = 16.dp

    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .border(1 .dp, MaterialTheme.colorScheme.onBackground)
            .padding(padding),
    ) {
        item {
            Column(
                verticalArrangement = Arrangement.spacedBy(padding)
            ) {
                Text(
                    text = " default \n\n" + text,
                )

                Text(
                    text = " lineHeight = 2.0.em \n\n" + text,
                    lineHeight = 2.0.em,
                )

                Text(
                    text = " lineHeight = 1.0.em \n\n" + text,
                    lineHeight = 1.0.em,
                )
            }

        }

    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. LineHeightStyle",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/LineHeightStyle"
                ),
            ),

            ),




        ExampleCode(
            id =  7,
            title = "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |textAlign| —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ |TextAlign|. 

–í –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–≤–æ–π—Å—Ç–≤ –∫–ª–∞—Å—Å–∞ |TextAlign|:

 |!Center|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

 |!Justify|: —Ç–µ–∫—Å—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

 |!End|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–æ–Ω–µ—á–Ω–æ–º—É –∫—Ä–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–µ–≤—ã–π –∏–ª–∏ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π)

 |!Start|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –Ω–∞—á–∞–ª—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–µ–≤—ã–π –∏–ª–∏ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π)

 |!Left|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

 |!Right|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞                        
                
            """.trimIndent(),
            nameFun = "Simples.kt#L242-L289",
            lambdaFun = { SimpleAlign() },
            code ="""
@Composable
fun SimpleAlign() {
    val text = stringResource(
        id = R.string.hello_world
    )

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val modifier = Modifier
        .padding(top = 16.dp)
        .fillMaxWidth() // !!!

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background),
        contentAlignment = Alignment.Center
    ) {
        LazyColumn(
            modifier = Modifier
                .border(1.dp, MaterialTheme.colorScheme.onBackground)
                .padding(padding),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            item {
                Text(
                    text = text + " (Left)",
                    textAlign = TextAlign.Left,
                    modifier = modifier
                )
                Text(
                    text = text + " (Center)",
                    textAlign = TextAlign.Center,
                    modifier = modifier
                )
                Text(
                    text = text + " (Right)",
                    textAlign = TextAlign.Right,
                    modifier = modifier
                )

            }
        }
    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å –∞–±–∑–∞—Ü–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-paragraph?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. TextAlign",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/TextAlign"
                ),
            ),
        ),


        ExampleCode(
            id =  8,
            title = "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É",
            comment = """
TextAlign.|!Justify| —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.

            """.trimIndent(),
            nameFun = "Simples.kt#L291-L324",
            lambdaFun = { SimpleAlignJustify() },
            code ="""
@Composable
fun SimpleAlignJustify() {

    val text = "–ë–µ–∑ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è. ".repeat(10)

    val text2 = "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. ".repeat(10)

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )


    LazyColumn(
        modifier = Modifier
            .border(1.dp, MaterialTheme.colorScheme.onBackground)
            .padding(padding),
    ) {
        item {
            //–ë–µ–∑ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            Text(text = text)
            
            Spacer(modifier = Modifier.padding(padding))

            //–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            Text(
                text = text2,
                textAlign = TextAlign.Justify,
            )

        }
    }


}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. TextAlign",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/TextAlign"
                ),
            ),

            ),


        ExampleCode(
            id = 11,
            title = "–¢–∏–ø—ã —à—Ä–∏—Ñ—Ç–æ–≤",
            comment = """
 |–¢–∏–ø —à—Ä–∏—Ñ—Ç–∞| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º |!fontFamily|, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä—è–¥ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç:
 
    |!Cursive| - –∫—É—Ä—Å–∏–≤–Ω—ã–π, —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —à—Ä–∏—Ñ—Ç;
 
    |!Monospace| -  –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –≤—Å–µ –∑–Ω–∞–∫–∏ (—Ç–æ—á–Ω–µ–µ, –∫–µ–≥–µ–ª—å–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –∑–Ω–∞–∫–æ–≤) –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —à–∏—Ä–∏–Ω—É;
 
    |!Serif| - —à—Ä–∏—Ñ—Ç—ã —Å –∑–∞—Å–µ—á–∫–∞–º–∏;
 
    |!SansSerif| - —à—Ä–∏—Ñ—Ç—ã –±–µ–∑ –∑–∞—Å–µ—á–µ–∫;
 
    |!Default| - —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.

 –ü—Ä–∏–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤ –±–µ–∑ –∑–∞—Å–µ—á–µ–∫ (sans-serif):
 ‚Ä¢|Arial|
 ‚Ä¢|Verdana|

 –ü—Ä–∏–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Å –∑–∞—Å–µ—á–∫–∞–º–∏ (serif):
 ‚Ä¢|Times New Roman|


–®—Ä–∏—Ñ—Ç—ã |Serif| —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç—å —Ç—Ä–∞–¥–∏—Ü–∏—è–º.

–®—Ä–∏—Ñ—Ç—ã |Sans Serif| —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å, –¥–∏–Ω–∞–º–∏—á–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å. –ß–∞—Å—Ç–æ —ç—Ç–∏ —à—Ä–∏—Ñ—Ç—ã –∞—Å—Å–æ—Ü–∏–∏—Ä—É—é—Ç—Å—è —Å –º–∏–Ω–∏–º–∞–ª–∏–∑–º–æ–º –∏ –ª—ë–≥–∫–æ—Å—Ç—å—é: –æ–Ω–∏ –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã, –≤—ã–≥–ª—è–¥—è—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ |Sans Serif| –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ |!–∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏|: –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏—è –±–µ–∑ –∑–∞—Å–µ—á–µ–∫ –ø—Ä–æ—â–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É—é—Ç—Å—è.

|!–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞|:

1.–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 3-4 —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

2.–ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —à—Ä–∏—Ñ—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –æ—á–µ–Ω—å –≤–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π.

3.Sans-serif —à—Ä–∏—Ñ—Ç—ã —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

                
            """.trimIndent(),
            nameFun = "TextFontFamily.kt",
            lambdaFun = { TextFontFamily() },
            code ="""
@Composable
fun TextFontFamily() {

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val style = MaterialTheme.typography.bodyMedium.merge(
        TextStyle(
            fontSize = 20.sp,
            textAlign = TextAlign.Center,
            //—à—Ä–∏—Ñ—Ç —Å –∑–∞—Å–µ—á–∫–∞–º–∏
            fontFamily = FontFamily.Serif
        )
    )

    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, MaterialTheme.colorScheme.onBackground)
            .padding(padding),
        horizontalAlignment = Alignment.CenterHorizontally

    ) {
        item {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(padding)
            ) {
                Text(
                    text = "Text in jetpack Compose\n(Serif)",
                    //—à—Ä–∏—Ñ—Ç —Å –∑–∞—Å–µ—á–∫–∞–º–∏
                    style = style,
                )

                Text(
                    text = "Text in jetpack Compose\n(SansSerif)",
                    style = style.merge(
                        TextStyle(
                            //—à—Ä–∏—Ñ—Ç –±–µ–∑ –∑–∞—Å–µ—á–µ–∫
                            fontFamily = FontFamily.SansSerif
                        )
                    )
                )

                Text(
                    text = "Text in jetpack Compose\n(Cursive)",
                    style = style.merge(
                        TextStyle(
                            //–∫—É—Ä—Å–∏–≤–Ω—ã–π, —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —à—Ä–∏—Ñ—Ç
                            fontFamily = FontFamily.Cursive
                        )
                    )
                )

                Text(
                    text = "Text in jetpack Compose\n(Monospace)",
                    style = style.merge(
                        TextStyle(
                            //–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
                            //(–≤—Å–µ –∑–Ω–∞–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —à–∏—Ä–∏–Ω—É)
                            fontFamily = FontFamily.Monospace
                        )
                    )
                )

                Text(
                    text = "Text in jetpack Compose\n(Default)",
                    style = style.merge(
                        TextStyle(
                            //—à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
                            fontFamily = FontFamily.Default
                        )
                    )
                )

            }

        }

    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –†–∞–±–æ—Ç–∞ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏",
                    url = "https://developer.android.com/develop/ui/compose/text/fonts?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. FontFamily",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/font/FontFamily#summary"
                ),
                TextClickLink(
                    text = "Google fonts \n –í—ã–±–µ—Ä–∏—Ç–µ language -> Cyrillic, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —à—Ä–∏—Ñ—Ç –∏ –≤ –≤–∏–¥–µ –∞—Ä—Ö–∏–≤–∞ —Å–∫–∞—á–∞–π—Ç–µ. –§–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º *.ttf –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º –∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤ –ø–∞–ø–∫—É /res/font –ø—Ä–æ–µ–∫—Ç–∞",
                    textUrl = "\uD83D\uDCD6 https://fonts.google.com/",
                    url = "https://fonts.google.com/"
                ),
                TextClickLink(
                    text = "–§–æ—Ç–æ—à–æ–ø —Ä—É—Å—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã ",
                    textUrl = "\uD83D\uDCD6 https://ofont.ru/category/",
                    url = "https://ofont.ru/category/32/page/8"
                ),
            ),

            ),

        ExampleCode(
            id = 12,
            title = "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã",
            comment = """
|FontFamily| –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã —Å –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –ø–∞–ø–∫–µ 
 |!res/font|
 
–í—ã–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç –º–æ–∂–Ω–æ –∏–∑ —Å–∞–π—Ç–∞ |!Google Fonts| –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –ø–∞–ø–∫—É 
 |!res/font|, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏–≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ.

–í —Ñ–∞–π–ª–µ |!ui/theme/Type.kt| 
–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π —à—Ä–∏—Ñ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:

//—à—Ä–∏—Ñ—Ç –∫—É—Ä—Å–∏–≤–Ω—ã–π –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã    
|val Cormorantinfant = FontFamily(
    Font(R.font.cormorantinfant_regular, FontWeight.Normal),
    Font(R.font.cormorantinfant_medium, FontWeight.Medium),
    Font(R.font.cormorantinfant_bold, FontWeight.Bold),
    Font(R.font.cormorantinfant_light, FontWeight.Light),
    Font(R.font.cormorantinfant_italic, FontWeight.Normal,FontStyle.Italic),
    Font(R.font.cormorantinfant_mediumitalic, FontWeight.Medium,FontStyle.Italic),
    Font(R.font.cormorantinfant_bolditalic, FontWeight.Bold,FontStyle.Italic),
    Font(R.font.cormorantinfant_lightitalic, FontWeight.Light,FontStyle.Italic),
)|
                   
            """.trimIndent(),
            nameFun = "Simples.kt#L79-L190",
            lambdaFun = { TextFontFamalyAlternate() },
            code ="""
/*
                 –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã

 ui/theme/Type.kt

    val Cabin = FontFamily(
        Font(R.font.cabin_regular, FontWeight.Normal),
        Font(R.font.cabin_bold, FontWeight.Bold)
    )

    val Poppins = FontFamily(
        Font(R.font.poppins_medium, FontWeight.Medium),
        Font(R.font.poppins_regular, FontWeight.Normal),
        Font(R.font.poppins_bold, FontWeight.Bold)
    )

    val AbrilFatface = FontFamily(
        Font(R.font.abril_fatface_regular)
    )

    val Alice = FontFamily(
        Font(R.font.alice_regular)
    )

//—à—Ä–∏—Ñ—Ç –∫—É—Ä—Å–∏–≤–Ω—ã–π –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    val Cormorantinfant = FontFamily(
        Font(R.font.cormorantinfant_regular, FontWeight.Normal),
        Font(R.font.cormorantinfant_medium, FontWeight.Medium),
        Font(R.font.cormorantinfant_bold, FontWeight.Bold),
        Font(R.font.cormorantinfant_light, FontWeight.Light),
        Font(R.font.cormorantinfant_italic, FontWeight.Normal,FontStyle.Italic),
        Font(R.font.cormorantinfant_mediumitalic, FontWeight.Medium,FontStyle.Italic),
        Font(R.font.cormorantinfant_bolditalic, FontWeight.Bold,FontStyle.Italic),
        Font(R.font.cormorantinfant_lightitalic, FontWeight.Light,FontStyle.Italic),
    )

 */

data class FontExample(
    val nameFont: String = "",
    val style: TextStyle = TextStyle()
)

@Composable
fun TextFontFamalyAlternate() {

    val style = MaterialTheme.typography.bodyMedium.merge(
        TextStyle(
            fontSize = 18.sp,
            textAlign = TextAlign.Start,
            fontStyle = FontStyle.Normal
        )
    )

    val fonts = listOf(
        FontExample(
            nameFont = "Serif",
            style = style.merge(
                TextStyle(
                    fontFamily = FontFamily.Serif
                )
            )
        ),
        FontExample(
            nameFont = "Cabin",
            style = style.merge(
                TextStyle(
                    fontFamily = Cabin
                )
            )
        ),
        FontExample(
            nameFont = "Poppins",
            style = style.merge(
                TextStyle(
                    fontFamily = Poppins
                )
            )
        ),
        FontExample(
            nameFont = "AbrilFatface",
            style = style.merge(
                TextStyle(
                    fontFamily = AbrilFatface
                )
            )
        ),
        FontExample(
            nameFont = "Alice",
            style = style.merge(
                TextStyle(
                    fontFamily = Alice
                )
            )
        ),
        FontExample(
            nameFont = "Cormorantinfant",
            style = style.merge(
                TextStyle(
                    fontFamily = Cormorantinfant
                )
            )
        ),
    )


    val text = "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã."

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )


    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, MaterialTheme.colorScheme.onBackground)
            .padding(padding),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(padding)

    ) {
        items(fonts){
            val nameFont = it.nameFont
            val styleText = it.style
            Text(
                text = "${'$'}Text(${'$'}nameFont)",
                style = styleText
            )

            Text(
                text = "${'$'}text - Italic",
                style = styleText.merge(
                    TextStyle(
                        fontStyle = FontStyle.Italic
                    )
                )
            )

            Text(
                text = "${'$'}text - Bold",
                style = styleText.merge(
                    TextStyle(
                        fontWeight = FontWeight.Bold,
                    )
                )
            )

            Spacer(modifier = Modifier.height(padding))

        }

    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –†–∞–±–æ—Ç–∞ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏",
                    url = "https://developer.android.com/develop/ui/compose/text/fonts?hl=ru"
                ),
                TextClickLink(
                    text = "–í—ã–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç –º–æ–∂–Ω–æ —Å ",
                    textUrl = "\uD83D\uDCD6 Google Fonts",
                    url = "https://fonts.google.com/?hl=ru"
                ),
                TextClickLink(
                    text = "Playwrite ‚Äî —ç—Ç–æ –Ω–æ–≤–æ–µ —Å—É–ø–µ—Ä—Å–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤, –ø–æ–º–æ–≥–∞—é—â–µ–µ —É—á–∞—â–∏–º—Å—è –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –∏–∑—É—á–∞—Ç—å –ø–æ—á–µ—Ä–∫.",
                    textUrl = "\uD83D\uDCD6 Google Fonts blog",
                    url = "https://fonts.googleblog.com/"
                ),
                TextClickLink(
                    text = "Google fonts \n –í—ã–±–µ—Ä–∏—Ç–µ language -> Cyrillic, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —à—Ä–∏—Ñ—Ç –∏ –≤ –≤–∏–¥–µ –∞—Ä—Ö–∏–≤–∞ —Å–∫–∞—á–∞–π—Ç–µ. –§–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º *.ttf –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º –∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤ –ø–∞–ø–∫—É /res/font –ø—Ä–æ–µ–∫—Ç–∞",
                    textUrl = "\uD83D\uDCD6 https://fonts.google.com/",
                    url = "https://fonts.google.com/"
                ),

            ),

            ),


        ExampleCode(
            id = 5,
            title = "–¶–≤–µ—Ç, –∫–æ–Ω—Ç–∞—Å—Ç–Ω–æ—Å—Ç—å",
            comment = """
–ó–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä |color|.

–ó–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä Modifier.|background|.
                        
–ï—Å–ª–∏ |Color| –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (|!Unspecified|).

–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å—Ç–∏–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ü–≤–µ—Ç–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è |!LocalContentColor| —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º |!LocalContentAlpha|. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—É, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è |!–∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ü–≤–µ—Ç–∞–º —Ñ–æ–Ω–∞| –∏ –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å |!–∫–æ–Ω—Ç—Ä–∞—Å—Ç| –∏ |!–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å|.
                
–õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–∞ |MaterialTheme|. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ü–≤–µ—Ç–∞–º –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ |!MaterialTheme.colorScheme|

–ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å |–∫–æ–Ω—Ç–∞—Å—Ç–Ω–æ—Å—Ç—å| —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞.

–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ —á–∏—Å—Ç—ã—Ö —Ü–≤–µ—Ç–æ–≤. 

–ö–∞–∫ –±–µ–ª—ã–π –∏ —á—ë—Ä–Ω—ã–π —è–≤–ª—è—é—Ç —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å–≤–µ—Ç–ª–æ–≥–æ –∏ —Ç—ë–º–Ω–æ–≥–æ, —Ç–∞–∫ –∏ –ø–µ—Ä–≤–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞, –∂—ë–ª—Ç—ã–π, —Å–∏–Ω–∏–π –∏ –∫—Ä–∞—Å–Ω—ã–π, –Ω–∞–¥–µ–ª–µ–Ω—ã —Å–≤–æ–π—Å—Ç–≤–æ–º –Ω–∞–∏–±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, —Å–æ–∑–¥–∞—é—â–µ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Å–∏–ª—ã –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. 

–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –æ—Å–ª–∞–±–µ–≤–∞–µ—Ç –æ—Ç –ø–µ—Ä–≤–∏—á–Ω—ã—Ö ‚Äî –∫ —Ü–≤–µ—Ç–∞–º —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞.

(–∏–∑ –∫–Ω–∏–≥–∏ –ò—Ç—Ç–µ–Ω–∞).

            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. Color",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/Color"
                ),
                TextClickLink(
                    text = "Material Design 3 –≤ Compose",
                    textUrl = "\uD83D\uDCD6 –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º",
                    url = "https://developer.android.com/develop/ui/compose/designsystems/material3?hl=ru"
                ),
                TextClickLink(
                    text = "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ",
                    textUrl = "\uD83D\uDCD6 Developers.Codelabs",
                    url = "https://codelabs.developers.google.com/visualize-dynamic-color#0"
                ),
                TextClickLink(
                    text = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤ ",
                    textUrl = "\uD83D\uDCD6 ImageColorPicker.com",
                    url = "https://imagecolorpicker.com/color-contrast-checker/000000-ef1515"
                ),
                TextClickLink(
                    text = "–¶–≤–µ—Ç–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ ",
                    textUrl = "\uD83D\uDCD6 ImageColorPicker.com",
                    url = "https://imagecolorpicker.com/color-code/22200d"
                ),
                TextClickLink(
                    text = "–¢–µ–æ—Ä–∏—è —Ü–≤–µ—Ç–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç ",
                    textUrl = "\uD83D\uDCD6 Datasakura. –•–∞–±—Ä ",
                    url = "https://habr.com/ru/articles/494750/"
                ),
                TextClickLink(
                    text = "–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞ ",
                    textUrl = "\uD83D\uDCD6 W3C Recommendation 11 December 2008 ",
                    url = "https://www.w3.org/TR/WCAG20/"
                ),
                TextClickLink(
                    text = "–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å –ø–æ–º–æ—â—å—é SASS ",
                    textUrl = "\uD83D\uDCD6 Datasakura. –•–∞–±—Ä ",
                    url = "https://ru.hexlet.io/blog/posts/chto-nuzhno-znat-o-kontraste-teksta-i-kak-kontrolirovat-kontrast-s-pomoschyu-sass#primer-vychisleniya-koeffitsient-kontrasta"
                ),
                TextClickLink(
                    text = "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ü–≤–µ—Ç–æ–≤ –û–Ω–ª–∞–π–Ω",
                    textUrl = "\uD83D\uDCD6 Color Scheme ",
                    url = "https://colorscheme.ru/color-converter.html"
                ),
                TextClickLink(
                    text = "–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ –¥–≤—É–º —Ü–≤–µ—Ç–∞–º. Kotlin –ø—Ä–æ–≥—Ä–∞–º–º–∞. ",
                    textUrl = "\uD83D\uDCD6 play.kotlinlang.org ",
                    url = "https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS44LjIxIiwiY29kZSI6ImltcG9ydCBqYXZhLnV0aWwuKlxuaW1wb3J0IGphdmEubWF0aC4qXG5pbXBvcnQgamF2YS5hd3QuQ29sb3JcblxuLy9pbnB1dDogYzggPSAwLi4yNTVcbi8vb3V0cHV0OiBjID0gMC4uMVxuLy/QntC/0YDQtdC00LXQu9C10L3QuNC1INC70LjQvdC10LnQvdC+0LPQviDQt9C90LDRh9C10L3QuNGPINC60L7QvNC/0L7QvdC10L3RgtGLINGG0LLQtdGC0LBcbmZ1biBjb2xvcl9jb21wb25lbnRzKGM4OkludCk6RmxvYXQge1xuICAgIHZhciBjU3JnYjpGbG9hdCA9IGM4LnRvRmxvYXQoKS8yNTVcbiAgICBcbiAgICBpZiAoY1NyZ2IgPiAwLjAzOTI4KXtcbiAgICAgICAgdmFsIGMgPSAoY1NyZ2IrMC4wNTUpLzEuMDU1XG4gICAgICAgIGNTcmdiID0gTWF0aC5wb3coYywyLjQpLnRvRmxvYXQoKVxuICAgIH0gXG4gICAgIGVsc2UgY1NyZ2IgPSAoY1NyZ2IvMTIuOTIpLnRvRmxvYXQoKVxuICAgIFxuICAgIHJldHVybiBjU3JnYlxufVxuXG4vL9Cy0YvRh9C40YHQu9C10L3QuNGPINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QvtC5INGP0YDQutC+0YHRgtC4XG5mdW4gY2FsY3VsYXRfYnJpZ2h0bmVzcyhyOkZsb2F0LGc6RmxvYXQsYjpGbG9hdCkgPSAwLjIxMjYgKiByICsgMC43MTUyICogZyArIDAuMDcyMiAqIGJcblxuLy/QstGL0YfQuNGB0LvQtdC90LjRjyDQutC+0Y3RhNGE0LjRhtC40LXQvdGCINC60L7QvdGC0YDQsNGB0YLQsFxuZnVuIGNvbnRyYXN0X3JhdGlvX2NhbGN1bGF0aW9uKGNvbG9yMTpDb2xvcixjb2xvcjI6Q29sb3IpOkZsb2F0e1xuICAgIFxuICAgIHZhciByID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjEucmVkKSBcbiAgICB2YXIgZyA9IGNvbG9yX2NvbXBvbmVudHMoY29sb3IxLmdyZWVuKVxuICAgIHZhciBiID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjEuYmx1ZSlcbiAgICBcbiAgICB2YWwgbDEgPSBjYWxjdWxhdF9icmlnaHRuZXNzKHIsZyxiKVxuXG4gICAgciA9IGNvbG9yX2NvbXBvbmVudHMoY29sb3IyLmdldFJlZCgpKSBcbiAgICBnID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjIuZ2V0R3JlZW4oKSlcbiAgICBiID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjIuZ2V0Qmx1ZSgpKVxuICAgIFxuICAgIHZhbCBsMiA9IGNhbGN1bGF0X2JyaWdodG5lc3MocixnLGIpXG5cbiAgICBcbiAgICB2YWwgY29udHJhc3RfcmF0aW8gPSBpZiAobDE+bDIpICgobDEgKyAwLjA1KS8obDIgKyAwLjA1KSkudG9GbG9hdCgpXG4gICAgZWxzZSAoKGwyICsgMC4wNSkvKGwxICsgMC4wNSkpLnRvRmxvYXQoKVxuICAgIFxuICAgIHJldHVybiBjb250cmFzdF9yYXRpb1xufVxuXG5mdW4gbWFpbigpIHtcblxuLy8g0KbQstC10YIg0YTQvtC90LA6IENvbG9yKDB4RkYyMDFCMTYpICByZ2IoMzIsIDI3LCAyMikgIFxuICAgIHZhbCBoZXhDb2xvcjEgPSBcIiMyMDFCMTZcIlxuICAgIHZhbCBjb2xvcjEgPSBDb2xvci5kZWNvZGUoaGV4Q29sb3IxKVxuLy8g0KbQstC10YIg0YLQtdC60YHRgtCwOiBDb2xvcigweEZGRUJFMEQ5KSAgcmdiKDIzNSwgMjI0LCAyMTcpICBcbiAgICB2YWwgaGV4Q29sb3IyID0gXCIjRUJFMEQ5XCJcbiAgICB2YWwgY29sb3IyID0gQ29sb3IuZGVjb2RlKGhleENvbG9yMilcbiAgICBcbiAgICB2YWwgaz0gY29udHJhc3RfcmF0aW9fY2FsY3VsYXRpb24oY29sb3IxLGNvbG9yMilcbiAgICBwcmludGxuKFwi0KbQstC10YIg0YTQvtC90LA6ICAgJGhleENvbG9yMVwiKSAgXG4gICAgcHJpbnRsbihcItCm0LLQtdGCINGC0LXQutGB0YLQsDogJGhleENvbG9yMlwiKSAgXG4gICAgcHJpbnRsbihcIiDQmtC+0L3RgtGA0LDRgdGC0L3QvtGB0YLRjDogJGtcIikgIFxuICAgIFxufSIsInBsYXRmb3JtIjoiamF2YSIsImFyZ3MiOiIifQ=="
                ),
                TextClickLink(
                    text = "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö —Ü–≤–µ—Ç–æ–≤ ",
                    textUrl = "\uD83D\uDCD6 –û–Ω–ª–∞–π–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ",
                    url = "https://planetcalc.ru/7779/"
                ),
            ),

            lambdaFun = { TextColorAny() },
            code ="""   
@Composable
fun TextColorAny() {

    LazyColumn(
        modifier = Modifier
            .padding(8.dp)
            .fillMaxWidth()
            .background(Color(0xFF201B16))
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
    ) {
        item {
            Column(
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:17.08 (–û—Ç–ª–∏—á–Ω—ã–π)",
                    color = Color(0xFFEBE0D9),
                    fontSize = 18.sp
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:5.44 (–•–æ—Ä–æ—à–∏–π)",
                    color = Color.Red,
                    fontSize = 18.sp
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:4.16 (–ü–ª–æ—Ö–æ–π)",
                    color = colorResource(id = R.color.red700),
                    fontSize = 18.sp
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:2.14 (–ü–ª–æ—Ö–æ–π)",
//–ò–∑ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ SRGB. –ê–ª—å—Ñ–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
                    color = Color(
                        red = 0x44,   //between 0 and 255
                        green = 0x55,
                        blue = 0x88,
                        alpha = 0xFF
                    ),
                    fontSize = 18.sp
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:2.67 (–ü–ª–æ—Ö–æ–π)", //32-bit ARGB color
                    color = Color(0xFF993399),
                    fontSize = 18.sp
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:12.44 (–û—Ç–ª–∏—á–Ω—ã–π)",
                    fontSize = 18.sp,
                    style = TextStyle(
                        color = Color.Green,
                    )
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:8.59 (–•–æ—Ä–æ—à–∏–π)",
                    style = TextStyle(
                        color = Color.Yellow,
                        background = Color.Blue
                    ),
                    fontSize = 18.sp,
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:16.40 (–û—Ç–ª–∏—á–Ω—ã–π)",
                    modifier = Modifier
                        .background(Color(0xff22200d)),
                    color = Color(0xffffff00),
                    fontSize = 18.sp,
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:7.41 (–•–æ—Ä–æ—à–∏–π)",
                    modifier = Modifier
                        .background(MaterialTheme.colorScheme.secondary),
                    color = MaterialTheme.colorScheme.onSecondary,
                    fontSize = 18.sp,
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:7.55 (–•–æ—Ä–æ—à–∏–π)",
                    modifier = Modifier
                        .background(MaterialTheme.colorScheme.secondaryContainer),
                    color = MaterialTheme.colorScheme.onSecondaryContainer,
                    fontSize = 18.sp,
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:9.31 (–•–æ—Ä–æ—à–∏–π)",
                    modifier = Modifier
                        .background(MaterialTheme.colorScheme.tertiaryContainer),
                    color = MaterialTheme.colorScheme.onTertiaryContainer,
                    fontSize = 18.sp,
                )

                Text(
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:21.00 (–û—Ç–ª–∏—á–Ω—ã–π)",
                    modifier = Modifier
                        .background(Color(0xff000000)),
                    color = Color(0xffffffff),
                    fontSize = 18.sp,
                )

            }
        }


    }
}
            """.trimIndent()
        ),
        ExampleCode(
            id = 20,
            title = "–¶–≤–µ—Ç —Ñ–æ–Ω–∞ ",
            comment = """
–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä Modifier.|background|(color) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∫–æ–º–ø–æ–Ω—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.

–ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç –±—ã–ª —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω.

–õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—á–∏—Ç–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ MaterialTheme.|colorScheme|, –Ω–∞–ø—Ä–∏–º–µ—Ä:
  
  –î–ª—è —Ñ–æ–Ω–∞                   –î–ª—è —Ç–µ–∫—Å—Ç–∞
    primary                onPrimary
    primaryContainer       onPrimaryContainer
    secondary              onSecondary
    secondaryContainer     onSecondaryContainer
    tertiary               onTertiary
    tertiaryContainer      onTertiaryContainer
  
  
      |–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞|

–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É |Web Content Accessibility Guidelines| (WCAG), –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ: 

    |(L1 + 0,05) / (L2 + 0,05)|, 
–≤ –∫–æ—Ç–æ—Ä–æ–π: 
 |L1| ‚Äî –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å |—Å–∞–º–æ–≥–æ —Å–≤–µ—Ç–ª–æ–≥–æ| —Ü–≤–µ—Ç–∞. 
 |L2| ‚Äî –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å |—Å–∞–º–æ–≥–æ —Ç—ë–º–Ω–æ–≥–æ| —Ü–≤–µ—Ç–∞.


|!–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏|:

1)–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –Ω–µ –º–µ–Ω–µ–µ |4.5|. 
–í –∏–¥–µ–∞–ª–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ |7|.

2)–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–µ–Ω–µ–µ |3|. 
–í –∏–¥–µ–∞–ª–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ |4.5|. 

|!–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ|:
–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç —Ä–∞–∑–º–µ—Ä–æ–º –≤ |18| –ø–∏–∫—Å–µ–ª–µ–π, –ª–∏–±–æ |14| –ø–∏–∫—Å–µ–ª–µ–π —Å –ø–æ–ª—É–∂–∏—Ä–Ω—ã–º –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏–µ–º.


     |–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏|

 –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç—å—é —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç –Ω—É–ª—è –¥–æ –µ–¥–∏–Ω–∏—Ü—ã, 
–≥–¥–µ 0 - —á—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç, 
    1 - –±–µ–ª—ã–π —Ü–≤–µ—Ç. 

 –ö–∞–∂–¥–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ü–≤–µ—Ç–∞ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ C8, –Ω–∞—Ö–æ–¥—è—â–µ–µ—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 255 
( C8 = {R8 - –∫—Ä–∞—Å–Ω—ã–π, G8 - –∑–µ–ª–µ–Ω—ã–π, B8 - —Å–∏–Ω–∏–π}).
  
 –ü–µ—Ä–µ–≤–µ–¥–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–≤–µ—Ç–∞ –∏–∑ —Ü–µ–ª—ã—Ö –≤ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0..1:
 |Csrgb| = C8/255, –≥–¥–µ C8 = { R8, G8, B8 }

 –ù–∞–π–¥–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–≤–µ—Ç–∞ –ª–∏–Ω–µ–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ C = { R,G,B }:
 |C = ((Csrgb+0.055)/1.055)^2.4| , 
    –µ—Å–ª–∏ |Csrgb > 0.03928|
–∏–ª–∏
 |C = Csrgb/12.92|, 
     –µ—Å–ª–∏ |Csrgb <= 0.03928|

–ò—Å–ø–æ–ª—å–∑—É—è –ª–∏–Ω–µ–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–≤–µ—Ç–∞ C={R, G, B} –ø–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —è—Ä–∫–æ—Å—Ç—å —Ü–≤–µ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
L = 0.2126R + 0.7152G + 0.0722B

–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º—É–ª–µ, –æ—Ç—Ä–∞–∂–∞—é—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≥–ª–∞–∑–∞ –∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Å–≤–µ—Ç–∞: –∑–µ–ª–µ–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–≤–µ—Ç–∞ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —è—Ä–∫–æ, –∫—Ä–∞—Å–Ω–∞—è - –º–µ–Ω–µ–µ –∏ —Å–∏–Ω—è—è –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ.


    |–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞|
    
 –¶–≤–µ—Ç —Ñ–æ–Ω–∞:   .background(Color(0xFF201B16)) 
  rgb(32, 27, 22)
    
R_sRGB = 32 / 255 = 0,12
G_sRGB = 27 / 255 = 0,10
B_sRGB = 22 / 255 = 0,09   

 R_sRGB < 0,03928 , —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ 
     |R| = 0,12 / 12,92 =  |!0,009|
 G_sRGB < 0,03928 , —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ 
     |G| = 0,10 / 12,92 =  |!0,008|
 B_sRGB < 0,03928 , —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ 
     |B| = 0,09 / 12,92 =  |!0,007|

–ò—Å—Ö–æ–¥—è –∏–∑ —Ñ–æ—Ä–º—É–ª—ã
  L = 0,2126 * R + 0,7152 * G + 0,0722 * B

 |L1| = 0.2126 * |0,009| + 0.7152 * |0,008| + 0.0722 * |0,007| = 0.0081404     
   
 –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: color = Color(0xFFEBE0D9)
 rgb(235, 224, 217)
    
R_sRGB = 235 / 255 = 0,92
G_sRGB = 224 / 255 = 0,88
B_sRGB = 217 / 255 = 0,85  

 –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è > 0,03928 ,—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
 r = ((0.92 + 0.055) / 1.055)
 g = ((0.88 + 0.055) / 1.055)
 b = ((0.85 + 0.055) / 1.055)

 R = Math.pow(r,2.4) = 0.8276
 G = Math.pow(g,2.4) = 0.7484
 B = Math.pow(b,2.4) = 0.6921
 
 L = 0,2126 * R + 0,7152 * G + 0,0722 * B
 
 |L2| = 0.2126 * |0.8276| + 0.7152 * |0.7484| + 0.0722 * |0.6921| = 0.76117306          

 k  = (L2+ 0,05) / (L1 + 0,05)
 
 k  = (0.76117306 + 0,05)/(0.0081404 + 0,05)=13.9604
 
"–ö–æ–Ω—Ç—Ä–∞—Å—Ç:17.08 (–û—Ç–ª–∏—á–Ω—ã–π)"    


                
                
            """.trimIndent(),
            lambdaFun = { BackgroundDriver() },
            code ="""
@Composable
fun BackgroundDriver(
    message: String = stringResource(R.string.text_compose),

    ){

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val fontSize = remember {
        mutableFloatStateOf(35f)
    }

    var indexColor by remember { mutableIntStateOf(-1) }

    var colorBg by remember {
        mutableStateOf(DataColor.colors[8])
    }
    var colorTx by remember {
        mutableStateOf(DataColor.colors[12])
    }

    Column(
        modifier = Modifier
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(padding)
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .border(1.dp, Color.White)
                .background(color = colorBg)
                .widthIn(min = 150.dp)
                .padding(padding),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = message,
                modifier = Modifier
                    .padding(16.dp),
                style = TextStyle(
                    textAlign = TextAlign.Center,
                    fontFamily = Alice,
                    fontSize = fontSize.floatValue.sp,
                    lineHeight = fontSize.floatValue.sp,
                    color = colorTx
                ),
            )
        }

        val k = contrast_ratio_calculation(colorTx,colorBg)

        val status = stringResource(id = R.string.—Åontrast,k) + contrast_ratio_comment(k)
    
        Text(
            text = status,
            textAlign = TextAlign.Center,
            fontSize = 20.sp
        )
        LazyColumn(
            modifier = Modifier
                .fillMaxWidth()
                .padding(padding),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            item {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(padding)
                ) {
                    if (indexColor == -1){

                        SliderSimple("size",fontSize,10f,50f)

                        Row(
                            modifier = Modifier
                                .padding(padding)
                                .widthIn(max = 250.dp),
                            horizontalArrangement = Arrangement.SpaceAround,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Box(
                                modifier = Modifier
                                    .padding(padding)
                                    .border(1.dp, MaterialTheme.colorScheme.onBackground)
                                    .background(colorBg)
                                    .size(40.dp)
                                    .clickable {
                                        indexColor = 0
                                    }
                            )
                            Box(
                                modifier = Modifier
                                    .padding(padding)
                                    .border(1.dp, MaterialTheme.colorScheme.onBackground)
                                    .background(colorTx)
                                    .size(40.dp)
                                    .clickable {
                                        indexColor = 1
                                    }
                            )
                        }
                    } else{
                        ColorSelect(
                            colorCurrent = when(indexColor){
                                0 -> colorBg
                                else -> colorTx
                            },
                            onColorSelect ={
                                when(indexColor){
                                    0 -> colorBg = it
                                    else -> colorTx= it
                                }
                                indexColor = -1
                            },
                            title = when(indexColor){
                                0 -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞"
                                else -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                            },

                        )

                    }


                }

            }

        }
    }
}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–¢–µ–æ—Ä–∏—è —Ü–≤–µ—Ç–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç ",
                    textUrl = "\uD83D\uDCD6 Datasakura. –•–∞–±—Ä ",
                    url = "https://habr.com/ru/articles/494750/"
                ),
                TextClickLink(
                    text = "–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞ ",
                    textUrl = "\uD83D\uDCD6 W3C Recommendation 11 December 2008 ",
                    url = "https://www.w3.org/TR/WCAG20/"
                ),
                TextClickLink(
                    text = "–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å –ø–æ–º–æ—â—å—é SASS ",
                    textUrl = "\uD83D\uDCD6 Datasakura. –•–∞–±—Ä ",
                    url = "https://ru.hexlet.io/blog/posts/chto-nuzhno-znat-o-kontraste-teksta-i-kak-kontrolirovat-kontrast-s-pomoschyu-sass#primer-vychisleniya-koeffitsient-kontrasta"
                ),
                TextClickLink(
                    text = "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ü–≤–µ—Ç–æ–≤ –û–Ω–ª–∞–π–Ω",
                    textUrl = "\uD83D\uDCD6 Color Scheme ",
                    url = "https://colorscheme.ru/color-converter.html"
                ),
                TextClickLink(
                    text = "–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ –¥–≤—É–º —Ü–≤–µ—Ç–∞–º. Kotlin –ø—Ä–æ–≥—Ä–∞–º–º–∞. ",
                    textUrl = "\uD83D\uDCD6 play.kotlinlang.org ",
                    url = "https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS44LjIxIiwiY29kZSI6ImltcG9ydCBqYXZhLnV0aWwuKlxuaW1wb3J0IGphdmEubWF0aC4qXG5pbXBvcnQgamF2YS5hd3QuQ29sb3JcblxuLy9pbnB1dDogYzggPSAwLi4yNTVcbi8vb3V0cHV0OiBjID0gMC4uMVxuLy/QntC/0YDQtdC00LXQu9C10L3QuNC1INC70LjQvdC10LnQvdC+0LPQviDQt9C90LDRh9C10L3QuNGPINC60L7QvNC/0L7QvdC10L3RgtGLINGG0LLQtdGC0LBcbmZ1biBjb2xvcl9jb21wb25lbnRzKGM4OkludCk6RmxvYXQge1xuICAgIHZhciBjU3JnYjpGbG9hdCA9IGM4LnRvRmxvYXQoKS8yNTVcbiAgICBcbiAgICBpZiAoY1NyZ2IgPiAwLjAzOTI4KXtcbiAgICAgICAgdmFsIGMgPSAoY1NyZ2IrMC4wNTUpLzEuMDU1XG4gICAgICAgIGNTcmdiID0gTWF0aC5wb3coYywyLjQpLnRvRmxvYXQoKVxuICAgIH0gXG4gICAgIGVsc2UgY1NyZ2IgPSAoY1NyZ2IvMTIuOTIpLnRvRmxvYXQoKVxuICAgIFxuICAgIHJldHVybiBjU3JnYlxufVxuXG4vL9Cy0YvRh9C40YHQu9C10L3QuNGPINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QvtC5INGP0YDQutC+0YHRgtC4XG5mdW4gY2FsY3VsYXRfYnJpZ2h0bmVzcyhyOkZsb2F0LGc6RmxvYXQsYjpGbG9hdCkgPSAwLjIxMjYgKiByICsgMC43MTUyICogZyArIDAuMDcyMiAqIGJcblxuLy/QstGL0YfQuNGB0LvQtdC90LjRjyDQutC+0Y3RhNGE0LjRhtC40LXQvdGCINC60L7QvdGC0YDQsNGB0YLQsFxuZnVuIGNvbnRyYXN0X3JhdGlvX2NhbGN1bGF0aW9uKGNvbG9yMTpDb2xvcixjb2xvcjI6Q29sb3IpOkZsb2F0e1xuICAgIFxuICAgIHZhciByID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjEucmVkKSBcbiAgICB2YXIgZyA9IGNvbG9yX2NvbXBvbmVudHMoY29sb3IxLmdyZWVuKVxuICAgIHZhciBiID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjEuYmx1ZSlcbiAgICBcbiAgICB2YWwgbDEgPSBjYWxjdWxhdF9icmlnaHRuZXNzKHIsZyxiKVxuXG4gICAgciA9IGNvbG9yX2NvbXBvbmVudHMoY29sb3IyLmdldFJlZCgpKSBcbiAgICBnID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjIuZ2V0R3JlZW4oKSlcbiAgICBiID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjIuZ2V0Qmx1ZSgpKVxuICAgIFxuICAgIHZhbCBsMiA9IGNhbGN1bGF0X2JyaWdodG5lc3MocixnLGIpXG5cbiAgICBcbiAgICB2YWwgY29udHJhc3RfcmF0aW8gPSBpZiAobDE+bDIpICgobDEgKyAwLjA1KS8obDIgKyAwLjA1KSkudG9GbG9hdCgpXG4gICAgZWxzZSAoKGwyICsgMC4wNSkvKGwxICsgMC4wNSkpLnRvRmxvYXQoKVxuICAgIFxuICAgIHJldHVybiBjb250cmFzdF9yYXRpb1xufVxuXG5mdW4gbWFpbigpIHtcblxuLy8g0KbQstC10YIg0YTQvtC90LA6IENvbG9yKDB4RkYyMDFCMTYpICByZ2IoMzIsIDI3LCAyMikgIFxuICAgIHZhbCBoZXhDb2xvcjEgPSBcIiMyMDFCMTZcIlxuICAgIHZhbCBjb2xvcjEgPSBDb2xvci5kZWNvZGUoaGV4Q29sb3IxKVxuLy8g0KbQstC10YIg0YLQtdC60YHRgtCwOiBDb2xvcigweEZGRUJFMEQ5KSAgcmdiKDIzNSwgMjI0LCAyMTcpICBcbiAgICB2YWwgaGV4Q29sb3IyID0gXCIjRUJFMEQ5XCJcbiAgICB2YWwgY29sb3IyID0gQ29sb3IuZGVjb2RlKGhleENvbG9yMilcbiAgICBcbiAgICB2YWwgaz0gY29udHJhc3RfcmF0aW9fY2FsY3VsYXRpb24oY29sb3IxLGNvbG9yMilcbiAgICBwcmludGxuKFwi0KbQstC10YIg0YTQvtC90LA6ICAgJGhleENvbG9yMVwiKSAgXG4gICAgcHJpbnRsbihcItCm0LLQtdGCINGC0LXQutGB0YLQsDogJGhleENvbG9yMlwiKSAgXG4gICAgcHJpbnRsbihcIiDQmtC+0L3RgtGA0LDRgdGC0L3QvtGB0YLRjDogJGtcIikgIFxuICAgIFxufSIsInBsYXRmb3JtIjoiamF2YSIsImFyZ3MiOiIifQ=="
                ),
                TextClickLink(
                    text = "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö —Ü–≤–µ—Ç–æ–≤ ",
                    textUrl = "\uD83D\uDCD6 –û–Ω–ª–∞–π–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ",
                    url = "https://planetcalc.ru/7779/"
                ),
            )

        ),


        ExampleCode(
            id = 5,
            title = "–ì—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–∞",
            comment = """
|Brush| –≤ Compose –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∏—Å—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—Å—è –≤–º–µ—Å—Ç–æ |color|.

–ö–∏—Å—Ç—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–∞.  

–ö–∏—Å—Ç—å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–∏–ø–∞–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è: 
   |—Ñ–æ–Ω—É|, |—Ç–µ–∫—Å—Ç—É| –∏ |—Ö–æ–ª—Å—Ç—É|.                        
 
–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∏—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è:
 
|horizontalGradient|(colors) 

|linearGradient|(colors) 

|verticalGradient|(colors) 

|sweepGradient|(colors) 

|radialGradient|(colors) 

  –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∫–∏—Å—Ç—å |SolidColor|.

–ö–∏—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –≤—ã–∑–æ–≤–∞–º–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ 
 |Modifier.background|() 
 |TextStyle| 
 |DrawScope| 
  –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫ —Ä–∏—Å—É–µ–º–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.
 
 –í–º–µ—Å—Ç–æ |colors| –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å |colorStops| –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ |—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤|.
 
 –ù–∞–ø—Ä–∏–º–µ—Ä:
 val colorStops = arrayOf(
     0.0f to Color.Yellow, |!// –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –∂–µ–ª—Ç–æ–≥–æ|
     0.2f to Color.Red,    |!//–∫—Ä–∞—Å–Ω–æ–≥–æ –±–æ–ª—å—à–µ —á–µ–º –∂–µ–ª—å—Ç–æ–≥–æ|
     1f to Color.Blue      |!//—Å–∏–Ω–µ–≥–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ|
 )
–ó–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ –¥—Ä–æ–±–∏ –æ—Ç 0 –¥–æ 1. –ó–Ω–∞—á–µ–Ω–∏—è –±–æ–ª—å—à–µ 1 –ø—Ä–∏–≤–µ–¥—É—Ç –∫ —Ç–æ–º—É, —á—Ç–æ —ç—Ç–∏ —Ü–≤–µ—Ç–∞ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ —á–∞—Å—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞.


 |tileMode| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —à–µ–π–¥–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –µ–≥–æ –≥—Ä–∞–Ω–∏—Ü. 
  –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 
   .|!Clamp| - –∫—Ä–∞–π —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –ø–æ –∫–æ–Ω–µ—á–Ω–æ–º—É —Ü–≤–µ—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é);
   .|!Decal| - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–∫—Å–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–µ–π–¥–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü;
   .|!Mirror| - —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∑–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞ –∫ –ø–µ—Ä–≤–æ–º—É;
   .|!Repeated| - —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ;

 –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏.

 –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–∏—Å—Ç–∏.

 –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∏—Å—Ç—å |AGSL| RuntimeShader

            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∏—Å—Ç—å. –†–∞—Å–∫—Ä–∞—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Compose ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Medium. Android Developers. Alejandra Stamato",
                    url = "https://medium.com/androiddevelopers/animating-brush-text-coloring-in-compose-%EF%B8%8F-26ae99d9b402"
                ),
                TextClickLink(
                    text = "Brush ‚Äî –∫–∏—Å—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/Brush"
                ),
                TextClickLink(
                    text = "Android Graphics Shading Language",
                    textUrl = "\uD83D\uDCD6 Developers.  AGSL",
                    url = "https://developer.android.com/reference/android/graphics/RuntimeShader"
                ),
            ),

            lambdaFun = { GradientOverview(it) },
            code ="""   

//********************************

@Composable
fun GradientOverview(
    isExpanded: Boolean = false,
){
    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    var indexSelect by remember { mutableIntStateOf(4) }

    val gradients = listOf(
        "linearGradient",
        "horizontalGradient",
        "verticalGradient",
        "sweepGradient",
        "radialGradient",
    )
    if (isExpanded) {
        Row(
            modifier = Modifier.fillMaxSize(),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column(
                modifier = Modifier.weight(0.7f),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center

            ) {
                RadioButtonColumn(
                    indexSelect = indexSelect,
                    items = listOf(
                        "linear",
                        "horizontal",
                        "vertical",
                        "sweep",
                        "radial",
                    ),
                    onClick = { indexSelect = it }
                )
            }

            BackgroundWithBrush(
                indexSelect = indexSelect,
                modifier = Modifier
                    .fillMaxHeight()
                    .background(color = Color.Black)
                    .padding(padding)
                    .weight(1f),
            )
        }
    } else {
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center

        ) {
            RadioButtonColumn(
                indexSelect = indexSelect,
                items = gradients,
                onClick = { indexSelect = it }
            )

            BackgroundWithBrush(
                indexSelect = indexSelect,
                modifier = Modifier
                    .fillMaxWidth()
                    .background(color = Color.Black)
                    .padding(padding)
                    .weight(1f),
            )
        }
    }
}

//********************************

@Composable
fun BackgroundWithBrush (
    indexSelect: Int = 0,
    modifier: Modifier = Modifier,
    colors: List<Color> = listOf(Color.Red,Color.Blue),
    text: String = "Hello, World!",
    style: TextStyle = MaterialTheme.typography.bodyMedium.merge(
        TextStyle(
            fontSize = 30.sp,
            textAlign = TextAlign.Center,
            color = Color.White,
            fontFamily = FontFamily.Serif //—à—Ä–∏—Ñ—Ç —Å –∑–∞—Å–µ—á–∫–∞–º–∏
        )
    ),
    ) {
    val gradientBrush = when (indexSelect) {
        0 -> Brush.linearGradient(colors)
        1 -> Brush.horizontalGradient(colors)
        2 -> Brush.verticalGradient(colors)
        3 -> Brush.sweepGradient(colors)
        else -> Brush.radialGradient(colors)
    }

    Box(
        modifier = modifier
            .fillMaxSize()
            .background(brush = gradientBrush),
        contentAlignment = Alignment.Center
    ) {
        Text(
           text = text,
           style = style
        )
    }
}

//********************************

@Composable
fun RadioButtonColumn (
    indexSelect: Int = 0,
    items: List<String> = listOf(
        "linearGradient",
        "horizontalGradient",
        "verticalGradient",
        "sweepGradient",
        "radialGradient",
    ),
    onClick: (Int) -> Unit = {},
) {
    Column(
        Modifier
            .fillMaxWidth()
            .selectableGroup(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    )
    {
        items.forEachIndexed { index, element ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable {onClick(index)  },
                verticalAlignment = Alignment.CenterVertically
            ) {
                RadioButton(
                    selected = indexSelect == index,
                    onClick = { onClick(index) },
                    modifier = Modifier.padding(8.dp)
                )
                Text(
                    text = element,
                    modifier = Modifier
                        .fillMaxWidth(),
                    fontSize = 22.sp
                )
            }
        }

    }
}
                
                
            """.trimIndent()
        ),
        ExampleCode(
            id = 20,
            title = "–ê–Ω–∏–º–∞—Ü–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞",
            comment = """
|–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ tween|
@Stable
fun <T> tween(
    durationMillis: Int = DefaultDurationMillis,
    delayMillis: Int = 0,
    easing: Easing = FastOutSlowInEasing
): TweenSpec<T> = {...}                        

–¢—Ä–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:

    |durationMillis| ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö;

    |delayMillis| ‚Äî |–∑–∞–¥–µ—Ä–∂–∫–∞| –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è |–¥–æ –∑–∞–ø—É—Å–∫–∞| –∞–Ω–∏–º–∞—Ü–∏–∏;

    |easing| ‚Äî –∫—Ä–∏–≤–∞—è —Å–º—è–≥—á–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–Ω–∏–º–∞—Ü–∏—è.

Easing ‚Äî —ç—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–≤–∏–≥–∞—Ç—å—Å—è —Ç–∞–∫, –±—É–¥—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ç—Ä–µ–Ω–∏–µ, –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –∏ –º–∞—Å—Å–∞, —Ä–∞–±–æ—Ç–∞—é—Ç. 

Easing –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º —É—Å–∫–æ—Ä—è—Ç—å—Å—è –∏ –∑–∞–º–µ–¥–ª—è—Ç—å—Å—è —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é.

–í Jetpack Compose –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ easing:

 |FastOutSlowInEasing| - –º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –∏ –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

 |LinearOutSlowInEasing| - –±—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∞–ª–æ –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

 |FastOutLinearInEasing| - –º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

 |LinearEasing| - –Ω–∞—á–∞–ª–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º

 |CubicBezierEasing| - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫—Ä–∏–≤—É—é —Å–º—è–≥—á–µ–Ω–∏—è. –î–∞–Ω–Ω—ã–π easing –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ —á–µ—Ç—ã—Ä—ë–º —Ç–æ—á–∫–∞–º.




   |–ü–æ–≤—Ç–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏|

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RememberInfiniteTransition —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π InfinRepeatable, —á—Ç–æ–±—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é. 

–ò–∑–º–µ–Ω–∏—Ç–µ —Ä–µ–∂–∏–º—ã –ø–æ–≤—Ç–æ—Ä–∞, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –æ–Ω –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ FinRepeatable –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑. 

            """.trimIndent(),
            lambdaFun = { AnimationBgGradient() },
            code ="""
@Composable
fun AnimationBgGradient(
    backgroundBox: Painter = painterResource(id = R.drawable.bg2),
){

    // –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä [InfiniteTransition] –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
    val infiniteTransition = rememberInfiniteTransition()

    // –°–æ–∑–¥–∞–µ—Ç –¥–æ—á–µ—Ä–Ω—é—é –∞–Ω–∏–º–∞—Ü–∏—é —Ç–∏–ø–∞ float –∫–∞–∫ —á–∞—Å—Ç—å [InfiniteTransition].
    val endX by infiniteTransition.animateFloat(
        initialValue = 150f,
        targetValue = 200f,
        animationSpec = infiniteRepeatable(
            // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 2000 –º—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–≤–æ–π –∑–∞–º–µ–¥–ª–µ–Ω–∏—è LinearOutSlowInEasing
            animation = tween(2000, easing = LinearEasing),
            // –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ (—Ç. –µ. –∫–∞–∂–¥—ã–µ 2000 –º—Å) –∞–Ω–∏–º–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å [initialValue]
            repeatMode = RepeatMode.Reverse
        ),
        label = "size"
        
    )

    val color by infiniteTransition.animateColor(
        initialValue = Color.Transparent,
        targetValue = Color.Blue,
        animationSpec = infiniteRepeatable(  //LinearOutSlowInEasing
            animation = tween(1000, easing = LinearEasing),
            repeatMode = RepeatMode.Reverse
        ),
        label = "color"
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black),
        contentAlignment = Alignment.Center
    ){

        Image(
            painter = backgroundBox,
            contentDescription = null,
            modifier = Modifier
                .fillMaxSize(),
            contentScale = ContentScale.Crop,
        )

        BackgroundWithBrush(
            indexSelect = 4,     //radialGradient
            modifier = Modifier
                .fillMaxSize(),
            colors = listOf(Color.Red,color),
            StartDp = 0,
            endDp = endX.toInt(),
            tileMode = TileMode.Decal,
            style = MaterialTheme.typography.bodyMedium.merge(
                TextStyle(
                    fontSize = 25.sp,
                    textAlign = TextAlign.Center,
                    color = Color.White,
                    fontFamily = FontFamily.Serif 
                )
            ),
        )

    }
}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ö—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Quick guide",
                    url = "https://developer.android.com/develop/ui/compose/animation/quick-guide?hl=ru"
                ),
                TextClickLink(
                    text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Customize",
                    url = "https://developer.android.com/develop/ui/compose/animation/customize?hl=ru"
                ),
                TextClickLink(
                    text = "Animations in Compose   ",
                    textUrl = "\uD83D\uDCD6 Developers. Compose. Animation. Introduction",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º, —Å–≤–æ–π—Å—Ç–≤–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º, –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ –ø–∞–∫–µ—Ç–µ androidx.compose.animation.core  ",
                    textUrl = "\uD83D\uDCD6 Developers. Compose. Animation. Core",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/animation/core/package-summary#Ease()"
                ),
                TextClickLink(
                    text = "–û—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å  ",
                    textUrl = "\uD83D\uDCD6 m3.material.io. Easing and duration",
                    url = "https://m3.material.io/styles/motion/easing-and-duration/applying-easing-and-duration"
                ),
                TextClickLink(
                    text = "How to Create Gradient Background in Android Jetpack Compose ",
                    textUrl = "\uD83D\uDCD6 Bolt UiX ",
                    url = "https://www.boltuix.com/2023/01/how-to-create-gradient-background-in.html"
                ),
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),
            )

        ),

        ExampleCode(
            id = 21,
            title = "–ì—Ä–∞–¥–∏–µ–Ω—Ç —à—Ä–∏—Ñ—Ç–∞",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |brush| (–∫–∏—Å—Ç—å) –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ |color| –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞ —Ç–µ–∫—Å—Ç–∞.
                
–í –Ω–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∏—Å—Ç—å |horizontalGradient|:

|!fun horizontalGradient(
    colors: List<Color>,
    startX: Float = 0.0f,
    endX: Float = Float.POSITIVE_INFINITY,
    tileMode: TileMode = TileMode.Clamp
): Brush|
 
|colors| - –¶–≤–µ—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞

|start| - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞. 

|end| - –ö–æ–Ω–µ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞. 
     
|tileMode| - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —à–µ–π–¥–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –µ–≥–æ –≥—Ä–∞–Ω–∏—Ü. 
 
 TileMode 
   .|!Clamp| - –∫—Ä–∞–π —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –ø–æ –∫–æ–Ω–µ—á–Ω–æ–º—É —Ü–≤–µ—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é);
   .|!Decal| - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–∫—Å–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–µ–π–¥–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü;
   .|!Mirror| - —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∑–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞ –∫ –ø–µ—Ä–≤–æ–º—É;
   .|!Repeated| - —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ;

 

                
            """.trimIndent(),
            lambdaFun = { GradientDriver(it) },
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),
                TextClickLink(
                    text = "Brush ‚Äî –∫–∏—Å—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/Brush"
                ),

                ),

            ),

        ExampleCode(
            id = 21,
            title = "–ö–∏—Å—Ç—å AGSL",
            comment = """
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–∏—Å—Ç—å |AGSL| (Android Graphics Shading Language) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ |RuntimeShader|. 

–®–µ–π–¥–µ—Ä—ã - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é —Ä–∞–±–æ—Ç—É –ø–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—é —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è.

C –ø–æ–º–æ—â—å—é —à–µ–π–¥–µ—Ä–æ–≤ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã, –∞ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –ø–æ—Å–∫–æ–ª—å–∫—É –≤—Å–µ —ç—Ç–æ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö.

|AGSL| –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Android 13 –∏ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.

|GLSL| ES 1.0 - —è–∑—ã–∫ —à–µ–π–¥–∏–Ω–≥–∞ |OpenGL ES|

|AGSL| –∏ |GLSL| –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏ –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç |–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏| –º–Ω–æ–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ñ—Ä–∞–≥–º–µ–Ω—Ç–Ω—ã—Ö —à–µ–π–¥–µ—Ä–æ–≤ |GLSL| –≤ |Android| —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.
                
|AGSL| (–∏ |GLSL|) ‚Äî —ç—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –≤ —Å—Ç–∏–ª–µ |C|. 

–í GLSL –≤–≤–µ–¥–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
 1)–¥–ª—è —Å–≤—è–∑–∏ —à–µ–π–¥–µ—Ä–∞ —Å –≤–Ω–µ—à–Ω–∏–º –º–∏—Ä–æ–º (|uniform|); 
 2)—Ñ—Ä–∞–≥–º–µ–Ω—Ç–Ω–æ–≥–æ —à–µ–π–¥–µ—Ä–∞ —Å –≤–µ—Ä—à–∏–Ω–Ω—ã–º —à–µ–π–¥–µ—Ä–æ–º (|varying|); 
 3)–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ-–∞—Ç—Ä–∏–±—É—Ç—ã –≤–µ—Ä—à–∏–Ω–∞ (|attribute|). 
 
–¢–∞–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏.

–í GLSL –µ—Å—Ç—å —Ü–∏–∫–ª—ã:  for, while, do..while ... 

|AGSL| –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ø–æ–ª–æ–≤–∏–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.

–ò–º–µ–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª–∏–Ω—ã 2‚Äì4 –æ–±–æ–∑–Ω–∞—á–∞—é—Ç—Å—è –æ–¥–Ω–æ–π –±—É–∫–≤–æ–π.

|vect.xyzw| ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–º —Ç–æ—á–∫–∏/–Ω–æ—Ä–º–∞–ª–∏.

|vect.rgba| ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–º —Ü–≤–µ—Ç–∞.

|vect.LTRB| ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –∫–æ–≥–¥–∞ –≤–µ–∫—Ç–æ—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (–Ω–µ –≤ GLSL).

–í |AGSL| 0 –∏ 1 –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã 0 –∏–ª–∏ 1 –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. 
–ü—Ä–∏–º–µ—Ä: 
  |!vect.rgb1 == vec4(vect.rgb,1)|

 –ö–∞–∂–¥–∞—è —à–µ–π–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ |main|. 

–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç |GLSL|, —Ñ—É–Ω–∫—Ü–∏—è |AGSL| –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —à–µ–π–¥–µ—Ä–∞ –≤ ¬´–ª–æ–∫–∞–ª—å–Ω—ã—Ö¬ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö,–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª—è –≤ –≤–∏–¥–µ |vec4| —Å–æ —Å—Ä–µ–¥–Ω–µ–π –∏–ª–∏ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.

–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–µ–π–¥–µ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º |uniform|

–ö–æ–¥ —à–µ–π–¥–µ—Ä–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è |–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è| –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç |—Ü–≤–µ—Ç|, –∫–æ—Ç–æ—Ä—ã–º –ø–∏–∫—Å–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–∫—Ä–∞—à–µ–Ω.

–ö–æ–¥ —à–µ–π–¥–µ—Ä–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å —Ç–∏–ø–æ–º |String|.

 –ü—Ä–∏–º–µ—Ä —à–µ–π–¥–µ—Ä–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:
************************** 
 | –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–µ–π–¥–µ—Ä–∞|    
 
 |!// –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (pixels)|
    uniform float2 iResolution;   
 |!// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —à–µ–π–¥–µ—Ä–∞ time (s)|
    uniform float  iTime;         

–ú–æ–≥—É—Ç –±—ã—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...
 
 |!// –¢–µ–ª–æ —à–µ–π–¥–µ—Ä–∞| 
    half4 |main|(float2 fragCoord) {
 |!// –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–∏–∫—Å–µ–ª–µ–π (from 0 to 1)|
       float2 scaled = fragCoord/iResolution.xy;
       float2 col = abs(1.0-mod(scaled+0.5*cos(iTime+vec2(0,2)),2.0));      
       return half4(col, 0.2, 1);
      
 }      
************************** 


      |–§—É–Ω–∫—Ü–∏–∏ AGSL|
  
  1)|!–£–≥–ª–æ–≤—ã–µ –∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏|
     |radians|(degrees) 	–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
     |degrees|(radians) 	–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞–¥–∏–∞–Ω—ã –≤ –≥—Ä–∞–¥—É—Å—ã
     |sin|(angle) 	–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏–Ω—É—Å (—É–≥–æ–ª)
     |cos|(angle) 	–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ—Å–∏–Ω—É—Å
     |tan|(angle) 	–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞–Ω–≥–µ–Ω—Å
     |asin|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª, —Å–∏–Ω—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–µ–Ω x, –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-pi/2,pi/2]
     |acos|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª, –∫–æ—Å–∏–Ω—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–µ–Ω x, –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,pi]
     |atan|(y,x)	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª, —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–µ–Ω y/x, –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-pi,pi]
     |atan|(y_over_x) 	R–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª, —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–µ–Ω y_over_x –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-pi/2,pi/2] 

   2)|!–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏|
      |pow|(x, y) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç x^y
      |exp|(x) 	    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç x^2
      |log|(x) 	    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ln(x)
      |exp2|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç  2^x
      |log2|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç  log2(x)
      |sqrt|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç  sqrt(x)
      |inversesqrt|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç  1/sqrt(x)
  
    3)|!–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏|
       |abs|(x) –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
       |sign|(x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1,0, 0,0 –∏–ª–∏ 1,0 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞–∫–∞ x.
       |floor|(x) –ë–ª–∏–∂–∞–π—à–µ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ <= x
       |ceil|(x) –ë–ª–∏–∂–∞–π—à–µ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= x
       |fract|(x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å x.
       |mod|(x,y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x –ø–æ –º–æ–¥—É–ª—é y.
       |mod|(x, float y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x –ø–æ –º–æ–¥—É–ª—é y.
       |min|(x,y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –∏–ª–∏ y.
       |min|(x, float y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –∏–ª–∏ y.
       |max|(x,y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –∏–ª–∏ y.
       |max|(x, float y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –∏–ª–∏ y.
       |Clamp|(x, minVal, maxVal) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x, –∑–∞–∂–∞—Ç–æ–µ –º–µ–∂–¥—É minVal –∏ maxVal.
       |Clamp|(x, float minVal, float maxVal) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x, –∑–∞–∂–∞—Ç–æ–µ –º–µ–∂–¥—É minVal –∏ maxVal.
       |saturation|(x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –æ—Ç 0,0 –¥–æ 1,0.
       |mix|(x, y, a) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é —Å–º–µ—Å—å x –∏ y.
       |mix|(x, y, float a) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é —Å–º–µ—Å—å x –∏ y.
       |step|(edge,x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0,0, –µ—Å–ª–∏ x < edge, –∏–Ω–∞—á–µ 1,0
       |Step|(float edge, x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0,0, –µ—Å–ª–∏ x < edge, –∏–Ω–∞—á–µ 1,0
       |Smoothstep|(edge0, edge1, x) –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –≠—Ä–º–∏—Ç–∞ –º–µ–∂–¥—É 0 –∏ 1, –∫–æ–≥–¥–∞ edge0 < x < edge1
       |Smoothstep|(float edge0, float edge1,x) –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –≠—Ä–º–∏—Ç–∞ –º–µ–∂–¥—É 0 –∏ 1, –∫–æ–≥–¥–∞ edge0 < x < edge1                   
                    
    4)|!–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏|
       |length|(x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –≤–µ–∫—Ç–æ—Ä–∞
       |distance|(p0, p1) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
       |dot|(x,y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
       |cross|(float3/half3 x, float3/half3 y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
       |normalize|(x) –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä –¥–æ  1
       |faceforward|(N, I, Nref) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç N, –µ—Å–ª–∏ —Ç–æ—á–∫–∞(Nref, I) < 0, –∏–Ω–∞—á–µ -N.
       |reflect|(I, N) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è I - 2 * dot(N,I) * N.
       |refract|(I, N, float/half eta) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–∫—Ç–æ –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è.                        
                        
    5)|!–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏|
       mat |matrixCompMult|(mat x, mat y)	—É–º–Ω–æ–∂–µ–Ω–∏–µ x –Ω–∞ y 
       mat |inverse|(mat m) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–≤–µ—Ä—Å–∏—é m     
       
    6)|!–í–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏|
        (c—Ä–∞–≤–Ω–µ–Ω–∏–µ x –∏ y –ø–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ) 

       BV |lessThan|(T x, T y) 	x < y
       BV |lessThanEqual|(T x, T y) 	x <= y
       BV |greaterThan|(T x, T y) 	x > y
       BV |greaterThanEqual|(T x, T y) 	x >= y
       BV |equal|(T x, T y) 	x == y
       BV |equal|(BV x, BV y) 	x == y
       BV |notEqual|(T x, T y) 	x != y
       BV |notEqual|(BV x, BV y) 	x != y
       bool |any|(BV x) 	true, –µ—Å–ª–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç x true
       bool |all|(BV x) 	true, –µ—Å–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã x true
       BV |not|(BV x) 	–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ x       

     –†–∞–∑–º–µ—Ä—ã –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤–≤–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å.
        T ‚Äî —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π. 
        BV ‚Äî —ç—Ç–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä—É –≤—Ö–æ–¥–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤.

            
    7)|!–§—É–Ω–∫—Ü–∏–∏ —Ü–≤–µ—Ç–∞|

       vec4 |unpremul|(vec4 color) 	–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∞–ª—å—Ñ–∞ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è
       half3 |toLinearSrgb|(half3 color) 	–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –ª–∏–Ω–µ–π–Ω–æ–µ SRGB
       half3 |fromLinearSrgb|(half3 color) 	—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ 
            

–ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∏–∂–µ ...
               
                
            """.trimIndent(),
            lambdaFun = {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                    ShaderDriver()
                }
            },
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),

                TextClickLink(
                    text = "–Ø–∑—ã–∫ —à–µ–π–¥–µ—Ä–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∏ Android ",
                    textUrl = "\uD83D\uDCD6 Developers. Graphics. AGSL",
                    url = "https://developer.android.com/develop/ui/views/graphics/agsl?hl=ru"
                ),
                TextClickLink(
                    text = "Android Graphics Shading Language ",
                    textUrl = "\uD83D\uDCD6 Developers. RuntimeShader",
                    url = "https://developer.android.com/reference/android/graphics/RuntimeShader"
                ),
                TextClickLink(
                    text = "–ö—Ä–∞—Ç–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ AGSL ",
                    textUrl = "\uD83D\uDCD6 Developers. AGSL. Quick reference.",
                    url = "https://developer.android.com/develop/ui/views/graphics/agsl/agsl-quick-reference"
                ),
                TextClickLink(
                    text = "The OpenGL¬Æ ES Shading Language ",
                    textUrl = "\uD83D\uDCD6 Khronos.org (opengles_shading_language.pdf)",
                    url = "https://www.khronos.org/files/opengles_shading_language.pdf"
                ),
                TextClickLink(
                    text = "–ü—Ä–∏–º–µ—Ä—ã —à–µ–π–¥–µ—Ä–æ–≤ ONLINE ",
                    textUrl = "\uD83D\uDCD6 –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ª—É—á—à–∏–º–∏ —à–µ–π–¥–µ—Ä–∞–º–∏ —Å–æ –≤—Å–µ–º –º–∏—Ä–æ–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Ç–µ—Å—å!",
                    url = "https://www.shadertoy.com/browse"
                ),
            ),

        ),

        ExampleCode(
            id = 21,
            title = "–ê–Ω–∏–º–∞—Ü–∏—è AGSL",
            comment = """
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ |OpenGL|-—à–µ–π–¥–µ—Ä–æ–≤ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.
                
–î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ |AGSL| —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è |Modifier|, –ø—Ä–∏–º–µ–Ω—è—é—â—É—é —à–µ–π–¥–µ—Ä: 

 Modifier.|shaderAGSL|(
     shaderSrc:String = GRADIENT_SHADER
 ) 

–í—Ö–æ–¥–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–∞ String, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å |AGSL|-–∫–æ–¥–æ–º —à–µ–π–¥–µ—Ä–∞.

–°–æ–∑–¥–∞–Ω–Ω—É—é –Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ñ–æ–Ω –∫ –ª—é–±–æ–º—É |Composable| UI-—ç–ª–µ–º–µ–Ω—Ç—É.

–ù–∞ —Å–∞–π—Ç–µ |https://www.shadertoy.com|  –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —à–µ–π–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ê–Ω–¥—Ä–æ–∏–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.

–®–µ–π–¥–µ—Ä—ã –Ω–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ |GLSL| (—è–∑—ã–∫ —à–µ–π–¥–∏–Ω–≥–∞ OpenGL ES).

–û–Ω–∏ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã –∏ –∏–º–µ—é—Ç |–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ| –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

|uniform| vec3  iResolution;  - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)

|uniform| float iTime;        - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

–∏ –¥—Ä.

–¢–∞–∫–∂–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —à–µ–π–¥–∏–Ω–≥, –æ—Ç–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.

–ü—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —à–µ–π–¥–µ—Ä–∞ –≤ –ê–Ω–¥—Ä–æ–∏–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É—á–∏—Ç—ã–≤–∞—è –æ—Ç–ª–∏—á–∏—è —è–∑—ã–∫–∞ |AGSL| –æ—Ç |GLSL|.

–ü–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —à–µ–π–¥–µ—Ä–∞ –≤ –ê–Ω–¥—Ä–æ–∏–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–º–æ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é |mainImage| –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ |main| ,–∞ –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏ main –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä |return| –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ü–≤–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —à–µ–π–¥–µ—Ä–∞.

AGSL |–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç| –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ GLSL, —Ç–∞–∫–∏–µ –∫–∞–∫ define –∏ –¥—Ä.

            """.trimIndent(),
            lambdaFun = {
               if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                    ShaderAnimation()
                }
            },
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ü—Ä–∏–º–µ—Ä—ã —à–µ–π–¥–µ—Ä–æ–≤ ONLINE ",
                    textUrl = "\uD83D\uDCD6 https://www.shadertoy.com - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ª—É—á—à–∏–º–∏ —à–µ–π–¥–µ—Ä–∞–º–∏ —Å–æ –≤—Å–µ–º –º–∏—Ä–æ–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Ç–µ—Å—å!",
                    url = "https://www.shadertoy.com/browse"
                ),
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–µ–π–¥–µ—Ä—ã –≤ Jetpack Compose ‚Äî ",
                    textUrl = "\uD83D\uDCD6 https://habr.com...",
                    url = "https://habr.com/ru/companies/timeweb/articles/736192/"
                ),
            ),

        ),

        ExampleCode(
            id = 21,
            title = "–ö–∏—Å—Ç—å –≤ –≤–∏–¥–µ Image",
            comment = """
–í –∫–∞—á–µ—Å—Ç–≤–µ |Brush| –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. 
    val imageBrush =
        ShaderBrush(
            shader = ImageShader(
                image = ImageBitmap.imageResource(id = R.drawable.my_cat)
            )
        )
–ö–∏—Å—Ç—å –ø—Ä–∏–º–µ–Ω–∏–º –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–∏–ø–∞–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è: 
   —Ñ–æ–Ω—É, —Ç–µ–∫—Å—Ç—É –∏ —Ö–æ–ª—Å—Ç—É.                 
   
            """.trimIndent(),
            lambdaFun = { ImageBrush()   },
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),
                TextClickLink(
                    text = "Image in JetPack Compose ‚Äî ",
                    textUrl = "\uD83D\uDCD6 https://www.jetpackcompose.net",
                    url = "https://www.jetpackcompose.net/image-in-jetpack-compose"
                ),
            ),

            ),

        ExampleCode(
            id = 19,
            title = "–£—Å–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
            comment = """
|overflow| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç –ø—Ä–∏ –µ–≥–æ –≤—ã—Ö–æ–¥–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. 

–≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ |TextOverflow|:

|Clip|: —Ç–µ–∫—Å—Ç —É—Å–µ–∫–∞–µ—Ç—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

|Ellipsis|: —Ç–µ–∫—Å—Ç —É—Å–µ–∫–∞–µ—Ç—Å—è, –∞ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ

|Visible|: –≤–µ—Å—å —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è     
                   
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. 
  –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–≤–æ–∏—Ö –≥—Ä–∞–Ω–∏—Ü —Å –ø–æ–º–æ—â—å—é |Visible|, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ Modifier.|clipToBounds|
  
  –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤ |Compose 1.8| —É–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤—ã—Ö –æ–ø—Ü–∏–π:
   TextOverflow.|StartEllipsis| 
   TextOverflow.|MiddleEllipsis|, 
   –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ /maxLines = 1/
                
            """.trimIndent(),
            nameFun = "EllipsisText.kt",
            lambdaFun = { EllipsisText() },
            code ="""
            // ...
            
            Text(
                text = text,
                overflow = TextOverflow.Ellipsis,
                maxLines = 1,
            )
            Text(
                text = text,
                overflow = TextOverflow.StartEllipsis,
                maxLines = 1,
            )
            Text(
                text = text,
                overflow = TextOverflow.MiddleEllipsis,
                maxLines = 1,
            )
            
            //...

            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤—ã–ø—É—Å–∫–µ Jetpack Compose –æ—Ç 25 –∞–ø—Ä–µ–ª—è 25 –≥–æ–¥–∞",
                    textUrl = "\uD83D\uDCD6 –ë–ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Android ",
                    url = "https://android-developers.googleblog.com/2025/04/whats-new-in-jetpack-compose-april-25.html"
                ),
            ),

            ),

        ExampleCode(
            title = "–î–µ–∫–æ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |textDecoration| –ø–æ–∑–≤–æ–ª—è—Ç—å –∑–∞–¥–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –î–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ |TextDecoration|, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:

 |LineThrough| - –∑–∞—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç
 |Underline| - –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç
 |None| - –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
 
–î–ª—è –¥–µ–∫–æ—Ä–∞—Ü–∏–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä |Modifier.drawBehind|, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ |DrawScope| –∑–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ.

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –ª–∏–Ω–∏—é,–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ |dashPathEffect|() —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ |PathEffect| –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π, –∞ —Ç–∞–∫–∂–µ —Å–º–µ—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ. 

–ß–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã ¬´–≤–∫–ª—é—á–µ–Ω–∏—è¬ª –∏ ¬´–≤—ã–∫–ª—é—á–µ–Ω–∏—è¬ª –≤ —Å—Ç—Ä–æ–∫–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö. 

–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–º–∏–Ω–∏–º—É–º 2 –∑–Ω–∞—á–µ–Ω–∏—è). 

–ß–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã ¬´–≤–∫–ª—é—á–µ–Ω–∏—è¬ª, –∞ –Ω–µ—á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã ¬´–≤—ã–∫–ª—é—á–µ–Ω–∏—è¬ª. 

                        
                
            """.trimIndent(),
            nameFun = "DecorationExampleText.kt",
            lambdaFun = { DecorationExampleText() },
            code ="""
@Composable
fun DecorationExampleText(){
    Column(
        modifier = Modifier
            .padding(16.dp)
            .verticalScroll(rememberScrollState())
            .fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        var outText = "TextDecoration in jetpack Compose."

        Text(
            text = "1.${'$'}outText(None)",
            textDecoration = TextDecoration.None
        )

        Text(
            text = "2.${'$'}outText(LineThrough)",
            textDecoration = TextDecoration.LineThrough
        )

        Text(
            text = "3.${'$'}outText(Underline)",
            textDecoration = TextDecoration.Underline
        )

//–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∏ –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        Text(
            text = "4.${'$'}outText(Underline + LineThrough)",
            textDecoration = TextDecoration.Underline +
                    TextDecoration.LineThrough,
//  –º–æ–∂–Ω–æ –∏ —Ç–∞–∫:
//            textDecoration = TextDecoration.combine(
//                listOf(
//                    TextDecoration.Underline,
//                    TextDecoration.LineThrough
//                )
//            )
        )


        outText = "Decoration for Text in jetpack Compose."
        val modifierUnderline = Modifier.drawBehind{
            val strokeWidthPx = 1.dp.toPx()
            val verticalOffset = size.height - 3.sp.toPx()
            drawLine(
                color = Color.Red,
                strokeWidth = strokeWidthPx,
                start = Offset(0f, verticalOffset),
                end = Offset(size.width, verticalOffset)
            )
        }
        Text(
            text = "5.${'$'}outText ",
            modifier = modifierUnderline,
        )

        var modifierLineThrough = Modifier.drawBehind{
            val strokeWidthPx = 1.dp.toPx()
            val verticalOffset = size.height/2
            drawLine(
                color = Color.Red,
                strokeWidth = strokeWidthPx,
                start = Offset(0f, verticalOffset),
                end = Offset(size.width - 5.dp.toPx(), verticalOffset)
            )
        }
        Text(
            text = "6.${'$'}outText ",
            modifier = modifierLineThrough,
        )

        modifierLineThrough = Modifier
            .drawBehind{
                val strokeWidthPx = 1.dp.toPx()
                drawLine(
                    color = Color.Yellow,
                    strokeWidth = strokeWidthPx,
                    start = Offset(0f, 0f),
                    end = Offset(size.width, size.height)
                )
            }
            .drawBehind{
                val strokeWidthPx = 1.dp.toPx()
                drawLine(
                    color = Color.Yellow,
                    strokeWidth = strokeWidthPx,
                    start = Offset(0f, size.height),
                    end = Offset(size.width, 0f)
                )
            }
        Text(
            text = "7.${'$'}outText ",
            modifier = modifierLineThrough,
        )

        val modifierDashline = Modifier.drawBehind{
            val strokeWidthPx = 1.dp.toPx()
            val verticalOffset = size.height - 3.sp.toPx()
            drawLine(
                color = Color.Red,
                strokeWidth = strokeWidthPx,
                pathEffect = PathEffect.dashPathEffect(floatArrayOf(10f, 10f)),
                start = Offset(0f, verticalOffset),
                end = Offset(size.width - 5.dp.toPx(), verticalOffset)
            )
        }

        Text(
            text = "8.${'$'}outText ",
            modifier = modifierDashline,
        )

        val modifierIntervalsline = Modifier.drawBehind{
            val strokeWidthPx = 1.dp.toPx()
            val verticalOffset = size.height - 3.sp.toPx()
            drawLine(
                color = Color.Cyan,
                strokeWidth = strokeWidthPx,
                start = Offset(0f, verticalOffset),
                end = Offset(size.width - 5.dp.toPx(), verticalOffset),
                pathEffect = PathEffect.dashPathEffect(
                    intervals = floatArrayOf(
                        10f.dp.toPx(),
                        2f.dp.toPx(),
                        2f.dp.toPx(),
                        2f.dp.toPx()
                    ),
                    phase = 0f
                )

            )
        }

        Text(
            text = "9.${'$'}outText ",
            modifier = modifierIntervalsline,
        )

    }

}
            """.trimIndent()
        ),



        ExampleCode(
            title = "–¢–µ–∫—Å—Ç —Å —Ä–∞–º–∫–æ–π",
            comment = """
–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä |border| - —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–º–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞.                

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–º–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä |Modifier.drawBehind|, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ |DrawScope| –∑–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ.

            """.trimIndent(),
            nameFun = "BorderExampleText.kt",
            lambdaFun = { BorderExampleText() },
            code ="""
@Composable
fun BorderExampleText(
) {
    val outText = "Border for Text in jetpack Compose."

    val corner = 8.dp

    val style = LocalTextStyle.current.merge(
        TextStyle(
            fontSize = 20.sp,
            color = Color.White,
            lineHeight = 30.sp,
            textAlign = TextAlign.Center,
            fontFamily = FontFamily.Serif,
        )
    )

    val modifier = Modifier
        .background(Color(0xFF9C27B0))

    Column(
        modifier = Modifier
            .padding(8.dp)
            .verticalScroll(rememberScrollState())
            .fillMaxWidth()
            .background(Color.DarkGray)
            .padding(8.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)

    ) {
        Text(
            text = "1.${'$'}outText",
            modifier = modifier
                .border(
                    width = 2.dp,
                    color = Color.Cyan,
                )
                .padding(8.dp),
            style = style,
        )

        Text(
            text = "2.${'$'}outText",
            modifier = modifier
                .border(
                    width = 2.dp,
                    color = Color.Cyan,
                    shape = CutCornerShape(corner) //—É–≥–ª—ã —Å—Ä–µ–∑–∞–Ω—ã
                )
                .padding(8.dp),
            style = style,
        )

        Text(
            text = "3.${'$'}outText",
            modifier = Modifier
                .graphicsLayer{
                    shadowElevation = 8.dp.toPx()
                    shape = CutCornerShape(corner) //—É–≥–ª—ã —Å—Ä–µ–∑–∞–Ω—ã
                    clip = true //!!! –æ–±—Ä–µ–∑–∞–Ω–∏–µ –≤—Å–µ–≥–æ, —á—Ç–æ –≤–Ω–µ —Ñ–æ—Ä–º—ã
                }
                .border(
                    width = 2.dp,
                    color = Color.Cyan,
                    shape = CutCornerShape(corner) //—É–≥–ª—ã —Å—Ä–µ–∑–∞–Ω—ã
                )
                .background(Color(0xFF9C27B0))
                .padding(8.dp),
            style = style,
        )
        Text(
            text = "4.${'$'}outText",
            modifier = modifier
                .border(
                    width = 2.dp,
                    color = Color.Cyan,
                    shape = RoundedCornerShape(corner) //—É–≥–ª—ã –∑–∞–∫—Ä—É–≥–ª–µ–Ω—ã
                )
                .padding(8.dp),
            style = style,
        )

        Text(
            text = "5.${'$'}outText",
            modifier = Modifier
                .graphicsLayer{
                    shadowElevation = 8.dp.toPx()
                    shape = RoundedCornerShape(corner)
                    clip = true //!!! –æ–±—Ä–µ–∑–∞–Ω–∏–µ –≤—Å–µ–≥–æ, —á—Ç–æ –≤–Ω–µ —Ñ–æ—Ä–º—ã
                }
                .border(
                    width = 2.dp,
                    color = Color.Cyan,
                    shape = RoundedCornerShape(corner) //—É–≥–ª—ã –∑–∞–∫—Ä—É–≥–ª–µ–Ω—ã
                )
                .background(Color(0xFF9C27B0))
                .padding(8.dp),
            style = style,
        )

        Text(
            text = "6.${'$'}outText",
            modifier = Modifier
                .drawBehind{
                    drawRoundRect(
                        Color(0xFF9C27B0),
                        cornerRadius = CornerRadius(corner.toPx()),
                    )
                }
                .border(
                    width = 2.dp,
                    color = Color.Cyan,
                    shape = RoundedCornerShape(corner) //—É–≥–ª—ã –∑–∞–∫—Ä—É–≥–ª–µ–Ω—ã
                )
                .padding(8.dp),
            style = style,
        )

        Text(
            text = "7.${'$'}outText",
            modifier = Modifier
                .graphicsLayer{
                    shadowElevation = 8.dp.toPx()
                    shape = RoundedCornerShape(corner)
                    clip = true //!!! –æ–±—Ä–µ–∑–∞–Ω–∏–µ –≤—Å–µ–≥–æ, —á—Ç–æ –≤–Ω–µ —Ñ–æ—Ä–º—ã
                }
                .background(Color(0xFF9C27B0))
                .drawBehind{
//—Ä–∏—Å—É–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –∑–∞–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
                    drawRoundRect(
                        color = Color.Cyan,
                        cornerRadius = CornerRadius(corner.toPx()),
                        style = Stroke(
                            width = 4.dp.toPx(),
                            pathEffect = PathEffect.dashPathEffect(floatArrayOf(10f, 10f))
                        )
                    )

                }
                .padding(8.dp),
            style = style,
        )

    }
}
            """.trimIndent()
        ),


        ExampleCode(
            id = 19,
            title = "–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞",
            comment = """
–°–≤–æ–π—Å—Ç–≤–æ |style| –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–µ–Ω—å, –∞–±–∑–∞—Ü —Ç–µ–∫—Å—Ç–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ç. –¥.

–°–≤–æ–π—Å—Ç–≤–æ |style| –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–Ω–æ –∫–ª–∞—Å—Å–æ–º :
|TextStyle|( |!
    color: Color = Color.Unspecified,
    fontSize: TextUnit = TextUnit.Unspecified,
    fontWeight: FontWeight? = null,
    fontStyle: FontStyle? = null,
    fontSynthesis: FontSynthesis? = null,
    fontFamily: FontFamily? = null,
    fontFeatureSettings: String? = null,
    letterSpacing: TextUnit = TextUnit.Unspecified,
    baselineShift: BaselineShift? = null,
    textGeometricTransform: TextGeometricTransform? = null,
    localeList: LocaleList? = null,
    background: Color = Color.Unspecified,
    textDecoration: TextDecoration? = null,
    shadow: Shadow? = null,
    drawStyle: DrawStyle? = null,
    textAlign: TextAlign = TextAlign.Unspecified,
    textDirection: TextDirection = TextDirection.Unspecified,
    lineHeight: TextUnit = TextUnit.Unspecified,
    textIndent: TextIndent? = null,
    platformStyle: PlatformTextStyle? = null,
    lineHeightStyle: LineHeightStyle? = null,
    lineBreak: LineBreak = LineBreak.Unspecified,
    hyphens: Hyphens = Hyphens.Unspecified,
    textMotion: TextMotion? = null|
)

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:
    
    |color|: —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞.
    
    |fontSize|: —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞.
    
    |fontWeight|: —Ç–æ–ª—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç–∞.
    
    |fontStyle|: —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞.
    
    |fontSynthesis|: –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Ç–æ–ª—â–∏–Ω—É –∏/–∏–ª–∏ —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Ç–æ–ª—â–∏–Ω—É –∏–ª–∏ —Å—Ç–∏–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Å–µ–º–µ–π—Å—Ç–≤–µ —à—Ä–∏—Ñ—Ç–æ–≤.
    
    |fontFamily|:—Ç–∏–ø —à—Ä–∏—Ñ—Ç–∞.
    
    |fontFeatureSettings|: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—â–∏–Ω—ã —à—Ä–∏—Ñ—Ç–∞ –∏ –µ–≥–æ –Ω–∞–∫–ª–æ–Ω (—Ç–æ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ fontWeight –∏ fontStyle), –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —à—Ä–∏—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º –∏ (–∏–ª–∏) –Ω–∞–∫–ª–æ–Ω.
    
    |letterSpacing|: –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏.
    
    |baselineShift|: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–¥–≤–∏–≥–∞—Ç—å—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏ (baseline).
    
    |textGeometricTransform|: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –∫ —Ç–µ–∫—Å—Ç—É –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ |TextGeometricTransform?|.
    
    |localeList|:  –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ —Å–∏–º–≤–æ–ª–∞–º–∏.
    
    |background|: —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç.
    
    |textDecoration|: —Ç–∏–ø –¥–µ–∫–æ—Ä–∞—Ü–∏–π.
    
    |shadow|: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–π –∫ —Ç–µ–∫—Å—Ç—É —ç—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω–∏.
    
    |drawStyle|: –°—Ç–∏–ª—å —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ–±–≤–æ–¥–∫–∞ –ø–æ –∫—Ä–∞—è–º.
    
    |textAlign|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.
    
    |textDirection|: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.
    
    |lineHeight|: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞.
    
    |textIndent|: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç—Å—Ç—É–ø –æ—Ç –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–∞.
    
    |platformStyle|: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã TextStyle, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
    
    |lineHeightStyle|: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏, —Ç–∞–∫–∞—è –∫–∞–∫ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏ –∫ –≤–µ—Ä—Ö—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –≤–µ—Ä—Ö—É –∏ –Ω–∏–∑—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω lineHeight. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LineHeightStyle.Default.
    
    |lineBreak|: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞.
    
    |hyphens|: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤.
    
    |textMotion|: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
                
  |!–°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞|:

|letterSpacing|: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏

|lineHeight|: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏

|baselineShift|: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–ø–µ–Ω–∏ —Å–º–µ—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–≤–µ—Ä—Ö –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ç–µ–∫—É—â–µ–π –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–µ–π

|padding|: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏                
                
|textIndent|: –∑–∞–¥–∞–µ—Ç –æ—Ç—Å—Ç—É–ø, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–π –∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º.
 |!TextIndent|(firstLine: TextUnit, restLine: TextUnit)
  |firstLine| - –≤–µ–ª–∏—á–∏–Ω–∞ –æ—Ç—Å—Ç—É–ø–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏;
  |restLine|  - –≤–µ–ª–∏—á–∏–Ω–∞ –æ—Ç—Å—Ç—É–ø–∞, –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π.
                 
            """.trimIndent(),
            nameFun = "StyleDraver.kt",
            lambdaFun = { StyleDraver() },
            code ="""
@Composable
fun TextStyleIndent(
    text: String = "–ê–±–∑–∞—Ü - –º–∞–ª–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —Ñ–æ—Ä–º—ã, –∏–º–µ—é—â–∏–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ, —Å—é–∂–µ—Ç–Ω–æ–µ –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n" +
            "–í—ã–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã –≤ –æ—Å–æ–±—ã–π –∞–±–∑–∞—Ü —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–∞–¥–∞—é—â–∏–π –Ω–∞ –Ω–µ—ë —Å–º—ã—Å–ª–æ–≤–æ–π –∞–∫—Ü–µ–Ω—Ç –∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏ –±—ã—Å—Ç—Ä–æ–º—É –≤–æ—Å–ø—Ä–∏—è—Ç–∏—é —Ç–µ–∫—Å—Ç–∞.",
    modifier: Modifier = Modifier,
    textStyle: TextStyle = TextStyle(
        textAlign = TextAlign.Justify,
        lineHeight = 20.sp,
        baselineShift = BaselineShift(1.5F),
        textIndent = TextIndent(
            firstLine = 24.sp,
            restLine = 5.sp
        )
    )
){
    Text(
        text = text,
        modifier = modifier,
        style = textStyle
        )

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "Jetpack Compose: —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ",
                    textUrl = "\uD83D\uDCD6 alexzh.com",
                    url = "https://alexzh.com/jetpack-compose-styling-text/"
                ),
                TextClickLink(
                    text = "–ê–±–∑–∞—Ü —Ç–µ–∫—Å—Ç–∞ ",
                    textUrl = "\uD83D\uDCD6 Developers. TextIndent",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/TextIndent"
                ),
            ),
        ),


        ExampleCode(
            id =  10,
            title = "–¢–µ–∫—Å—Ç —Å —Ç–µ–Ω—å—é",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |shadow| –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ç–µ–Ω—å –Ω–∞ —Ç–µ–∫—Å—Ç. 
–≠—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω–∏ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö:
 
  |!color|: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–Ω–∏.

  |!offset|: —Å–º–µ—â–µ–Ω–∏–µ —Ç–µ–Ω–∏ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ Offset.

  |!blurRadius|: –∑–∞–¥–∞–µ—Ç —Ä–∞–¥–∏—É—Å —Ä–∞–∑–º—ã—Ç–∏—è.

                
            """.trimIndent(),
            nameFun = "ShadowDriver.kt",
            lambdaFun = { ShadowDriver() },
            code ="""
@Composable
fun ShadowDriver(){
    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val offsetX = remember {
        mutableFloatStateOf(2f)
    }
    val offsetY = remember {
        mutableFloatStateOf(6f)
    }

    val blur = remember {
        mutableFloatStateOf(2f)
    }

    val fontSize = remember {
        mutableFloatStateOf(45f)
    }

    var indexColor by remember { mutableIntStateOf(-1) }

    var colorTxt by remember {
        mutableStateOf(Color(0xfffcce36))
    }
    var colorSh by remember {
        mutableStateOf(Color(0xffff0000))
    }
    var colorBg by remember {
        mutableStateOf(Color(0xff0000ff))
    }

    Column(
        modifier = Modifier
            .fillMaxWidth()
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .border(1.dp, Color.White)
                .background(colorBg)
                .heightIn(min = 150.dp)
                .padding(padding),
            contentAlignment = Alignment.Center
        ) {

            MessageShadow(
                message = stringResource(R.string.hello_world),
                style = TextStyle(
                    textAlign = TextAlign.Center,
                    fontFamily = Alice,
                    fontSize = fontSize.floatValue.sp,
                    lineHeight = (fontSize.floatValue + 10).sp,
                    color = colorTxt,
                    shadow = Shadow(
                        color = colorSh,
                        offset = Offset(offsetX.floatValue, offsetY.floatValue), //—Å–º–µ—â–µ–Ω–∏–µ —Ç–µ–Ω–∏
                        blurRadius = blur.floatValue  //—Ä–∞–∑–º—ã—Ç–∏–µ
                    )
                ),
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth(),
            )

        }
        LazyColumn(
            modifier = Modifier
                .fillMaxWidth()
                .padding(padding),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            item {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(padding)
                ) {
                    if (indexColor == -1){

                        SliderSimple("size",fontSize,12f,80f)

                        SliderSimple("offsetX",offsetX,-20f,20f)

                        SliderSimple("offsetY",offsetY,-20f,20f)

                        SliderSimple("blur...",blur,0f,20f)

                        Row(
                            modifier = Modifier
                                .padding(padding)
                                .widthIn(max = 250.dp),
                            horizontalArrangement = Arrangement.SpaceAround,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Box(
                                modifier = Modifier
                                    .padding(padding)
                                    .background(colorTxt)
                                    .size(40.dp)
                                    .clickable {
                                        indexColor = 0
                                    }
                            )
                            Box(
                                modifier = Modifier
                                    .padding(padding)
                                    .background(colorSh)
                                    .size(40.dp)
                                    .clickable {
                                        indexColor = 1
                                    }
                            )
                            Box(
                                modifier = Modifier
                                    .padding(padding)
                                    .background(colorBg)
                                    .size(40.dp)
                                    .clickable {
                                        indexColor = 2
                                    }
                            )
                        }

                    } else{
                        ColorSelect(
                            colorCurrent = when(indexColor){
                                0 -> colorTxt
                                1 -> colorSh
                                else -> colorBg
                            },
                            onColorSelect ={
                                when(indexColor){
                                    0 -> colorTxt = it
                                    1 -> colorSh = it
                                    else -> colorBg = it
                                }
                                indexColor = -1
                            },
                            title = when(indexColor){
                                0 -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                                1 -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–Ω–∏"
                                else -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞"
                            },

                        )

                    }
                }
            }
        }
    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. Shadow",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/Shadow"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –º–∏—Ä —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ—Ä–æ–≤ –Ω–∞ ",
                    textUrl = "\uD83D\uDCD6 Pixabay ",
                    url = "https://pixabay.com/ru/photos/%D0%BC%D0%BE%D0%BB%D0%BD%D0%B8%D1%8F-%D0%B1%D1%83%D1%80%D1%8F-%D0%BD%D0%B5%D0%B1%D0%BE-%D0%BE%D0%B1%D0%BB%D0%B0%D0%BA%D0%BE-%D0%B3%D0%BE%D1%80%D0%B0-7401119/"
                ),
            ),

        ),

        ExampleCode(
            title = "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |textDirection| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.

–í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
 
 |Content|: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º Unicode Bidirectional Algorithm
 
 |ContentOrLtr|: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º Unicode Bidirectional Algorithm, –ª–∏–±–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
 
 |ContentOrRtl|: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º Unicode Bidirectional Algorithm, –ª–∏–±–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
 
 |Ltr|: —Ç–µ–∫—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
 
 |Rtl|: —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Å–ø—Ä–∞–≤–æ –Ω–∞–ª–µ–≤–æ
 
 |Unspecified|: –≠—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –Ω–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–±—ã—á–Ω—É—é –∑–∞–º–µ–Ω—É ¬´null¬ª, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
                     
                
            """.trimIndent(),
            nameFun = "DirectionExampleText.kt",
            lambdaFun = { DirectionExampleText() },
            code ="""
@Composable
fun DirectionExampleText(){
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
    ) {
        val text = "TextDirection in jetpack Compose"
        val modifier = Modifier.fillMaxWidth()
        val style = TextStyle(
            fontSize = 25.sp,
            fontFamily = FontFamily.Serif,
        )

        item {
            Column(
                modifier = Modifier.fillMaxWidth(),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                Text(
                    text = text+" (Unspecified)",
                    modifier = modifier,.Unspecified
                    style = style.merge(
                        textDirection = TextDirection
                    )
                )
                Text(
                    text = text+" (Content)",
                    modifier = modifier,
                    style = style.merge(
                        textDirection = TextDirection.Content
                    )
                )
                Text(
                    text = text+" (ContentOrLtr)",
                    modifier = modifier,
                    style = style.merge(
                        textDirection = TextDirection.ContentOrLtr
                    )
                )
                Text(
                    text = text+" (ContentOrRtl)",
                    modifier = modifier,
                    style = style.merge(
                        textDirection = TextDirection.ContentOrRtl
                    )
                )
                Text(
                    text = text+" (Rtl)",
                    modifier = modifier,
                    style = style.merge(
                        textDirection = TextDirection.Rtl
                    )
                )
                Text(
                    text = text+" (Ltr)",
                    modifier = modifier,
                    style = style.merge(
                        textDirection = TextDirection.Ltr
                    )
                )

            }
        }
    }

}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. ",
                    textUrl = "\uD83D\uDCD6 Developers. TextDirection",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/TextDirection"
                ),
            ),
        ),

        ExampleCode(
            title = "–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏",
            comment = """
|LineBreak| –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

 |Simple| - –±–∞–∑–æ–≤—ã–π, –±—ã—Å—Ç—Ä—ã–π –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–æ–∫–∏.
 
 |Heading| - –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ —É–∑–∫–∏–µ –≥–∞–∑–µ—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏.
  
 |Paragraph| -  –±–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.

–ï—Å–ª–∏ –º—è–≥–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –≤–∫–ª—é—á–µ–Ω –∏ —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —à–∏—Ä–∏–Ω—É –µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –≤ —Ç–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫.

–°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä—è–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–æ, –∫–∞–∫ –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫. 

–ù–∞–ø—Ä–∏–º–µ—Ä, –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–æ–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é –∑–∞ —Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏. 

–î—Ä—É–≥–∏–º –ø—Ä–∏–º–µ—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —è–∑—ã–∫–∞—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –º–æ–≥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏.
     
 LineBreak.|Strategy| - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–æ–∫–∏.

 LineBreak.|Strictness| - –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏, –æ–ø—Ä–µ–¥–µ–ª—è—è, –ø–µ—Ä–µ–¥ –∫–∞–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫.

 LineBreak.|WordBreak| - –æ–ø–∏—Å—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã –≤—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –≤ —Å–ª–æ–≤–∞.     
            
            """.trimIndent(),
            nameFun = "LineBreakText.kt",
            lambdaFun = { LineBreakText() },
            code ="""
@Composable
fun LineBreakText(){

    val strategy: List<String> = remember {
        listOf(
            "Simple ",
            "Balanced",
            "HighQuality ",
        )
    }

    var idStrategy by remember { mutableIntStateOf(1) }

    Column(
        modifier = Modifier
            .background(MaterialTheme.colorScheme.tertiaryContainer)
            .padding(16.dp)
            .fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "Text wrapping",
            style = TextStyle(
                fontSize = 24.sp,
                lineBreak = LineBreak(
                    strategy = LineBreak.Strategy.Simple,
                    strictness = LineBreak.Strictness.Strict,
                    wordBreak = LineBreak.WordBreak.Default
                )
            )
        )

        Text(
            text = "John really likes cream cake. I like chocolate ice cream the most. Maria likes milkshake with cake.",
            style = TextStyle(
                fontSize = 20.sp,
                lineBreak = LineBreak.Paragraph.copy(
                    strategy = when (idStrategy) {
                        0 -> LineBreak.Strategy.Simple
                        1 -> LineBreak.Strategy.Balanced
                        else -> LineBreak.Strategy.HighQuality
                    },
                    strictness = LineBreak.Strictness.Default,
                    wordBreak = LineBreak.WordBreak.Default
                )
            )
        )


        Column(
            modifier = Modifier
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
                .fillMaxWidth(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            RadioButtonRow(idStrategy,strategy,{idStrategy = it})

        }


    }


}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. LineBreak",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/LineBreak"
                ),
            ),
        ),

        ExampleCode(
            title = "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |TextGeometricTransform| –∑–∞–¥–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –æ–±—ä–µ–∫—Ç–∞ 
|TextGeometricTransform|(
    |!scaleX|: Float = 1.0f, 
    |!skewX|: Float = 0.0f
), –≥–¥–µ                        

 |scaleX| —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 1.0f, —Ç–æ —Ç–µ–∫—Å—Ç —Å–∂–∏–º–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –±–æ–ª—å—à–µ - —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.

 |skewX| —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–¥–≤–∏–≥ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ—á–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (x, y), –±—É–¥–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–æ—á–∫—É (x + y * skewX, y). –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 0.0f.                        
                
            """.trimIndent(),
            nameFun = "GeometricTransform.kt",
            lambdaFun = { GeometricTransform() },
            code ="""
@Composable
fun GeometricTransform(){
    Text(
        text = "Text in jetpack Compose",
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        style = TextStyle(
            fontSize = 30.sp,
            textAlign = TextAlign.Center,
            fontFamily = FontFamily.Cursive,
            textGeometricTransform = TextGeometricTransform(
                scaleX = 2f,
                skewX = 1.2f
            )
        )
    )

}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. ",
                    textUrl = "\uD83D\uDCD6 Developers. TextGeometricTransform",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/TextGeometricTransform"
                ),
            ),
        ),


        ExampleCode(
            title = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–∏\n–í—Ä–∞—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
            comment = """
Modifier.|graphicsLayer| ‚Äî –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ä–∏—Å—É–Ω–∫–∞ –≤ —Å–ª–æ–π —Ä–∏—Å–æ–≤–∞–Ω–∏—è. 

–°–ª–æ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫:

 1.|–ò–∑–æ–ª—è—Ü–∏—è| –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Ä–∏—Å–æ–≤–∞–Ω–∏—è. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–∫ —á–∞—Å—Ç—å —Å–ª–æ—è, –º–æ–≥—É—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ã–¥–∞–≤–∞—Ç—å—Å—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     
 2.|–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è|, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º—Å—è –≤ —Å–ª–æ–µ.
 
 3.|–†–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è| –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏. –ö–æ–≥–¥–∞ —Å–ª–æ–π —Ä–∞—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è, –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—é, –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤–æ –≤–Ω–µ—ç–∫—Ä–∞–Ω–Ω–æ–º –±—É—Ñ–µ—Ä–µ. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–¥—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –Ω–æ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ç–∞–∫–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π, –∫–∞–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—Ä–∞—â–µ–Ω–∏–µ, –æ–Ω –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ —Ä–∞—Å—Ç—Ä–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.                
 
 –î–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:               
 |rotationX| –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, 
 |rotationY| –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏,
 |rotationZ| –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –ø–æ –æ—Å–∏ Z.
  
 –ó–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –≥—Ä–∞–¥—É—Å–∞—Ö (0‚Äì360).   
                      
|transformOrigin| —É–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–∫—É, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. 

–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ—á–∫–∞ –æ—Ç—Å—á–µ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (0,5f, 0,5f). 

–ï—Å–ª–∏ –Ω–∞—á–∞–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ —Ç–æ—á–∫—É (0f, 0f), –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞—á–Ω—É—Ç—Å—è —Å –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.

                      
                 
            """.trimIndent(),
            nameFun = "GraphicsLayerTextDriver.kt",
            lambdaFun = { GraphicsLayerTextDriver() },
            code ="""
@Composable
fun GraphicsLayerTextDriver(){
    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val layerRotationX = remember {
        mutableFloatStateOf(15f)
    }
    val layerRotationY = remember {
        mutableFloatStateOf(52f)
    }
    val layerRotationZ = remember {
        mutableFloatStateOf(0f)
    }
    val layerOriginX = remember {
        mutableFloatStateOf(0.5f)
    }
    val layerOriginY = remember {
        mutableFloatStateOf(0.5f)
    }

    val layerTranslationX = remember {
        mutableFloatStateOf(40f)
    }

    val layerTranslationY = remember {
        mutableFloatStateOf(20f)
    }



    Column(
        modifier = Modifier
            .fillMaxWidth()
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .border(1.dp, Color.White)
                .background(Color(0xff0000ff))
                .heightIn(min = 150.dp)
                .padding(padding),
            contentAlignment = Alignment.Center
        ) {

            MessageShadow(
                message = stringResource(R.string.hello_world),
                style = TextStyle(
                    textAlign = TextAlign.Center,
                    fontFamily = Alice,
                    fontSize = 45.sp,
                    lineHeight = 55.sp,
                    color = Color(0xfffcce36),
                    shadow = Shadow(
                        color = Color(0xffff0000),
                        offset = Offset(2f, 6f), //—Å–º–µ—â–µ–Ω–∏–µ —Ç–µ–Ω–∏
                        blurRadius = 2f  //—Ä–∞–∑–º—ã—Ç–∏–µ
                    )
                ),
                modifier = Modifier
                    .padding(16.dp)
                    .graphicsLayer{
                        this.transformOrigin = TransformOrigin(
                            layerOriginX.floatValue,
                            layerOriginY.floatValue
                        )
                        this.rotationX = layerRotationX.floatValue
                        this.rotationY = layerRotationY.floatValue
                        this.rotationZ = layerRotationZ.floatValue

                        this.translationX = layerTranslationX.value.dp.toPx()
                        this.translationY = layerTranslationY.value.dp.toPx()

                    }
                    .fillMaxWidth(),
            )

        }
        Column(
            modifier = Modifier
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
                .fillMaxWidth(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(padding)
        ) {
            SliderSimple("rotat.X ", layerRotationX, 0f, 360f)
            SliderSimple("rotat.Y ", layerRotationY, 0f, 360f)
            SliderSimple("rotat.Z ", layerRotationZ, 0f, 360f)
            SliderSimple("OriginX ", layerOriginX, 0f, 1f)
            SliderSimple("OriginY ", layerOriginY, 0f, 1f)
            SliderSimple("trans.X ", layerTranslationX, 0f, 100f)
            SliderSimple("trans.Y ", layerTranslationY, 0f, 100f)
        }
    }


}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. TextIndent",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/TextIndent"
                ),
            ),
        ),

        ExampleCode(
            id = 3,
            title = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–∏\n–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è",
            comment = """
 Modifier.|graphicsLayer|  –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫ —Å–æ—Å—Ç–∞–≤–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º.
–î–ª—è –º–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:               
  |ScaleX| –∏ |ScaleY| —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∏–ª–∏ —Å–∂–∏–º–∞—é—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. 
  
  –ó–Ω–∞—á–µ–Ω–∏–µ 1,0f —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–∞—Å—à—Ç–∞–±–µ, –∑–Ω–∞—á–µ–Ω–∏–µ 0,5f –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–æ–≤–∏–Ω—É —Ä–∞–∑–º–µ—Ä–∞.
                        
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∏",
                    textUrl = "\uD83D\uDCD6 ",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/modifiers?hl=ru"
                ),
            ),

            nameFun = "ScaleDraver.kt",
            lambdaFun = { ScaleDraver() },
            code = """
@Composable
fun ScaleText(
    scaleX: Float = 1f,
    scaleY: Float = 1f,
){
    val text = stringResource(
        id = R.string.hello_world
    )

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )
    Box(
        modifier = Modifier
            .padding(padding)
            .fillMaxWidth()
            .border(1.dp, MaterialTheme.colorScheme.onBackground)
            .widthIn(min = 150.dp)
            .padding(padding),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = text + "\n (${'$'}{scaleX},${'$'}{scaleY})",
            modifier = Modifier
                .padding(padding)
                .graphicsLayer{
                    this.scaleX = scaleX
                    this.scaleY = scaleY
                },
            textAlign = TextAlign.Center,
            fontSize = 22.sp,
        )

    }

}
                
                
@Composable
fun ScaleDraver(){
    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val scaleX = remember {
        mutableFloatStateOf(0.5f)
    }
    val scaleY = remember {
        mutableFloatStateOf(0.5f)
    }
    Column(
        modifier = Modifier
            .fillMaxWidth(),
    ) {
        ScaleText(scaleX.floatValue,scaleY.floatValue)
        LazyColumn(
            modifier = Modifier
                .fillMaxWidth()
                .padding(padding),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            item {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(padding)
                ) {
                    SliderSimple("scaleX", scaleX, 0.1f, 3f)

                    SliderSimple("scaleY", scaleY, 0.1f, 3f)

                }

            }

        }
    }
}
                
            """.trimIndent()
        ),



        ExampleCode(
            id = 13,
            title = "–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.  \n" +
                    "withStyle",
            comment = """
–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ |AnnotatedString| —Å—Ç—Ä–æ–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é.

             
|AnnotatedString|(
    |!text|: String,
    |!annotations|: List<AnnotatedString.Range<AnnotatedString.Annotation>>
) - –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç–∏–ª—è–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏.
                

|AnnotatedString|(
    |!text|: String,
    |!spanStyles|: List<AnnotatedString.Range<SpanStyle>>,
    |!paragraphStyles|: List<AnnotatedString.Range<ParagraphStyle>>
) - –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç–∏–ª—è–º–∏.

 |text|: —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.
    
 |spanStyles|: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ú—ã –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã —à—Ä–∏—Ñ—Ç–∞, —Ü–≤–µ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è –∏ —Ç. –¥. 
   
 |paragraphStyles|: –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Å—Ç–∏–ª–∏ –∞–±–∑–∞—Ü–µ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞. –ö–∞–∂–¥—ã–π ParagraphStyle —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–±–∑–∞—Ü —Ç–µ–∫—Å—Ç–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∞–±–∑–∞—Ü–µ–≤ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–ª–∏—Å—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º. –ï—Å–ª–∏ –º–µ–∂–¥—É —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –∞–±–∑–∞—Ü–µ–≤ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, –º–µ–∂–¥—É –Ω–∏–º–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–±–∑–∞—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                
|!@Immutable
class SpanStyle(
    val color: Color = Color.Unspecified,
    val fontSize: TextUnit = TextUnit.Unspecified,
    val fontWeight: FontWeight? = null,
    val fontStyle: FontStyle? = null,
    val fontSynthesis: FontSynthesis? = null,
    val fontFamily: FontFamily? = null,
    val fontFeatureSettings: String? = null,
    val letterSpacing: TextUnit = TextUnit.Unspecified,
    val baselineShift: BaselineShift? = null,
    val textGeometricTransform: TextGeometricTransform? = null,
    val localeList: LocaleList? = null,
    val background: Color = Color.Unspecified,
    val textDecoration: TextDecoration? = null,
    val shadow: Shadow? = null
)|                
                
                
–ö–ª–∞—Å—Å |Builder| –¥–ª—è |AnnotatedString| –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å |AnnotatedString| —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∞–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤, –∫–∞–∫ |append| –∏ |addStyle|.                        
                
            """.trimIndent(),
            nameFun = "AnnotatedStylesInText.kt",
            lambdaFun = {
                BoxCenterLambdaFun(
                    lambdaFun = { AnnotatedStylesInText(fontSize = 40) },
                    modifier = Modifier
                        .fillMaxSize()
                )
            },
            code ="""
@Composable
fun AnnotatedStylesInText(
    fontSize:Int = 32,
    style:SpanStyle = SpanStyle(
        fontSize = fontSize.sp,
        fontFamily = Alice,
        fontStyle = FontStyle.Italic,
    ),
    modifier: Modifier = Modifier.padding(16.dp)
) {

    Text(
        text = buildAnnotatedString {
            withStyle(
                style = style.merge(
                    SpanStyle(
                        color = Color.Cyan,
                    )
                )
            ) {
                append("T")
            }

            withStyle(
                style = style
            ){
                append("ext in jetpack ")
            }

            withStyle(
                style = style.merge(
                    SpanStyle(
                        color = Color.Red,
                    )
                )
            ) {
                append("C")
            }
            withStyle(
                style = style
            ){
                append("ompose")
            }


        },
        modifier = modifier,
        lineHeight = (fontSize+10).sp,
        textAlign = TextAlign.Center
    )
}

@Composable
fun BoxCenterLambdaFun(
    text: String = "Text in jetpack Compose",
    lambdaFun: @Composable (String) -> Unit = @Composable{},
    modifier: Modifier = Modifier
){
    Box(
        modifier = modifier,
        contentAlignment = Alignment.Center
    ) {
        lambdaFun(text)
    }

}

                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. AnnotatedString",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString"
                ),
                TextClickLink(
                    text = "–ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∏–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. Figma. AnnotatedString",
                    url = "https://developer.android.com/develop/ui/compose/tooling/relay/multiple-styles-in-text?hl=ru"
                ),
            ),

        ),
        ExampleCode(
            id = 14,
            title = "–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.  \n" +
                    "ParagraphStyle",
            comment = """
|ParagraphStyle| - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∏–ª—è –¥–ª—è –∞–±–∑–∞—Ü–∞. –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É |SpanStyle| –∏ |ParagraphStyle| –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ |ParagraphStyle| –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ –≤—Å–µ–º—É –∞–±–∑–∞—Ü—É, –∞ |SpanStyle| –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏–º–≤–æ–ª–∞. 

–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ |ParagraphStyle|, —ç—Ç–∞ —á–∞—Å—Ç—å –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª–µ–Ω–∞ –æ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏.
                
            """.trimIndent(),
            nameFun = "AnnotatedParagraph.kt",
            lambdaFun = {
                BoxCenterLambdaFun(
                    lambdaFun = { AnnotatedParagraph() },
                    modifier = Modifier
                        .fillMaxSize()
                )
            },

            code ="""
@Composable
fun AnnotatedParagraph(
    fontSize:Int = 40,
) {
    val annotatedString = buildAnnotatedString {

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            withStyle(
                style = SpanStyle(
                    color = Color.Red,
                    fontWeight = FontWeight.Bold,
                    fontSize = fontSize.sp
                )
            ) {
                append("Text ")
            }
        }

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            append("in jetpack ")
        }

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            withStyle(
                style = SpanStyle(
                    color = Color.Green,
                    fontFamily = FontFamily.Cursive,
                    fontSize = (fontSize+5).sp
                )
            ) {
                append("Compose")
            }
        }
    }

    Text(
        annotatedString,
        modifier = Modifier
            .padding(16.dp)
    )

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. AnnotatedString",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString"
                ),
                TextClickLink(
                    text = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∏–ª—è –∞–±–∑–∞—Ü–∞  ",
                    textUrl = "\uD83D\uDCD6 Developers. ParagraphStyle",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/ParagraphStyle"
                ),
            ),

        ),

        ExampleCode(
            id = 15,
            title = "–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.  \n" +
                    "LinkAnnotation.Url",
            comment = """
            –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è |LinkAnnotation.Url|() —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É |URL|. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ç–µ–∫—Å—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ —ç—Ç–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å |URL| —Å –ø–æ–º–æ—â—å—é |androidx.compose.ui.platform.UriHandler|. 

            |!withLink(
                LinkAnnotation.Url(
                    url = "https://developer.android.com/jetpack/compose",
                    styles = TextLinkStyles(
                        style = SpanStyle(
                            color = Color.Blue,
                            letterSpacing = 1.5.sp,
                            textDecoration = TextDecoration.Underline,
                        )
                    )
                ){
                    val url = (it as LinkAnnotation.Url).url
                    uriHandler.openUri(url)
                }
            ) {
                append("–î–µ—Ç–∞–ª—å–Ω–µ–µ –∑–¥–µ—Å—å...")
            }|
                 
            –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.                 
                 
            –í –ø—Ä–∏–º–µ—Ä–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ |pushStyle|, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–º–µ–Ω—è–µ—Ç |SpanStyle| –∏–ª–∏ |ParagraphStyle| –∫–æ –≤—Å–µ–º—É –¥–æ–±–∞–≤–ª—è–µ–º–æ–º—É —Ç–µ–∫—Å—Ç—É –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ |pop|.
                
            """.trimIndent(),
            nameFun = "AnnotatedPushStyleAndUrl.kt",
            lambdaFun = {
                BoxCenterLambdaFun(
                    lambdaFun = { AnnotatedPushStyleAndUrl() },
                    modifier = Modifier
                        .fillMaxSize()
                )
            },
            code ="""
@Composable
fun AnnotatedPushStyleAndUrl(){

    val uriHandler = LocalUriHandler.current

    val annotatedLinkString = buildAnnotatedString {

        withStyle(
            style = SpanStyle(
                fontSize = 18.sp,
                color = Color.Black,
                fontWeight = FontWeight.Normal,
            )
        ) {
            pushStyle(
                SpanStyle(
                    color = Color.Red,
                    fontWeight = FontWeight.Bold,
                )
            )
            // append new text red style
            append("Text ")
            // pop the red style
            pop()

            // append new text
            append("in jetpack ")

        }

        withStyle(
            style = SpanStyle(
                color = Color.Magenta,
                fontFamily = FontFamily.Cursive,
                fontSize = 30.sp
            )
        ) {
            append("Compose")
        }

        //–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {

            withLink(
                LinkAnnotation.Url(
                    url = "https://developer.android.com/jetpack/compose",
                    styles = TextLinkStyles(
                        style = SpanStyle(
                            color = Color.Blue,
                            letterSpacing = 1.5.sp,
                            textDecoration = TextDecoration.Underline,
                        )
                    )
                ){
                    val url = (it as LinkAnnotation.Url).url
                    uriHandler.openUri(url)
                }
            ) {
                append("–î–µ—Ç–∞–ª—å–Ω–µ–µ –∑–¥–µ—Å—å...")
            }

        }

    }

    Text(
        text = annotatedLinkString,
        lineHeight = 48.sp,
        modifier = Modifier
            .background(Color.White)
            .padding(16.dp)
    )

}

            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. AnnotatedString",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString"
                ),
                TextClickLink(
                    text = "LinkAnnotation.Url  ",
                    textUrl = "\uD83D\uDCD6 Developers. ",
                    url = "https://developer.android.com.acc.wang/reference/kotlin/androidx/compose/ui/text/LinkAnnotation.Url"
                ),
            ),

        ),
        ExampleCode(
            id = 16,
            title = "–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.  \n" +
                    "addStyle",
            comment = """
–ú–µ—Ç–æ–¥ |addStyle| –≤–º–µ—Å—Ç–µ —Å |append| —Ç–∞–∫–∂–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å |AnnotatedString|.                        

buildAnnotatedString {
    append("Hello")
    // push green text style 
    pushStyle(SpanStyle(color = Color.Green))
    // append new text, this text will be rendered as green
    append(" World")
    // pop the green style
    pop()
    // append a string without style
    append("!")
    // then style the last added word as red, exclamation mark will be red
    addStyle(
       SpanStyle(color = Color.Red), 
       start = "Hello World".length, 
       end = this.length
    )

    toAnnotatedString()
}

            """.trimIndent(),
            nameFun = "AnnotatedWithAddStyle.kt",
            lambdaFun = {
                BoxCenterLambdaFun(
                    lambdaFun = {
                        BoxCenterLambdaFun(
                            lambdaFun = { AnnotatedWithAddStyle() },
                            modifier = Modifier
                                .fillMaxSize()
                        )

                    },
                    modifier = Modifier
                        .fillMaxSize()
                )
            },
            code ="""
@Composable
fun AnnotatedWithAddStyle() {

    val annotatedString = buildAnnotatedString {

        append("Text in jetpack Compose")

        addStyle(
            style = SpanStyle(
                color = Color.Red,
                fontFamily = FontFamily.Cursive,
                fontSize = 24.sp
            ),
            start = 0,
            end = 1
        )

        addStyle(
            style = SpanStyle(
                color = Color.Blue
            ),
            start = 1,
            end = 4
        )

        addStyle(
            style = SpanStyle(
                color = Color.Black
            ),
            start = 5,
            end = 15
        )

        addStyle(
            style = SpanStyle(
                color = Color.Magenta,
                fontFamily = FontFamily.Cursive,
                fontSize = 25.sp
            ),
            start = 16,
            end = 23
        )
    }

    Text(
        annotatedString,
        modifier = Modifier
            .background(Color.White)
            .padding(16.dp)
    )

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. AnnotatedString",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString"
                ),
                TextClickLink(
                    text = "AnnotatedString.Builder ",
                    textUrl = "\uD83D\uDCD6 Developers. ",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString.Builder"
                ),
            ),

        ),

        ExampleCode(
            id = 17,
            title = "–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.  \n" +
                    "BaselineShift",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |baselineShift| SpanStyle –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ–ª–∏—á–∏–Ω–Ω—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç–µ–∫—Å—Ç —Å–º–µ—â–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π |–±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏|.                
            """.trimIndent(),
            nameFun = "AnnotatedBaseLineShift.kt",
            lambdaFun = {
                BoxCenterLambdaFun(
                    lambdaFun = { AnnotatedBaseLineShift() },
                    modifier = Modifier
                        .fillMaxSize()
                )
            },

            code ="""
@Composable
fun AnnotatedBaseLineShift() {
    val colorHour = MaterialTheme.colorScheme.primary
    val colorMin = MaterialTheme.colorScheme.outline
    val annotatedString = buildAnnotatedString {

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            withStyle(
                style = SpanStyle(
                    color = colorHour,
                    fontWeight = FontWeight.Bold,
                    fontSize = 60.sp,
                )
            ) {
                append("18")
            }
            withStyle(
                style = SpanStyle(
                    baselineShift = BaselineShift(+0.70f)
                )
            ) {
                append(" —á–∞—Å–æ–≤ ")
            }
        }

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            withStyle(
                style = SpanStyle(
                    color = colorMin,
                    fontWeight = FontWeight.Bold,
                    fontSize = 50.sp,
                )
            ) {
                append("30")
            }
            withStyle(
                style = SpanStyle(
                    baselineShift = BaselineShift(+0.70f)
                )
            ) {
                append(" –º–∏–Ω—É—Ç ")
            }
        }

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center,

            )
        ) {
            withStyle(
                style = SpanStyle(
                    background = Color.Black,
                    color = Color.Cyan,
                    fontWeight = FontWeight.Bold,
                    fontSize = 20.sp,
                )
            ) {
                append("${'$'}")
                pushStyle(SpanStyle(fontSize = 28.sp))
                append("0.99")
                pop()

            }
        }
        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center,

                )
        ) {
            withStyle(
                style = SpanStyle(
                    color = Color.Red,
                    fontFamily = FontFamily.Cursive,
                    fontSize = 26.sp,
                )
            ) {
                append("Price")
            }


            withStyle(SpanStyle(baselineShift = BaselineShift.Superscript, fontSize = 10.sp)) {
                append("2")
                withStyle(SpanStyle(baselineShift = BaselineShift.Subscript)) {
                    append("4")
                }
            }
        }

    }

    Text(
        text = annotatedString,
        modifier = Modifier
            .padding(16.dp)
    )

}

            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. AnnotatedString",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString"
                ),
                TextClickLink(
                    text = "AnnotatedString.Builder ",
                    textUrl = "\uD83D\uDCD6 Developers. ",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString.Builder"
                ),
                TextClickLink(
                    text = "–°–º–µ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏ ",
                    textUrl = "\uD83D\uDCD6 Developers. BaselineShift ",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/BaselineShift"
                ),
            ),

        ),
        ExampleCode(
            id = 18,
            title = "–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.  \n" +
                    "HTML-—Ä–∞–∑–º–µ—Ç–∫–∞",
            comment = """
–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é |HTML|-—Ä–∞–∑–º–µ—Ç–∫–∏. AnnotatedString.|fromHtml|() –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É htmlText –≤ AnnotatedString
 
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã HTML:
    –ñ–∏—Ä–Ω—ã–π: <|b|>
    –ö—É—Ä—Å–∏–≤: <|i|>, <|cite|>, <|dfn|>, <|em|>
    –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ 25 %: <|big|>
    –¢–µ–∫—Å—Ç –Ω–∞ 20% –º–µ–Ω—å—à–µ: <|small|>
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤ —à—Ä–∏—Ñ—Ç–∞: <|font face="font_family" color="hex_color"|>. –ü—Ä–∏–º–µ—Ä—ã –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–º–µ–π—Å—Ç–≤ —à—Ä–∏—Ñ—Ç–æ–≤ –≤–∫–ª—é—á–∞—é—Ç monospace , serif –∏ sans_serif .
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ–º–µ–π—Å—Ç–≤–∞ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: <|tt|>
    –ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ: <|s|>, <|strike|>, <|del|>
    –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å: <|u|>
    –ù–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å: <|sup|>
    –ò–Ω–¥–µ–∫—Å: <|sub|>
    –¢–æ—á–∫–∏ —Å–ø–∏—Å–∫–∞: <|ul|>, <|li|>
    –†–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫: <|br|>
    –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: <|div|>
    –°—Ç–∏–ª—å CSS: <|span style="color|background_color|text-decoration"|>
    –ü–∞—Ä–∞–≥—Ä–∞—Ñ—ã: <|p dir="rtl | ltr¬ª style="‚Ä¶"|>               

–ü—Ä–∏–º–µ—Ä:
<h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥—Ä—É–≥!</h2>

<p>
 –°–æ–∑–¥–∞–≤–∞–π—Ç–µ  <big><b>–æ—Ç–ª–∏—á–Ω—ã–µ</b></big> –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è <br>  
 <small>—Å –ø–æ–º–æ—â—å—é</small> <br> 
 <a href="https://developer.android.com/compose">Jetpack Compose</a>
</p>

            """.trimIndent(),
            nameFun = "AnnotatedHtmlString.kt",
            lambdaFun = {
                BoxCenterLambdaFun(
                    lambdaFun = { AnnotatedHtmlString() },
                    modifier = Modifier
                        .fillMaxSize()
                )
            },

            code ="""
@Composable
fun AnnotatedHtmlString(
    modifier: Modifier = Modifier,
    htmlText: String = ""${'"'}
<h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥—Ä—É–≥!</h2>

<p>
 –°–æ–∑–¥–∞–≤–∞–π—Ç–µ  <big><b>–æ—Ç–ª–∏—á–Ω—ã–µ</b></big> –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è <br>  
 <small>—Å –ø–æ–º–æ—â—å—é</small> <br> 
 <a href="https://developer.android.com/compose">Jetpack Compose</a>
</p>

<p >
 –ü–æ–¥–Ω–∏–º–∏—Ç–µ —Å–≤–æ—é –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å <br> 
 <big><font face="monospace" color="#3CEE0A"> –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å</font></big> <br> 
 <small>—Å –ø–æ–º–æ—â—å—é</small> <br> 
 –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ <br> 
  <a href="https://www.android.com/ai/#gemini"> 
    <font face="cursive">Google</font>
  </a>
</p>
           ""${'"'}.trimIndent(),
) {

    val textFromHtml = AnnotatedString.fromHtml(
        htmlString = htmlText,
        linkStyles = TextLinkStyles(
            style = SpanStyle(
                textDecoration = TextDecoration.Underline,
                fontStyle = FontStyle.Italic,
                fontSize = 30.sp,
                color = Color.Cyan,
                letterSpacing = 2.sp,
            )
        )
    )
    LazyColumn {
        item {
            Text(
                text = textFromHtml,
                color = Color.Yellow,
                textAlign = TextAlign.Center,
                lineHeight = 48.sp,
                modifier = modifier
                    .background(Color.Black)
                    .padding(16.dp)
            )

        }
    }
}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. AnnotatedString",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString"
                ),
                TextClickLink(
                    text = "AnnotatedString.Builder ",
                    textUrl = "\uD83D\uDCD6 Developers. ",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString.Builder"
                ),
                TextClickLink(
                    text = "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–≥–∞–º–∏ HTML –≤ AnnotatedString ",
                    textUrl = "\uD83D\uDCD6 Developers. AnnotatedString.Companion ",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString.Companion"
                ),
                TextClickLink(
                    text = "–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ ",
                    textUrl = "\uD83D\uDCD6 Developers. AnnotatedString.Companion ",
                    url = "https://developer.android.com/guide/topics/resources/string-resource#StylingWithHTML"
                ),
            ),
        ),


        ExampleCode(
            title = "–ú–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
            comment = """
–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ |sp|.

 –ï—Å–ª–∏ –≤–∞—à –¥–∏–∑–∞–π–Ω –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω, –∞ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å |—Å–∫—Ä–æ–ª–ª–∏–Ω–≥|.
     
|–°–∫—Ä–æ–ª–ª–∏–Ω–≥| (¬´–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–Ω–∏–µ; –ø—Ä–æ–∫—Ä—É—Ç–∫–∞¬ª) ‚Äî —Ñ–æ—Ä–º–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (—Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –¥–≤–∏–≥–∞–µ—Ç—Å—è (–ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç—Å—è) –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –∏–ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.
                  
–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ—Å–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ |contentDescription|, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —á—Ç–µ–Ω–∏—è —Å —ç–∫—Ä–∞–Ω–∞, –∫–æ–≥–¥–∞ –æ–Ω–∏ —Å—Ç–æ–ª–∫–Ω—É—Ç—Å—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.                   
 
–ù–µ –≤–µ–∑–¥–µ –µ—Å—Ç—å —Å–º—ã—Å–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å |contentDescription|. –ß–∏—Å—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ |@null|.

           |–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∂–µ—Å—Ç–æ–≤|

–í–º–µ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —É–∫–∞–∑–∞—Ç–µ–ª—è –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∂–µ—Å—Ç—ã –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º. 

|AwaitPointerEventScope| –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:
 
 1) |detectTapGestures| : –Ω–∞–∂–∞—Ç–∏–µ, –∫–∞—Å–∞–Ω–∏–µ, –¥–≤–æ–π–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ, –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ

 2) |detectHorizontalDragGestures|, 
    |detectVerticalDragGestures|, 
    |detectDragGestures|, 
    |detectDragGesturesAfterLongPress| : –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ


 3) |detectTransformGestures| : —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
 
 –≠—Ç–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è, –ø–æ—ç—Ç–æ–º—É –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –≤ –æ–¥–∏–Ω –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä |pointerInput|.
  
 –°–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Å–∞–Ω–∏—è, –∞ –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è.

–í–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è TapGestures –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–ø—Ä–æ–≥—Ä–∞–º–º—É, –∏ –≤—Ç–æ—Ä–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è. 

–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—è –∂–µ—Å—Ç–æ–≤ –≤ –∫–æ–º–ø–æ–Ω—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ |pointerInput|
                        
           |–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π|
–ñ–µ—Å—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–Ω–∏–∑. 

–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∂–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥–æ–º |awaitEachGesture|.
 
–ú–µ—Ç–æ–¥ |awaitEachGesture| –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –±–ª–æ–∫, –∫–æ–≥–¥–∞ –≤—Å–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–¥–Ω—è—Ç—ã, —É–∫–∞–∑—ã–≤–∞—è, —á—Ç–æ –∂–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.                        

           |–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–≤|
–°—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–µ —á–∞—Å—Ç–∏ –∂–µ—Å—Ç–æ–≤:
                        
|awaitFirstDown| - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–±–æ—Ç—É –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ –æ–ø—É—Å—Ç–∏—Ç—Å—è

|waitForUpOrCancellation|  - –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤—Å–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–¥–Ω–∏–º—É—Ç—Å—è                      

   –ù–Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è

|awaitTouchSlopOrCancellation| - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Ç–æ—á–∫–∏ –∫–∞—Å–∞–Ω–∏—è 

|awaitDragOrCancellation| - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è

–ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏:
|awaitHorizontalTouchSlopOrCancellation|,|awaitHorizontalDragOrCancellation|

–ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏:
|awaitVerticalTouchSlopOrCancellation|,|awaitVerticalDragOrCancellation|

|awaitLongPressOrCancellation| - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ                       

–ï—Å–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä |Transformable| –∏–ª–∏ –º–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è |TransformGestures| –Ω–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫ –Ω–∏–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–æ–≤:
|calculateCentroid|, |calculateCentroidSize|, |calculatePan|, |calculateRotation|, |and calculateZoom|
                        
           |–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π|
–ï—Å–ª–∏ –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–µ—Å—Ç–æ–≤, —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å.
                        
–ñ–µ—Å—Ç—ã, –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∏ –æ–±—â–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∂–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∂–µ—Å—Ç—ã –∏ —Å–æ–æ–±—â–∞—é—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É, —á—Ç–æ –Ω–∞ —ç—Ç–æ—Ç –∂–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å.

–ï—Å–ª–∏ –≤—ã –ø–∏—à–µ—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∂–µ—Å—Ç, –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤—Ä—É—á–Ω—É—é –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–≤ |PointerInputChange.consume|
                        
           |–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π|
–ò–∑–º–µ–Ω–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∂–¥–æ–º—É —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –ø–æ–ø–∞–¥–∞–µ—Ç.
                        
–°–æ–±—ã—Ç–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö –∫–æ–º–ø–æ–Ω—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ç—Ä–∏ ¬´–ø—Ä–æ—Ö–æ–¥–∞¬ª:

1)|Initial pass| : –ù–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ —Å–æ–±—ã—Ç–∏–µ —Ç–µ—á–µ—Ç –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –¥–µ—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –Ω–∏–∂–Ω–µ–π. –≠—Ç–æ—Ç –ø–æ—Ç–æ–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—é –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–º–æ–∂–µ—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. 

 –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, –∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö —Å–≤–æ–∏–º –¥–µ—Ç—è–º.

2)|Main pass| :  –ù–∞ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ö–æ–¥–µ —Å–æ–±—ã—Ç–∏–µ —Ç–µ—á–µ—Ç –æ—Ç –∫–æ–Ω–µ—á–Ω—ã—Ö —É–∑–ª–æ–≤ –¥–µ—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ –∫–æ—Ä–Ω—è –¥–µ—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. 

–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –≤—ã –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∂–µ—Å—Ç—ã –∏ —è–≤–ª—è–µ—Ç—Å—è —ç—Ç–∞–ø–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–æ–Ω–µ—á–Ω—ã–µ —É–∑–ª—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Å–≤–æ–∏–º–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏ —É–∑–ª–∞–º–∏, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –ª–æ–≥–∏—á–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∂–µ—Å—Ç–æ–≤.


3)|Final pass| :   –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø—Ä–æ—Ö–æ–¥–µ —Å–æ–±—ã—Ç–∏–µ –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç –≤–µ—Ä—à–∏–Ω—ã –¥–µ—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –∫–æ–Ω–µ—á–Ω—ã–º —É–∑–ª–∞–º. –≠—Ç–æ—Ç –ø–æ—Ç–æ–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞–º, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã—à–µ –≤ —Å—Ç–µ–∫–µ, —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–º. 

  –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∞ —É–±–∏—Ä–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –Ω–∞–∂–∞—Ç–∏–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –µ–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.

–í –∫–æ–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—Ä–æ—Ö–æ–¥:

           |–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π|
–õ—é–±–æ–π –∫–æ–º–ø–æ–Ω—É–µ–º—ã–π UI-—ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å ¬´–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º¬ª, —Ç.–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ, –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –í–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π (–∞–Ω–∞–ª–æ–≥ –∫–Ω–æ–ø–∫–∏ Button).

–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä |clickable|.

|clickable| —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤—É—Ö –≤–∏–¥–æ–≤:
 - —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–∞–∂–∞—Ç–∏—è, –≥–¥–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.
 
 - —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è |InteractionSource| –∏ |indication|

|clickable| ‚Äî —ç—Ç–æ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏—è –∏–ª–∏ —â–µ–ª—á–∫–∏. 

–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ |–≤–∞–∂–Ω–æ| —É–∫–∞–∑–∞—Ç—å –º–µ—Ç–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏:

|enabled|: —É–∫–∞–∑—ã–≤–∞–µ—Ç, –±—É–¥–µ—Ç –ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è. 

|onClickLabel|: –∑–∞–¥–∞–µ—Ç –º–µ—Ç–∫—É, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.

|role|: –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ Role?, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∏–ø –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.

|onClick|: —Ñ—É–Ω–∫—Ü–∏—è —Ç–∏–ø–∞ () -> Unit, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ.
           
     
            """.trimIndent(),
            nameFun = "OutSipmleArticle.kt",
            lambdaFun = {
                OutSipmleArticle(
                    sizeFontText = 18,
                    isNormalStyle = true,
                    isColorBackground = false,
                    isColorBorder = true,
                    isShapeLarge = false,
                    isTextCenter = false
                )
            },
            code = """
@Composable
fun OutSipmleArticle(
    title: String = "–ê–¥–∞–ø—Ç–∞—Ü–∏—è UI/UX –¥–ª—è –ª—é–¥–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∑—Ä–µ–Ω–∏—è",
    article: String = ""${'"'}
   –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ |sp|.
      ...        
               ""${'"'}.trimIndent(),
    sizeFontText: Int = 18,     //: TextUnit = 18.sp
    isNormalStyle: Boolean = true,
    isColorBackground: Boolean = false,
    isColorBorder: Boolean = false,
    isShapeLarge: Boolean = false,
    isTextCenter: Boolean = false,
) {

    val colorBackground = MaterialTheme.colorScheme.tertiaryContainer

    Column(
        Modifier
            .fillMaxSize()
            .background(colorBackground),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text="–ú–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
            modifier= Modifier
                .padding(8.dp)
                .background(Color.DarkGray),
            fontSize=23.sp,
            fontWeight = FontWeight.Bold,
            color= Color.Green,

            )

        // set scale transformation states
        var scale by remember {
            mutableFloatStateOf(1f)
        }

        val context = LocalContext.current

        val coroutineScope = rememberCoroutineScope()

        val state = rememberTransformableState { zoomChange,
                                                 offsetChange,
                                                 rotationChange ->
            scale = max(
                a = scale * zoomChange,
                b = 0.5f
            )
        }

        val sizeTitle = ((sizeFontText + 2) * scale).sp
        val sizeFirstArticle = ((sizeFontText + 6) * scale).sp
        val sizeArticle = (sizeFontText * scale).sp

        val color = MaterialTheme.colorScheme.outline

        val annotatedString = buildAnnotatedString {

            withStyle(
                style = ParagraphStyle(
                    lineHeight = sizeTitle,
                    textAlign = TextAlign.Center
                )
            ) {
                withStyle(
                    style = SpanStyle(
                        fontSize = sizeTitle,
                        fontWeight = FontWeight.Bold,
                    )
                ) {
                    append(title)
                }

            }

            withStyle(
                style = ParagraphStyle(
                    lineHeight = sizeArticle
                )
            ) {
//–ü–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª —Å—Ç–∞—Ç—å–∏
                withStyle(
                    style = SpanStyle(
                        color = Color.Red,
                        fontSize = sizeFirstArticle,
                        fontFamily = FontFamily.Cursive,
                        fontWeight = FontWeight.Bold,
                    )
                ) {
                    append(article[0])
                }

                val remainder = article.substring(1)

//—Ä–∞–∑–±–∏–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º "|"
                val messageArrayList = remainder.split("|")

                if (messageArrayList.size < 2) append(remainder)
                else {
                    messageArrayList.forEachIndexed { index, s ->
                        if (index % 2 != 0) {
                            withStyle(
                                style = SpanStyle(
                                    color = color,
                                    fontWeight = FontWeight.Bold,
                                )
                            ) {
                                append(s)
                            }

                        } else {
                            append(s)
                        }
                    }

                }

            }
        }

        Column(
            Modifier
                .fillMaxWidth()
                .weight(1f)
                //–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –º—É–ª—å—Ç–∏—Ç–∞—á-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                .transformable(state = state)
                .verticalScroll(rememberScrollState())
                //–¥–≤–æ–π–Ω–æ–π —â–µ–ª—á–æ–∫ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                .pointerInput(Unit) {
                    detectTapGestures(
                        onDoubleTap = {
                            Toast
                                .makeText(
                                    context, "Double click ",
                                    Toast.LENGTH_SHORT
                                )
                                .show()
                            if (scale == 1f) {
                                coroutineScope.launch {
                                    state.animateZoomBy(1.5f)
                                }
                            } else {
                                scale = 1f
                            }
                        }
                    )
                }
                .fillMaxSize()
                .border(1.dp, Color.DarkGray),
        ) {
            Text(
                text = annotatedString,
                style = if (isNormalStyle) MaterialTheme.typography.bodyMedium   //labelLarge  bodyLarge
                else MaterialTheme.typography.bodySmall,
                fontSize = sizeArticle,
                color = when {
                    isColorBackground -> MaterialTheme.colorScheme.background  //–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Color.Unspecified
                    else -> MaterialTheme.colorScheme.onTertiaryContainer
                },
                modifier = Modifier
                    .padding(top = dimensionResource(id = R.dimen.padding_medium))
                    .fillMaxWidth()
                    .alpha(if (isNormalStyle) 1.0f else 0.6f)
                    .clip(
                        shape = when {
                            isShapeLarge -> RoundedCornerShape(dimensionResource(id = R.dimen.roundedCornerCicle))
                            else -> RoundedCornerShape(5.dp)
                        }
                    )
                    .background(
                        color = when {
                            isColorBackground -> MaterialTheme.colorScheme.primary
                            else -> MaterialTheme.colorScheme.tertiaryContainer  //fon
                        }
                    )
                    .border(
                        width = 1.dp,
                        color = when {
                            isColorBorder -> MaterialTheme.colorScheme.primary
                            else -> MaterialTheme.colorScheme.tertiaryContainer  //fon
                        },
                        shape = when {
                            isShapeLarge -> RoundedCornerShape(dimensionResource(id = R.dimen.roundedCornerCicle))
                            else -> RoundedCornerShape(5.dp)
                        }
                    )
                    .padding(all = dimensionResource(id = R.dimen.padding_small)),
                textAlign = if (isTextCenter) {
                    TextAlign.Center
                } else {
                    TextAlign.Left
                }

            )

        }

    }
}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. AnnotatedString",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString"
                ),
                TextClickLink(
                    text = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∏–ª—è –∞–±–∑–∞—Ü–∞  ",
                    textUrl = "\uD83D\uDCD6 Developers. ParagraphStyle",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/ParagraphStyle"
                ),
                TextClickLink(
                    text = "–ü–æ–Ω–∏–º–∞–Ω–∏–µ  –∂–µ—Å—Ç–æ–≤  ",
                    textUrl = "Developers. Understand gestures",
                    url="https://developer.android.com/jetpack/compose/touch-input/pointer-input/understand-gestures"
                ),
                TextClickLink(
                    text = "–ö–æ—Å–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ  ",
                    textUrl ="Android Developers. Tap and press",
                    url ="https://developer.android.com/jetpack/compose/touch-input/pointer-input/tap-and-press"
                ),
                TextClickLink(
                    text = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º   ",
                    textUrl = "Developers. Handling interactions",
                    url="https://developer.android.com/jetpack/compose/touch-input/user-interactions/handling-interactions"
                ),
            ),


            ),



        ExampleCode(
            id = 20,
            title = "AnimatedVisibility",
            comment = """
–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é |AnimatedVisibility|.

var visible by remember {
    mutableStateOf(true)
}
// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –∫–æ–Ω–µ—á–Ω–æ–º –∏—Ç–æ–≥–µ —É–¥–∞–ª–∏—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏.
|AnimatedVisibility|(visible) {
    // your composable here
    // ...
}          
      
      
@Composable
public fun ColumnScope.AnimatedVisibility(
    visible: Boolean,
    modifier: Modifier = Modifier,
    |enter|: EnterTransition = |fadeIn|() + expandVertically(),
    |exit|: ExitTransition = |fadeOut|() + shrinkVertically(),
    label: String = "AnimatedVisibility",
    content: @Composable() (AnimatedVisibilityScope.() -> Unit)
): Unit

–ü–µ—Ä–µ—Ö–æ–¥ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, —É–∫–∞–∑–∞–≤ |EnterTransition| –∏ |ExitTransition|

|FadeIn| –∏ |FadeOut| - –ø–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∞–ª—å—Ñ—ã (—Ç. –µ. initialAlpha) –¥–æ 1f, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π |animationSpec|. 

–ó–Ω–∞—á–µ–Ω–∏–µ |initialAlpha| –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–æ |0f|, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ |spring| –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

|!fun fadeIn(
    animationSpec: FiniteAnimationSpec<Float> = spring(stiffness = Spring.StiffnessMediumLow),
    initialAlpha: Float = 0.0f
): EnterTransition|              
  
–ù–∞–ø—Ä–∏–º–µ—Ä:
  enter = fadeIn(
     initialAlpha = 0.3f,
     animationSpec = tween(durationMillis = 2000, easing = LinearOutSlowInEasing)
  )              
              
–§—É–Ω–∫—Ü–∏—è |tween| –∏–º–µ–µ—Ç —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:

    |durationMillis| ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö;

    |delayMillis| ‚Äî |–∑–∞–¥–µ—Ä–∂–∫–∞| –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è |–¥–æ –∑–∞–ø—É—Å–∫–∞| –∞–Ω–∏–º–∞—Ü–∏–∏;

    |easing| ‚Äî –∫—Ä–∏–≤–∞—è —Å–º—è–≥—á–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–Ω–∏–º–∞—Ü–∏—è.

|Easing| ‚Äî —ç—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–≤–∏–≥–∞—Ç—å—Å—è —Ç–∞–∫, –±—É–¥—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ç—Ä–µ–Ω–∏–µ, –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –∏ –º–∞—Å—Å–∞, —Ä–∞–±–æ—Ç–∞—é—Ç. 

Easing –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º —É—Å–∫–æ—Ä—è—Ç—å—Å—è –∏ –∑–∞–º–µ–¥–ª—è—Ç—å—Å—è —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é.

–í Jetpack Compose –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ easing:

 |FastOutSlowInEasing| - –±—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∞–ª–æ –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

 |LinearOutSlowInEasing| - –º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –∏ –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

 |FastOutLinearInEasing| - –º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

 |LinearEasing| - –Ω–∞—á–∞–ª–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º

 |CubicBezierEasing| - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫—Ä–∏–≤—É—é —Å–º—è–≥—á–µ–Ω–∏—è. –î–∞–Ω–Ω—ã–π easing –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ —á–µ—Ç—ã—Ä—ë–º —Ç–æ—á–∫–∞–º.


      
      
            """.trimIndent(),
            lambdaFun = {
                var expanded by remember {
                    mutableStateOf(false)
                }
                AnimationVisibilityContent(
                    expanded = expanded,
                    onClick = { expanded = !expanded }
                )
            },
            nameFun = "AnimationVisibilityContent.kt",
            code ="""
/*
 
var expanded by remember {
   mutableStateOf(false)
}
AnimationVisibilityContent(
   expanded = expanded,
   onClick = { expanded = !expanded }
)
*/                
@Composable
fun AnimationVisibilityContent ( 
    enter: EnterTransition =  fadeIn() + expandVertically(), 
    exit: ExitTransition = fadeOut() + shrinkVertically(),   
    color: Color = Color.Unspecified,
    expanded: Boolean = false,
    onClick: () -> Unit = {},
    modifier: Modifier = Modifier
){
    Box(
        modifier = modifier,
        contentAlignment = Alignment.Center
    ){
        Card(
            modifier = Modifier
                .padding(16.dp)
                .aspectRatio(1f), //height = width
            onClick = onClick
        ) {
            Column(
                modifier = Modifier
                    .padding(8.dp)
                    .fillMaxSize(),
                verticalArrangement = Arrangement.spacedBy(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Image(
                    modifier = Modifier
                        .background(color = color, shape = RoundedCornerShape(20.dp))
                        .padding(8.dp)
                        .weight(1f),
                    painter = painterResource(id = R.drawable.my_cat),
                    contentDescription = "My cat",
                    contentScale = ContentScale.Crop
                )
                AnimatedVisibility(
                    visible = expanded,
                    enter = enter,
                    exit = exit
                ) {
                    Text(
                        text = "Myuka",
                        fontSize = 50.sp,
                        fontFamily = FontFamily.Cursive
                    )
                }
            }
        }

    }

}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–ª–∞–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animations in Compose",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Composables modifiers",
                    url = "https://developer.android.com/develop/ui/compose/animation/composables-modifiers?hl=ru"
                ),
                TextClickLink(
                    text = "fadeIn  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Composables modifiers",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/animation/package-summary#fadeIn(androidx.compose.animation.core.FiniteAnimationSpec,kotlin.Float)"
                ),

            ),

        ),

        ExampleCode(
            id = 20,
            title = "Animated Slade",
            comment = """
|SladeIn|, |SladeOut| –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∫–æ–ª—å–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤ initialOffset, –∫ IntOffset(0, 0). –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ–ª—å–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—è initialOffset. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –æ–∑–Ω–∞—á–∞–µ—Ç —Å–∫–æ–ª—å–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ, —Ç–æ–≥–¥–∞ –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –±—É–¥–µ—Ç —Å–∫–æ–ª—å–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤–ø—Ä–∞–≤–æ. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è y —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–∫–æ–ª—å–∂–µ–Ω–∏—é –≤–≤–µ—Ä—Ö –∏ –≤–Ω–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

–ï—Å–ª–∏ —Å–∫–æ–ª—å–∂–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏, –∞ –Ω–µ –ø–æ –æ–±–µ–∏–º –æ—Å—è–º, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è |slideInHorizontally| –∏–ª–∏ |slideInVertically|.

|initialOffset| ‚Äî —ç—Ç–æ –ª—è–º–±–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –∏–ª–∏ –∫–∞–∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
                
|slideInHorizontally| —Å–∫–æ–ª—å–∑–∏—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤ |initialOffsetX|, –¥–æ |0| –ø–∏–∫—Å–µ–ª–µ–π. 

–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ–ª—å–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—è |initialOffsetX|. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–∫–æ–ª—å–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ, —Ç–æ–≥–¥–∞ –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–∫–æ–ª—å–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ.

|initialOffsetX| ‚Äî —ç—Ç–æ –ª—è–º–±–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –±–µ—Ä–µ—Ç –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –∏–ª–∏ –∫–∞–∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã, —á—Ç–æ —Å–º–µ—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–ª–µ–≤–æ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –µ–≥–æ —à–∏—Ä–∏–Ω—ã –∏ —Å–∫–æ–ª—å–∑–∏—Ç –≤–ø—Ä–∞–≤–æ.

|slideInVertically| —Å–∫–æ–ª—å–∑–∏—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ, –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤ initialOffsetY, –¥–æ 0 –≤ –ø–∏–∫—Å–µ–ª—è—Ö. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ–ª—å–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—è initialOffsetY. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–∫–æ–ª—å–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö, —Ç–æ–≥–¥–∞ –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–∫–æ–ª—å–∑–∏—Ç—å –≤–Ω–∏–∑.

initialOffsetY ‚Äî —ç—Ç–æ –ª—è–º–±–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –±–µ—Ä–µ—Ç –ø–æ–ª–Ω—É—é –≤—ã—Å–æ—Ç—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ–π –≤—ã—Å–æ—Ç–µ –∏–ª–∏ –∫–∞–∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã, —á—Ç–æ —Å–º–µ—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–≤–µ—Ä—Ö –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –µ–≥–æ –≤—ã—Å–æ—Ç—ã –∏ —Å–∫–æ–ª—å–∑–∏—Ç –≤–Ω–∏–∑.            ""${'"'}.trimIndent(),
                
                
            """.trimIndent(),
            lambdaFun = { AnimationVisibilitySlade() },
            nameFun = "AnimationVisibilitySlade.kt",
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–ª–∞–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animations in Compose",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Composables modifiers",
                    url = "https://developer.android.com/develop/ui/compose/animation/composables-modifiers?hl=ru"
                ),
                TextClickLink(
                    text = "–°–∫–æ–ª—å–∂–µ–Ω–∏–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. slideIn",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/animation/package-summary#slideIn(androidx.compose.animation.core.FiniteAnimationSpec,kotlin.Function1)"
                ),
                TextClickLink(
                    text = "–°–∫–æ–ª—å–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. slideInVertically",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/animation/package-summary#slideInVertically(androidx.compose.animation.core.FiniteAnimationSpec,kotlin.Function1)"
                ),
                TextClickLink(
                    text = "–°–∫–æ–ª—å–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. slideInHorizontally",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/animation/package-summary#slideInHorizontally(androidx.compose.animation.core.FiniteAnimationSpec,kotlin.Function1)"
                ),

                ),

            ),


        ExampleCode(
            id = 20,
            title = "Animated Scale",
            comment = """
|scaleIn| –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ –º–µ—Ä–µ –µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤ |initialScale|) –¥–æ |1f|. 

fun scaleIn(
    |animationSpec|: FiniteAnimationSpec<Float> = spring(stiffness = Spring.StiffnessMediumLow),
    |initialScale|: Float = 0.0f,
    |transformOrigin|: TransformOrigin = TransformOrigin.Center
): EnterTransition
            
|transformOrigin| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ—á–∫—É –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ –≤–∏–¥–µ –¥–æ–ª–∏ –æ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. TransformOrigin.|Center| –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. 

|scaleIn| –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º —Ç–∏–ø–æ–º |EnterTransition| —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–ª—é—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, scaleIn() + slideInHorizontally())

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –º–∞—Å—à—Ç–∞–± –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–æ —Å–ª–∞–π–¥–∞. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ slideIn/slideOut —Å scaleIn/scaleOut –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–µ–ª–∏—á–∏–Ω—É –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–∫–æ–ª—å–∂–µ–Ω–∏–∏.

–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –Ω–æ –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –º–∞–∫–µ—Ç–∞. 

|scaleIn| –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å |expandIn|/|expandHorizontally|/|expandVertically| –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –º–∞–∫–µ—Ç–∞ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏.            

|scaleOut| –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç |1f| –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤ |targetScale|. 

|transformOrigin| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ—á–∫—É –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ –≤–∏–¥–µ –¥–æ–ª–∏ –æ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ |TransformOrigin.Center|. 

|scaleOut| –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º —Ç–∏–ø–æ–º |ExitTransition| —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–ª—é—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, scaleOut() + fadeOut())

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –º–∞—Å—à—Ç–∞–± –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–æ —Å–ª–∞–π–¥–∞. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ |slideIn|/|slideOut| —Å |scaleIn|/|scaleOut| –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–µ–ª–∏—á–∏–Ω—É –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–∫–æ–ª—å–∂–µ–Ω–∏–∏.

–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –Ω–æ –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –º–∞–∫–µ—Ç–∞. 

|scaleOut| –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å |shrinkOut|/|shrinkHorizontally|/|shrinkVertically| –¥–ª—è —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –º–∞–∫–µ—Ç–∞.

                 """.trimIndent(),
            lambdaFun = { AnimationVisibilityScale(it) },
            nameFun = "AnimationVisibilityScale.kt",
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–ª–∞–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animations in Compose",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Composables modifiers",
                    url = "https://developer.android.com/develop/ui/compose/animation/composables-modifiers?hl=ru"
                ),
                TextClickLink(
                    text = "–ú–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. scaleIn",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/animation/package-summary#scaleIn(androidx.compose.animation.core.FiniteAnimationSpec,kotlin.Float,androidx.compose.ui.graphics.TransformOrigin)"
                ),

                ),

            ),


        ExampleCode(
            title = "Animated Expand",
            comment = """
|expandIn| —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∫–ª–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ |initialSize| –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. 

fun expandIn(
    |animationSpec|: FiniteAnimationSpec<IntSize> = spring(
            stiffness = Spring.StiffnessMediumLow,
            visibilityThreshold = IntSize.VisibilityThreshold
        ),
    |expandFrom|: Alignment = Alignment.BottomEnd,
    |clip|: Boolean = true,
    |initialSize|: (fullSize: IntSize) -> IntSize = { IntSize(0, 0) }
): EnterTransition

|expandFrom| —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º, –∫–∞–∫–∞—è —á–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–≤–æ–π. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä–∞–Ω–∏—Ü—ã –∫–ª–∏–ø–∞ –∞–Ω–∏–º–∏—Ä—É—é—Ç—Å—è –æ—Ç |IntSize(0, 0)| –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∫–∞–∑–∞ –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–∞–≤–æ–≥–æ —É–≥–ª–∞ (–∏–ª–∏ –Ω–∏–∂–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞ –≤ –º–∞–∫–µ—Ç–∞—Ö RTL) –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –¥–æ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –º–µ—Ä–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: |expandIn| –∞–Ω–∏–º–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –≠—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Ç–∞–∫–∂–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –º–∞–∫–µ—Ç–æ–≤, –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.

|initialSize| ‚Äî —ç—Ç–æ –ª—è–º–±–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä–∞–Ω–∏—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –≠—Ç–æ –¥–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –Ω–æ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

|clip| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é |clip| –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ |true|, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö.

–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å |expandHorizontally|, |expandVertically|.
                
            """.trimIndent(),
            lambdaFun = { AnimationVisibilityExpend(it)  },
            nameFun = "AnimationVisibilityExpend.kt",
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–ª–∞–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animations in Compose",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Composables modifiers",
                    url = "https://developer.android.com/develop/ui/compose/animation/composables-modifiers?hl=ru"
                ),
                TextClickLink(
                    text = "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Expend",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/animation/package-summary#expandIn(androidx.compose.animation.core.FiniteAnimationSpec,androidx.compose.ui.Alignment,kotlin.Boolean,kotlin.Function1)"
                ),

                ),

            ),

        ExampleCode(
            id = 20,
            title = "Animation of a child",
            comment = """
–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä |animateEnterExit| –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ª—é–±—ã—Ö –ø—Ä—è–º—ã—Ö –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–º–∫–æ–≤ |AnimatedVisibility| –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞, –æ—Ç–ª–∏—á–Ω–æ–π –æ—Ç —Ç–æ–π, —á—Ç–æ —É–∫–∞–∑–∞–Ω–∞ –≤ |AnimatedVisibility|. 

–í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —ç—Ç–∏—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –±—É–¥–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏ |AnimatedVisibility| –∏ –∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞.
                
            """.trimIndent(),
            lambdaFun = { AnimationChildren(it) },
            nameFun = "AnimationChildren.kt",
            code ="""
@Composable
fun AnimationChildren(
    isScreenExpanded: Boolean = false,
) {
    var visible by remember { mutableStateOf(true) }
    val aspectModifier = if (isScreenExpanded) Modifier.aspectRatio(1.5f)
    else Modifier.aspectRatio(1f)
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .clickable { visible = !visible },
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text("Click me...")
        AnimatedVisibility(
            visible = visible,
            enter = fadeIn(),
            exit = fadeOut()
        ) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color.Black),
                contentAlignment = Alignment.Center
            ) {
                Box(
                    modifier = aspectModifier
                        .animateEnterExit(
                            enter = slideInVertically(),
                            exit = slideOutVertically()
                        )
                        .clip(RoundedCornerShape(10.dp)),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.bg2),
                        contentDescription = null,
                        modifier = Modifier
                            .alpha(0.9f)
                            .fillMaxSize(),
                        contentScale = ContentScale.Crop,
                    )
                    Image(
                        painter = painterResource(id = R.drawable.earth),
                        contentDescription = null,
                        modifier = Modifier
                            .padding(16.dp)
                            .size(150.dp)
                            .animateEnterExit(
                                enter = scaleIn(
                                    animationSpec = tween(1000, easing = LinearOutSlowInEasing)
                                ) + expandVertically(expandFrom = Alignment.CenterVertically),
                                exit = scaleOut(
                                    animationSpec = tween(1000, easing = LinearOutSlowInEasing)
                                ) + shrinkVertically(shrinkTowards = Alignment.CenterVertically)
                            ),
                        contentScale = ContentScale.Crop,
                    )
                    Box(
                        modifier = aspectModifier,
                        contentAlignment = Alignment.BottomCenter
                    ) {
                        Text(
                            text = "Hello, World!",
                            color = Color.Cyan,
                            fontWeight = FontWeight.ExtraBold,
                            modifier = Modifier
                                .padding(16.dp)
                                .animateEnterExit(
                                    // Slide in/out the rounded rect
                                    enter = expandIn(
                                        animationSpec = tween(1000, easing = LinearOutSlowInEasing),
                                        expandFrom = Alignment.BottomStart
                                    ) {
                                        IntSize(50, 50) //
                                    },
                                    exit = scaleOut() + shrinkVertically(shrinkTowards = Alignment.CenterVertically)
                                ),
                            fontSize = 45.sp,
                            lineHeight = 45.sp,
                            textAlign = TextAlign.Center,
                            fontFamily = FontFamily.Cursive,
                        )

                    }

                }
            }
        }

    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–ª–∞–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animations in Compose",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Composables modifiers",
                    url = "https://developer.android.com/develop/ui/compose/animation/composables-modifiers?hl=ru"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä animateEnterExit ",
                    textUrl = "\uD83D\uDCD6 Developers. animateEnterExit",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/animation/AnimatedVisibilityScope#(androidx.compose.ui.Modifier).animateEnterExit(androidx.compose.animation.EnterTransition,androidx.compose.animation.ExitTransition,kotlin.String)"
                ),
                TextClickLink(
                    text = "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ",
                    textUrl = "\uD83D\uDCD6 Developers. Graphics. Images. Loading",
                    url = "https://developer.android.com/develop/ui/compose/graphics/images/loading?hl=ru"
                ),
                TextClickLink(
                    text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ",
                    textUrl = "\uD83D\uDCD6 Developers. Graphics. Images. Customize",
                    url = "https://developer.android.com/develop/ui/compose/graphics/images/customize?hl=ru"
                ),

                ),

            ),
        ExampleCode(
            title = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è",
            comment = """
–ß–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–æ |transition|, –≤–Ω—É—Ç—Ä–∏ –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è |AnimatedVisibility|, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏.
  
var visible by remember { mutableStateOf(true) }

AnimatedVisibility(
    visible = visible,
    enter = fadeIn(),
    exit = fadeOut()
) { 
    val background by transition.animateColor(label = "color") { state ->
        if (state == EnterExitState.Visible) Color.Blue else Color.Gray
    }
    Box(
        modifier = Modifier
            .size(128.dp)
            .background(background)
    )
}                


            """.trimIndent(),
            lambdaFun = { AnimationTransition() },
            nameFun = "AnimationTransition.kt",
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π ",
                    textUrl = "\uD83D\uDCD6 Developers.  animate*AsState",
                    url = "https://developer.android.com/develop/ui/compose/animation/value-based?hl=ru#updatetransition"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–ª–∞–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animations in Compose",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Composables modifiers",
                    url = "https://developer.android.com/develop/ui/compose/animation/composables-modifiers?hl=ru"
                ),

                ),

            ),
        ExampleCode(
            title = "AnimatedContent",
            comment = """
|AnimatedContent| –∞–Ω–∏–º–∏—Ä—É–µ—Ç —Å–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ –º–µ—Ä–µ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
 
 Row {
     var count by remember { mutableIntStateOf(0) }
     Button(onClick = { count++ }) {
         Text("Add")
     }
     AnimatedContent(
         targetState = count,
         label = "animated content"
     ) { targetCount ->
         // Make sure to use `targetCount`, not `count`.
         Text(text = "Count: ${'$'}targetCount")
     }
 }
 
 –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—á–µ–∑–∞–µ—Ç, –∞ –∑–∞—Ç–µ–º –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª–µ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (—ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è |—Å–∫–≤–æ–∑–Ω—ã–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º|). 
 
 –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏, —É–∫–∞–∑–∞–≤ –æ–±—ä–µ–∫—Ç |ContentTransform| –≤ |transitionSpec|
 
 –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å |ContentTransform| , –æ–±—ä–µ–¥–∏–Ω–∏–≤ |EnterTransition| —Å |ExitTransition| –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é |togetherWith|. 
 
 –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å |SizeTransform| –∫ |ContentTransform| , –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ |using| . 
 
 AnimatedContent(
     targetState = count,
     transitionSpec = {
         if (targetState > initialState) {
             slideInVertically { height -> height } + fadeIn() togetherWith
                 slideOutVertically { height -> -height } + fadeOut()
         } else {
             slideInVertically { height -> -height } + fadeIn() togetherWith
                 slideOutVertically { height -> height } + fadeOut()
         }.using(
             SizeTransform(clip = false)
         )
     }, label = "animated content"
 ) { targetCount ->
     Text(text = "${'$'}targetCount")
 }
 
|EnterTransition| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –¥–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–µ—Ç—å —Ü–µ–ª–µ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∞ |ExitTransition| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –¥–æ–ª–∂–Ω–æ –∏—Å—á–µ–∑–Ω—É—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ. 

–í –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º |EnterTransition| –∏ |ExitTransition| –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è |AnimatedVisibility| , |AnimatedContent| –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç |slideIntoContainer| –∏ |slideOutOfContainer| . –≠—Ç–æ —É–¥–æ–±–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã |slideInHorizontally|/|Vertically| –∏ |slideOutHorizontally|/|Vertically| , –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—á–∏—Å–ª—è—é—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–ª–∞–π–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ AnimatedContent .

|SizeTransform| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ —Ä–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–µ–∂–¥—É –∏—Å—Ö–æ–¥–Ω—ã–º –∏ —Ü–µ–ª–µ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–∞–∫ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É, —Ç–∞–∫ –∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É —Ä–∞–∑–º–µ—Ä—É. 

|SizeTransform| —Ç–∞–∫–∂–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç, –¥–æ–ª–∂–Ω–æ –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–µ–∑–∞—Ç—å—Å—è –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏. 
 
var expanded by remember { mutableStateOf(false) }
Surface(
    color = MaterialTheme.colorScheme.primary,
    onClick = { expanded = !expanded }
) {
    AnimatedContent(
        targetState = expanded,
        transitionSpec = {
            fadeIn(animationSpec = tween(150, 150)) togetherWith
                fadeOut(animationSpec = tween(150)) using
                SizeTransform { initialSize, targetSize ->
                    if (targetState) {
                        keyframes {
                            IntSize(targetSize.width, initialSize.height) at 150
                            durationMillis = 300
                        }
                    } else {
                        keyframes {
                            IntSize(initialSize.width, targetSize.height) at 150
                            durationMillis = 300
                        }
                    }
                }
        }, label = "size transform"
    ) { targetExpanded ->
        if (targetExpanded) {
            Expanded()
        } else {
            ContentIcon()
        }
    }
} 
            """.trimIndent(),
            lambdaFun = { AnimationContent() },
            nameFun = "AnimationContent.kt",
            code ="""
            var count by remember { mutableIntStateOf(0) }
            //....
                
            AnimatedContent(
                targetState = count,
                label = "animated content"
            ) { targetCount ->
                // Make sure to use `targetCount`, not `count`.
                Text(text = "${'$'}targetCount")
            }

            AnimatedContent(
                targetState = count,
                transitionSpec = {
            // –°—Ä–∞–≤–Ω–∏—Ç–µ –≤—Ö–æ–¥—è—â–µ–µ —á–∏—Å–ª–æ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —á–∏—Å–ª–æ–º.
                    if (targetState > initialState) {
            // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ, –æ–Ω–æ —Å–∫–æ–ª—å–∑–∏—Ç –≤–≤–µ—Ä—Ö –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∏—Å—á–µ–∑–∞–µ—Ç.
            // –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–µ (–º–µ–Ω—å—à–µ–µ) —á–∏—Å–ª–æ —Å–∫–æ–ª—å–∑–∏—Ç –≤–≤–µ—Ä—Ö –∏ –∏—Å—á–µ–∑–∞–µ—Ç.
                        slideInVertically { height -> height } + fadeIn() togetherWith
                                slideOutVertically { height -> -height } + fadeOut()
                    } else {
            // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ, –æ–Ω–æ –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω–∏–∑ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.
            // –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–∫–æ–ª—å–∑–∏—Ç –≤–Ω–∏–∑ –∏ –∏—Å—á–µ–∑–∞–µ—Ç.
                        slideInVertically { height -> -height } + fadeIn() togetherWith
                                slideOutVertically { height -> height } + fadeOut()
                    }.using(
            // –û—Ç–∫–ª—é—á–∏—Ç–µ –æ–±—Ä–µ–∑–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ
            // –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü.
                        SizeTransform(clip = false)
                    )
                }, label = "animated counter"
            ) { targetCount ->
                Text(text = "${'$'}targetCount")
            }
           
           // ...

           Row(
               verticalAlignment = Alignment.CenterVertically,
               horizontalArrangement = Arrangement.spacedBy(16.dp)
           ) {
               Button(onClick = { count++ }) {
                   Text("Add")
               }
               Button(onClick = { count-- }) {
                   Text("Subb")
               }
           }
           
           // ...            
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π ",
                    textUrl = "\uD83D\uDCD6 Developers.  animate*AsState",
                    url = "https://developer.android.com/develop/ui/compose/animation/value-based?hl=ru#updatetransition"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–ª–∞–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animations in Compose",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Composables modifiers",
                    url = "https://developer.android.com/develop/ui/compose/animation/composables-modifiers?hl=ru"
                ),

                ),

            ),

        ExampleCode(
            title = "Animated Crossfade",
            comment = """
|Crossfade| –∞–Ω–∏–º–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –¥–≤—É–º—è –º–∞–∫–µ—Ç–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞. –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ current –ø–∞—Ä–∞–º–µ—Ç—Ä—É, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏.                
            """.trimIndent(),
            lambdaFun = { AnimationCrossfade() },
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π ",
                    textUrl = "\uD83D\uDCD6 Developers.  animate*AsState",
                    url = "https://developer.android.com/develop/ui/compose/animation/value-based?hl=ru#updatetransition"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–ª–∞–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animations in Compose",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Composables modifiers",
                    url = "https://developer.android.com/develop/ui/compose/animation/composables-modifiers?hl=ru"
                ),

                ),

            ),
        ExampleCode(
            title = "–ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            comment = """
–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä |animateContentSize| –∞–Ω–∏–º–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.                
            """.trimIndent(),
            nameFun = "AnimationContentSize.kt",
            lambdaFun = { AnimationContentSize() },
            code ="""
    var expanded by remember { mutableStateOf(false) }

    LazyColumn {
        item {
            Card(
                modifier = Modifier
                    .border(1.dp, MaterialTheme.colorScheme.onBackground)
                    .padding(16.dp),
                onClick = { expanded = !expanded }
            ) {
                Text(
                    text = ""${'"'}
    –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ Jetpack Compose:
    ...
                    ""${'"'}.trimIndent(),
                    modifier = Modifier
                        .padding(4.dp)
                        .fillMaxWidth()
                        .animateContentSize(),
                    maxLines = if (expanded) Int.MAX_VALUE
                    else 2,
                    overflow = TextOverflow.Ellipsis,

                )
            }
        }
    }
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π ",
                    textUrl = "\uD83D\uDCD6 Developers.  animate*AsState",
                    url = "https://developer.android.com/develop/ui/compose/animation/value-based?hl=ru#updatetransition"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–ª–∞–≤–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animations in Compose",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Composables modifiers",
                    url = "https://developer.android.com/develop/ui/compose/animation/composables-modifiers?hl=ru"
                ),

                ),

            ),

        ExampleCode(
            title = "–ê–Ω–∏–º–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π",
            comment = """
–§—É–Ω–∫—Ü–∏–∏ |animate*AsState| ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–µ–π—à–∏–µ API-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∏–ª–∏ –∫–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ), –∏ API –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.

–ù–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∫–ª–∞—Å—Å–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ü–æ–¥ –∫–∞–ø–æ—Ç–æ–º –æ–±—ä–µ–∫—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ (–∞ –∏–º–µ–Ω–Ω–æ, —ç–∫–∑–µ–º–ø–ª—è—Ä Animatable ) –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–æ–º–Ω–µ–Ω –≤ –º–µ—Å—Ç–µ –≤—ã–∑–æ–≤–∞ —Å –ø–µ—Ä–≤—ã–º —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —ç—Ç–æ–º—É —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –¥—Ä—É–≥–æ–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –ï—Å–ª–∏ –≤ –ø–æ–ª–µ—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏—è, –æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏) –∏ –∞–Ω–∏–º–∏—Ä—É–µ—Ç—Å—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –í–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —ç—Ç–æ—Ç —Å–æ—Å—Ç–∞–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–∫–æ–º–ø–æ–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä.

–í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ |Compose| –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ |animate*AsState| –¥–ª—è 
|Float| , |Color| , |Dp| , |Size| , |Offset| , |Rect| , |Int| , |IntOffset| –∏ |IntSize| . 

–í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ |TwoWayConverter| –¥–ª—è |animateValueAsState| , –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–∏–ø.

–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ |AnimationSpec|.
                
            """.trimIndent(),
            nameFun = "Animation_AsState.kt",
            lambdaFun = { Animation_AsState() },
            code = """
@Composable
fun Animation_AsState(){

    var expanded by remember { mutableStateOf(false) }

    val maxLines: Int by animateIntAsState(
        targetValue = if (expanded) 50 else 2,
        animationSpec = tween(durationMillis = 800, easing = FastOutSlowInEasing),
        label = "maxLines"
    )

    val color by animateColorAsState(
        targetValue = if (expanded) MaterialTheme.colorScheme.secondary
        else MaterialTheme.colorScheme.background,
        label = "",
    )

    LazyColumn {
        item {
            Card(
                modifier = Modifier
                    .border(1.dp, MaterialTheme.colorScheme.onBackground)
                    .background(color)
                    .padding(16.dp),
                onClick = { expanded = !expanded }
            ) {
                Text(
                    text = ""${'"'}
 –§—É–Ω–∫—Ü–∏–∏ animate*AsState ... 
                    ""${'"'}.trimIndent(),
                    modifier = Modifier
                        .padding(4.dp)
                        .fillMaxWidth(),
                    maxLines = maxLines,
                    overflow = TextOverflow.Ellipsis,

                    )
            }
        }
    }
}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Value",
                    url = "https://developer.android.com/develop/ui/compose/animation/value-based?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AnimationSpec  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Customize",
                    url = "https://developer.android.com/develop/ui/compose/animation/customize?hl=ru#animationspec"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose",
                    textUrl = "\uD83D\uDCD6 Animations in Compose ",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
            ),

        ),

        ExampleCode(
            title = "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏",
            comment = """
|repeatable| –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, tween –∏–ª–∏ keyframes ), –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π. 

–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä |repeatMode| , —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, –¥–æ–ª–∂–Ω–∞ –ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞—á–∞–ª–∞ ( RepeatMode.|Restart| ) –∏–ª–∏ —Å –∫–æ–Ω—Ü–∞ ( RepeatMode.|Reverse| )

            """.trimIndent(),
            nameFun = "Animation_AsStateRepeatable.kt",
            lambdaFun = { Animation_AsStateRepeatable() },
            code = """
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Value",
                    url = "https://developer.android.com/develop/ui/compose/animation/value-based?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AnimationSpec  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Customize",
                    url = "https://developer.android.com/develop/ui/compose/animation/customize?hl=ru#animationspec"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose",
                    textUrl = "\uD83D\uDCD6 Animations in Compose ",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
            ),

            ),
        ExampleCode(
            title = "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è",
            comment = """
–≠–∫–∑–µ–º–ø–ª—è—Ä |InfiniteTransition| —Å–æ–∑–¥–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∞–Ω–∏–º–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏.

    val infiniteTransition = rememberInfiniteTransition()

–î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ—á–µ—Ä–Ω—é—é –∞–Ω–∏–º–∞—Ü–∏—é —Ç–∏–ø–∞ |float|, –∫–∞–∫ —á–∞—Å—Ç—å |InfiniteTransition|.

val size by
    infiniteTransition.animateFloat(
        |initialValue| = 10f, |! –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞| 
        |targetValue| = 120f, |! –ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞|
        animationSpec =
        infiniteRepeatable(
            |!// –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 10000 –º—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–≤–æ–π –∑–∞–º–µ–¥–ª–µ–Ω–∏—è LinearOutSlowInEasing|
            animation = tween(10000, easing = LinearEasing),
            |!// –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ (—Ç. –µ. –∫–∞–∂–¥—ã–µ 10000 –º—Å) –∞–Ω–∏–º–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è  —Ä–µ–≤–µ—Ä—Å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç.–µ. —Å [targetValue]|
            repeatMode = RepeatMode.Reverse
        )
    )
     
            """.trimIndent(),
            nameFun = "AnimationInfiniteTransition.kt",
            code = """
@Composable
fun AnimationInfiniteTransition(
    text: String ="–® –ë",
){

    // –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä [InfiniteTransition] –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
    val infiniteTransition = rememberInfiniteTransition()

    // –°–æ–∑–¥–∞–µ—Ç –¥–æ—á–µ—Ä–Ω—é—é –∞–Ω–∏–º–∞—Ü–∏—é —Ç–∏–ø–∞ float
    val size by
    infiniteTransition.animateFloat(
        initialValue = 10f,
        targetValue = 170f,
        animationSpec =
        infiniteRepeatable(
    // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ 
            animation = tween(20000, easing = LinearEasing),
            repeatMode = RepeatMode.Reverse
        )
    )


    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = text,
            fontSize = size.sp,
            color = Color.White,
            fontWeight = FontWeight.ExtraBold
            )
    }

}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose",
                    textUrl = "\uD83D\uDCD6 Animations in Compose ",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
            ),

            ),

        ExampleCode(
            title = "–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ö–æ–ª—Å—Ç–µ",
            comment = """
–§—É–Ω–∫—Ü–∏—è |Canvas| –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–∏–≥—É—Ä—ã –Ω–∞ —Ö–æ–ª—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

|!@Composable
public fun Canvas(
    modifier: Modifier, 
    onDraw: DrawScope.() -> Unit
): Unit|
                
–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ —Å DrawScope.|drawText|(). –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å |TextMeasurer| —Å –ø–æ–º–æ—â—å—é |rememberTextMeasurer| –∏ –≤—ã–∑–≤–∞—Ç—å |drawText|
                 
val textMeasurer = rememberTextMeasurer()

|Canvas|(modifier = Modifier.fillMaxSize()) {
    drawText(textMeasurer, "Hello")
}

|!fun DrawScope.drawText(
    textMeasurer: TextMeasurer,
    text: String,
    topLeft: Offset,
    style: TextStyle,
    overflow: TextOverflow,
    softWrap: Boolean,
    maxLines: Int,
    size: Size,
    blendMode: BlendMode
): Unit|

–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —à—Ä–∏—Ñ—Ç–æ–≤.

TextMeasurer –∏–º–µ–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–µ—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è.

|overflow| - –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ.

|softWrap| - –¥–æ–ª–∂–µ–Ω –ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞–∑—Ä—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –º—è–≥–∫–∏—Ö —Ä–∞–∑—Ä—ã–≤–∞—Ö —Å—Ç—Ä–æ–∫. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ false, –≥–ª–∏—Ñ—ã –≤ —Ç–µ–∫—Å—Ç–µ –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Ç–∞–∫, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –±—ã–ª–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º. 

|size| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å–∫–æ–ª—å–∫–æ —à–∏—Ä–æ–∫–∏–º –∏ –≤—ã—Å–æ–∫–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç. 
 |Size.Unspecified| - —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–±—â–µ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ–Ω —Ä–∞–∑–º–µ—â–µ–Ω. 
 |Size.width|  - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ 
 |Size.height| - –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ |softWrap| –∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è |TextOverflow.Ellipsis|. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ Size.height –ª–∏–±–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≥–¥–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è (TextOverflow.Clip), –ª–∏–±–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º.

|maxLines| - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –æ–Ω –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ softWrap. –ï—Å–ª–∏ –æ–Ω–æ –Ω–µ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, —Ç–æ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.

|blendMode| - –∞–ª–≥–æ—Ä–∏—Ç–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Ç–µ–∫—Å—Ç—É

–î–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É |DrawScope| –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤ –ø–∏–∫—Å–µ–ª—è—Ö –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–†–∞–∑–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:
   —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞, 
   –≤–∏–¥–∞ —à—Ä–∏—Ñ—Ç–∞, 
   –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏,
   –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥—Ä.

–í Compose –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å |TextMeasurer|, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É —Ç–µ–∫—Å—Ç–∞.
                        

                 
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ì—Ä–∞—Ñ–∏–∫–∞ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/overview?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose",
                    textUrl = "\uD83D\uDCD6 Animations in Compose ",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ö–æ–ª–ª–µ–∫—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤ ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/quick-guides/collections/display-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤—ã—Å–æ—Ç—É –∏–ª–∏ —à–∏—Ä–∏–Ω—É —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ Jetpack Compose ",
                    textUrl = "\uD83D\uDCD6 Medium. How to get the Height or Width of an Element in Jetpack Compose",
                    url = "https://medium.com/@vontonnie/how-to-get-the-height-or-width-of-an-element-in-jetpack-compose-8af04365d555"
                ),
                TextClickLink(
                    text = "–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ",
                    textUrl = "\uD83D\uDCD6 Developers. Android. Graphics. images...",
                    url = "https://developer.android.com/develop/ui/compose/graphics/images?hl=ru"
                ),
            ),

            nameFun = "DrawTextCanvas.kt",
            lambdaFun = { DrawTextCanvas() },
            code = """
@Composable
fun DrawTextCanvas(
    textTitle: String = "You have a letter!",
    textMessage: String = "Happy Birthday to You!",
) {
    var isOpen by remember {
        mutableStateOf(false)
    }


    val styleCenter = TextStyle(
        color = Color.White,
        fontSize = 30.sp,
        fontFamily = FontFamily.Cursive,
        fontWeight = FontWeight.Bold,
        textDecoration = TextDecoration.Underline
    )

    val styleMessage = TextStyle(
        color = Color.Yellow,
        fontSize = 24.sp,
        fontFamily = FontFamily.SansSerif,
        fontWeight = FontWeight.Normal,
    )

    val corner = 8.dp


// get local density from composable
    val density = LocalDensity.current

//initial height set at 100
    var boxHeight by remember { mutableStateOf(100.dp) }
//initial width set at 100
    var boxWidth by remember { mutableStateOf(100.dp) }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .onGloballyPositioned {
                boxHeight = with(density) {
                    it.size.height.toDp()
                }
                boxWidth = with(density) {
                    it.size.width.toDp()
                }
            }
            .padding(8.dp)
            .graphicsLayer {
                shadowElevation = corner.toPx()
                shape = RoundedCornerShape(corner)
                clip = true //!!! –æ–±—Ä–µ–∑–∞–Ω–∏–µ –≤—Å–µ–≥–æ, —á—Ç–æ –≤–Ω–µ —Ñ–æ—Ä–º—ã
            }
            .background(color = Color.Black)
            .drawBehind {
//—Ä–∏—Å—É–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –∑–∞–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
                drawRoundRect(
                    color = Color.Cyan,
                    cornerRadius = CornerRadius(corner.toPx()),
                    style = Stroke(
                        width = 4.dp.toPx(),
                        pathEffect = PathEffect.dashPathEffect(floatArrayOf(10f, 10f))
                    )
                )

            }
            .padding(8.dp),
        contentAlignment = Alignment.Center
    ){
        var ratio = 1f

        val maxBias = if (boxHeight>boxWidth) boxWidth/2
        else {
            ratio = 1.2f
            boxHeight/2
        }

        val bias: Dp by animateDpAsState(
            targetValue = if (isOpen) maxBias - 10.dp else 0.dp,
            animationSpec = tween(durationMillis = 800, easing = FastOutSlowInEasing),
            label = "bias"
        )

        val modifier = Modifier
            .aspectRatio(ratio)
            .padding(16.dp)
            .background(color = Color.Black)


        Crossfade(
            targetState = isOpen,
            label = "cross fade"
        ) { state ->
            when (state) {
                true -> DrawOnCanvas(modifier,textMessage,styleMessage,{isOpen = !isOpen},bias,state)
                else -> DrawOnCanvas(modifier,textTitle,styleCenter,{isOpen = !isOpen},bias,state)
            }
        }

        val enter = slideInVertically(animationSpec = tween(durationMillis = 2000)) { fullWidth ->
            -fullWidth / 3
        } + fadeIn(animationSpec = tween(durationMillis = 2000))

        val exit = slideOutVertically() + shrinkVertically() + fadeOut() + scaleOut(targetScale = 1.2f)

        val borderWidth = 4.dp

        AnimatedVisibility(
            visible = isOpen,
            enter = enter,
            exit = exit,
        ) {
        Image(
            painter = painterResource(id = R.drawable.kotik2),
            contentDescription = "",
            contentScale = ContentScale.Fit,
            alignment = Alignment.BottomCenter,
            modifier = Modifier
                .widthIn(max = maxBias)
                .border(
                    BorderStroke(borderWidth, Color.Green),
                    RoundedCornerShape(16.dp)
                )
                .background(Color.Yellow)
                .clip(RoundedCornerShape(16.dp))        )
    }


    }



}


@Composable
fun DrawOnCanvas(
    modifier:Modifier = Modifier,
    text:String = "",
    style:TextStyle = TextStyle.Default,
    onClick: () -> Unit = {},
    bias:Dp = 100.dp,
    state:Boolean = false
){
    val textMeasurer = rememberTextMeasurer()

    val textLayoutCenter = remember(text) {
        textMeasurer.measure(text, style)
    }

    Canvas(
        modifier = modifier
            .clickable { onClick() }
    ) {

        fun drawMyLine(
            start: Offset = Offset(0f,0f),
            end: Offset = Offset(0f,0f),
            color: Color = Color.Yellow,
            strokeWidth:Float = 10f,
            intervals:Float = 10f,
            phase:Float = 10f,
        ){
            drawLine(
                start = start,
                end = end,
                color = color,
                strokeWidth = strokeWidth,
                pathEffect = PathEffect.dashPathEffect(
                    intervals = floatArrayOf(
                        intervals.dp.toPx(),
                        intervals.dp.toPx()
                    ),
                    phase = phase.dp.toPx()
                )
            )
        }


        drawRoundRect(
            color = Color.Green,
            size = size,
            style = Stroke(
                width = 2f.dp.toPx(),
//–ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è
                pathEffect = PathEffect.dashPathEffect(
                    intervals = floatArrayOf(
                        10f.dp.toPx(),
                        10f.dp.toPx()
                    ),
                    phase = 0f
                )
            ),
//–∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤
            cornerRadius = CornerRadius(
                x = 30.dp.toPx(),
                y = 30.dp.toPx()
            )
        )
        
        val direct = if (state) -1.5f
        else 1f
        
//—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        drawText(
            textMeasurer = textMeasurer,
            text = text,
            style = style,
            topLeft = Offset(
                x = center.x - textLayoutCenter.size.width / 2,
                y = center.y - (40*direct).dp.toPx() - textLayoutCenter.size.height / 2,
            ),
        )

        //–ü–µ—Ä–µ–Ω–æ—Å —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ø–æ–∑–∏—Ü–∏—é (offsetX,offsetY)
        inset(
            10.dp.toPx()
        ) {
            //–†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ DrawScope –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            //—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏

            inset(
                left = 0f,
                top = size.height / 2,
                right = 0f,
                bottom = 0f
            ) {
//—Ä–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ –∫—Ä–∞—è–º
//–≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏ DrawScope
                drawRect(
                    color = Color.Cyan,
                    size = size,
                    style = Stroke(
                        width = 2f.dp.toPx(),
                    )
                )

                val point1 = Offset(x = 0f, y = 0f)
                
                val point2 = Offset(
                    x = size.width/2,
                    y = size.height/2 - bias.toPx()
                )

                drawMyLine(
                    start = point1,
                    end =  point2,
                    color = Color.Cyan,
                    intervals = 5f
                )

                val point3 = Offset(
                    x = size.width,
                    y = 0f
                )

                drawMyLine(
                    start = point2,
                    end =  point3,
                    color = Color.Cyan,
                    intervals = 5f
                )

            }

        }

    }

}
                
            """.trimIndent()
        ),

        ExampleCode(
            id = 3,
            title = "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            comment = """
–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ |IndicatorArc| ‚Äî —ç—Ç–æ composable, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 0 –¥–æ 100 –∏ —Ä–∏—Å—É–µ—Ç –∫—Ä—É–≥–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. 

–ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç 0 –¥–æ 100%
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ì—Ä–∞—Ñ–∏–∫–∞ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/overview?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose",
                    textUrl = "\uD83D\uDCD6 Animations in Compose ",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "androidx. compose. ui. graphics. drawscope ",
                    textUrl = "\uD83D\uDCD6 Developers graphics drawscope",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/drawscope/package-summary"
                ),
            ),

            lambdaFun = { CircularIndicator(it) },
            nameFun = "CircularIndicator.kt",
            code = """
@Composable
fun CircularIndicator(
    isExpanded: Boolean = false,
    progress: String = "%"
) {
    val sliderPosition = remember {
        mutableFloatStateOf(30f)
    }

    if (isExpanded) {
        Row(
            modifier = Modifier.fillMaxSize(),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            IndicatorArc(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxHeight()
                    .weight(1f),
                sliderPosition = sliderPosition.floatValue
            )
            Column(
                modifier = Modifier.weight(0.7f),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center

            ) {
                SliderSimple(progress, sliderPosition, 0f, 100f)
            }
        }
    } else {
        Column(
            modifier = Modifier
                .fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)

        ) {
            IndicatorArc(
                modifier = Modifier
                    .padding(16.dp)
                    .aspectRatio(1f),
//                    .fillMaxWidth()
//                    .weight(1f),
                sliderPosition = sliderPosition.floatValue
            )
            SliderSimple(progress, sliderPosition, 0f, 100f)

        }

    }


}



@Composable
private fun IndicatorArc(
    modifier: Modifier = Modifier,
    sliderPosition: Float = 50f,
    background:Color = MaterialTheme.colorScheme.tertiaryContainer,
    circleColor:Color = MaterialTheme.colorScheme.onPrimaryContainer,
    arcColor:Color = MaterialTheme.colorScheme.primary,
    thickness: Dp = 8.dp,
    style: TextStyle = TextStyle(
        //LocalTextStyle.current,
        textAlign = TextAlign.Center,
        fontFamily = Alice,
        fontSize = 55.sp,
        color = MaterialTheme.colorScheme.onTertiaryContainer,
    )

) {
    val startAngle = 270f
    val sweepAngle = 360 * sliderPosition / 100

    val textPosition = sliderPosition.toInt().toString() + "%"

    val textMeasurer = rememberTextMeasurer()
    val textLayoutResult = remember(textPosition) {
        textMeasurer.measure(textPosition, style)
    }

    Canvas(
        modifier = modifier.background(background)
    ) {
/*
        val widthIndicator = if (size.width < size.height)
            size.width - 16.dp.toPx()
        else size.height - 16.dp.toPx()


 */
        val widthIndicator = size.minDimension - 16.dp.toPx()

        drawCircle(
            color = circleColor,
            center = center,
            radius = widthIndicator / 2,
            style = Stroke(width = 2.dp.toPx())
        )

        drawArc(
            color = arcColor,
            startAngle = startAngle,
            sweepAngle = sweepAngle,
            style = Stroke(
                width = thickness.toPx(),
                cap = StrokeCap.Round,
            ),
            useCenter = false,
            topLeft = Offset(
                (size.width - widthIndicator) / 2,
                (size.height - widthIndicator) / 2
            ),
            size = Size(
                widthIndicator, widthIndicator
            )
        )

        //—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ—Ç—Ä—É
        drawText(
            textMeasurer = textMeasurer,
            text = textPosition,
            style = style,
            topLeft = Offset(
                x = center.x - textLayoutResult.size.width / 2,
                y = center.y - textLayoutResult.size.height / 2,
            ),
        )


    }
}
                
            """.trimIndent()
        ),
        ExampleCode(
            id = 3,
            title = "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
            comment = """
–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ |PieChart| ‚Äî —ç—Ç–æ composable, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞–∫—É—Å–æ–∫ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –ø—Ä–æ–¥–∞–∂–∏ –∏ —Ä–∏—Å—É–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É. 
                
–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –û–Ω–∞ –ø—Ä–æ—Å—Ç–∞ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏, –ø–æ–Ω—è—Ç–Ω–∞ –∏ —Å–º–æ—Ç—Ä—è—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ.

–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–ª–∏ –¥–æ–ª–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è.

–î–æ–ª–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Ü–µ–ª–æ–º—É.
                 
–°—É–º–º–∞ –¥–æ–ª–µ–π –≤ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ 100%. 
                
–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –Ω–µ –±–æ–ª–µ–µ —á–µ–º –∏–∑ 3‚Äí5 –¥–æ–ª–µ–π.
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ì—Ä–∞—Ñ–∏–∫–∞ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/overview?hl=ru"
                ),
                TextClickLink(
                    text = "–ß—Ç–æ —Å—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º",
                    textUrl = "\uD83D\uDCD6 Netology.ru ",
                    url = "https://netology.ru/blog/03-2021-krugovye-diagrammy"
                ),
                TextClickLink(
                    text = "androidx. compose. ui. graphics. drawscope ",
                    textUrl = "\uD83D\uDCD6 Developers graphics drawscope",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/drawscope/package-summary"
                ),
            ),

            lambdaFun = { PieChart(it) },
            nameFun = "PieChart.kt",
            code = """
@Composable
fun PieChart(
    isExpanded: Boolean = false,
    listArc: List<ItemArc> = DataItemArc.listArc,
    textStyle: TextStyle = TextStyle(
        textAlign = TextAlign.Center,
        fontSize = 25.sp,
        color = Color.Cyan,
    )
) {

    if (isExpanded) {
        Column(
            modifier = Modifier
                .background(color = Color.Black)
                .fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
        ) {
            Text(
                text = "–ü—Ä–æ–¥–∞–∂–∏ –ª–µ–≥–∫–∏—Ö –∑–∞–∫—É—Å–æ–∫",
                modifier = Modifier
                    .padding(top = 16.dp),
                style = textStyle,
                textAlign = TextAlign.Center
            )
            Row(
                modifier = Modifier
                    .fillMaxWidth(),
                horizontalArrangement = Arrangement.Center,
                verticalAlignment = Alignment.CenterVertically
            ) {
                ChartArc(
                    modifier = Modifier
                        .fillMaxHeight()
                        .weight(1f),
                    title = "",
                    stylePercent = TextStyle(
                        fontSize = 20.sp,
                        fontFamily = Alice,
                        color = Color.White,
                    ),
                    listArc = listArc,

                    )
                ListLegend(
                    listArc = listArc,
                    modifier = Modifier
                        .weight(0.7f)
                        .verticalScroll(rememberScrollState()),

                    )

            }

        }


    } else {
        Column(
            modifier = Modifier
                .background(color = Color.Black)
                .fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
        ) {
            Text(
                text = "–ü—Ä–æ–¥–∞–∂–∏ –ª–µ–≥–∫–∏—Ö –∑–∞–∫—É—Å–æ–∫",
                modifier = Modifier
                    .padding(top = 16.dp)
                    .fillMaxWidth(),
                style = textStyle,
                textAlign = TextAlign.Center
            )
            ChartArc(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f),
                title = "",
                stylePercent = TextStyle(
                    fontSize = 30.sp,
                    fontFamily = Alice,
                    color = Color.White,
                ),
                listArc = listArc,
            )

            ListLegend(
                listArc = listArc,
                modifier = Modifier
                    .padding(bottom = 16.dp)
                    .verticalScroll(rememberScrollState()),

            )


        }

    }


}
                
            """.trimIndent()
        ),
        ExampleCode(
            title = "–°—Ç—Ä–µ–ª–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä 1",
            comment = """
–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ì—Ä–∞—Ñ–∏–∫–∞ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/overview?hl=ru"
                ),
                TextClickLink(
                    text = "–ß—Ç–æ —Å—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º",
                    textUrl = "\uD83D\uDCD6 Netology.ru ",
                    url = "https://netology.ru/blog/03-2021-krugovye-diagrammy"
                ),
                TextClickLink(
                    text = "androidx. compose. ui. graphics. drawscope ",
                    textUrl = "\uD83D\uDCD6 Developers graphics drawscope",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/drawscope/package-summary"
                ),
            ),

            lambdaFun = { ArrowIndicator(it) },
            nameFun = "ArrowIndicator(.kt",
            code = """
@Composable
fun ArrowIndicator(
    isExpanded: Boolean = false,
    progress: String = "mA",
    mivValue:Float = 0f,
    maxValue:Float = 1200f
) {
    val sliderPosition = remember {
        mutableFloatStateOf(500f)
    }

    if (isExpanded) {
        Row(
            modifier = Modifier.fillMaxSize(),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            IndicatorArc(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxHeight()
                    .weight(1f),
                value = sliderPosition.floatValue
            )
            Column(
                modifier = Modifier.weight(0.7f),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center

            ) {
                SliderSimple(progress, sliderPosition, mivValue, maxValue)
            }
        }
    } else {
        Column(
            modifier = Modifier
                .fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)

        ) {
            IndicatorArc(
                modifier = Modifier
                    .padding(16.dp)
                    .aspectRatio(1f),
//                    .fillMaxWidth()
//                    .weight(1f),
                value = sliderPosition.floatValue,
                minValue = mivValue,
                maxValue = maxValue,
            )
            SliderSimple(progress, sliderPosition, mivValue, maxValue)
        }
    }
}

@Composable
private fun IndicatorArc(
    modifier: Modifier = Modifier,
    value: Float = 600f,
    minValue: Float = 0f,
    maxValue: Float = 1200f,
    startAngle:Float = 45f,
    sweepAngle:Float = -180f - 2 * startAngle,
    indentDp:Int = 16,
    strokeWidth:Float = 15f, //–®–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∏
    quantity:Int = 6,    //–∫–æ–ª-–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    background: Color = MaterialTheme.colorScheme.tertiaryContainer,
    colorArrow: Color = MaterialTheme.colorScheme.onTertiaryContainer,
    arcColor: Color = MaterialTheme.colorScheme.primary,
    thickness: Dp = 8.dp,
    unitOfMeasurement: String  = "mA",
    styleUnitOfMeasurement: TextStyle = TextStyle(
        //LocalTextStyle.current,
        textAlign = TextAlign.Center,
        fontWeight = FontWeight.Bold,
        fontFamily = Alice,
        fontSize = 40.sp,
        color = MaterialTheme.colorScheme.onTertiaryContainer,
    ),
    styleScaleValues: TextStyle = TextStyle(
        textAlign = TextAlign.Center,
        fontSize = 35.sp,
        color = MaterialTheme.colorScheme.onTertiaryContainer,
    ),
    styleRealValue: TextStyle = TextStyle(
        textAlign = TextAlign.Center,
        fontFamily = FontFamily.SansSerif,
        fontSize = 45.sp,
        color = MaterialTheme.colorScheme.secondary,
    )

) {

    val textPosition = unitOfMeasurement //sliderPosition.toInt().toString()

    val textMeasurer = rememberTextMeasurer()

    val textLayoutResult = remember(textPosition) {
        textMeasurer.measure(textPosition, styleUnitOfMeasurement)
    }

    //–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    val delta = 0.02f * maxValue
    val outValue = if (value > maxValue) maxValue + delta
    else if (value < minValue) minValue - delta
    else value


    Canvas(
        modifier = modifier.background(background)
    ) {
        // —à–∏—Ä–∏–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        val widthIndicator = size.minDimension - 16.dp.toPx()
        val radius = widthIndicator/2
        val minAngle = sweepAngle + startAngle
        val maxAngle = startAngle

        //–∫–∞—Ä–∫–∞—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        drawArc(
            color = arcColor,
            startAngle = startAngle,
            sweepAngle = sweepAngle,
            style = Stroke(
                width = thickness.toPx(),
                cap = StrokeCap.Round,
            ),
            useCenter = false,
            topLeft = Offset(
                (size.width - widthIndicator) / 2,
                (size.height - widthIndicator) / 2
            ),
            size = Size(
                widthIndicator, widthIndicator
            )
        )

        //—Ä–∏—Å—É–µ–º –¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        writeDivisionsIndicator(
            textMeasurer = textMeasurer,
            drawScope = this,
            color = colorArrow,
            radius = radius,
            minAngle = minAngle,
            maxAngle = maxAngle,
            minValue = minValue,
            maxValue = maxValue,
            quantity = quantity,
            widthDp = if (indentDp>2) indentDp-2 else 2,
            strokeWidth = if (strokeWidth>2f) strokeWidth/2 else 2f,
            isOutValue = true,
            style = styleScaleValues,
            indentTextDp = 60

        )

        //—Ä–∏—Å—É–µ–º –¥–µ–ª–µ–Ω–∏—è —Å –º–µ–Ω—å—à–∏–º —à–∞–≥–æ–º
        writeDivisionsIndicator(
            textMeasurer = textMeasurer,
            drawScope = this,
            color = colorArrow,
            radius = radius,
            minAngle = minAngle,
            maxAngle = maxAngle,
            minValue = minValue,
            maxValue = maxValue,
            quantity = quantity*2,
            widthDp = indentDp/2,
            strokeWidth = if (strokeWidth>2f) strokeWidth/2 else 2f,
            isOutValue = false,
            style = styleScaleValues

        )

        //—Ä–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        writeIndicatorArrow(
            this,
            colorArrow,
            radius,
            sweepAngle + startAngle,
            startAngle,
            minValue,
            maxValue,
            outValue,
            indentDp,
            strokeWidth
        )

        //—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ—Ç—Ä—É

        drawText(
            textMeasurer = textMeasurer,
            text = textPosition,
            style = styleUnitOfMeasurement,
            topLeft = Offset(
                x = center.x - textLayoutResult.size.width / 2,
                y = center.y +  20.dp.toPx() ,
            ),
        )

        val textValue = "${'$'}{value.toInt()} (${'$'}unitOfMeasurement)"

        val valueLayout = textMeasurer.measure(textValue,styleRealValue)
        drawText(
            textMeasurer = textMeasurer,
            text = textValue,
            style = styleRealValue,
            topLeft = Offset(
                x = center.x - valueLayout.size.width / 2,
                y = size.height - valueLayout.size.height ,
            ),
        )


        writePointInCenter(this,colorArrow)


    }


}

private fun writeTexttoCanvas(
    textMeasurer: TextMeasurer,
    drawScope: DrawScope,
    outValue: String,
    style: TextStyle,
    x: Float,
    y: Float,

    ) {
    val textLayout = textMeasurer.measure(outValue, style)
    with(drawScope) {
        drawText(
            textMeasurer = textMeasurer,
            text = outValue,
            style = style,
            topLeft = Offset(
                x = x - textLayout.size.width / 2,
                y = y - textLayout.size.height / 2,
            ),
        )

    }
}


//–°—Ç—Ä–µ–ª–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
private fun writeIndicatorArrow(
    drawScope : DrawScope,
    color:Color,
    radius:Float,
    minAngle:Float, //—É–≥–æ–ª –ø—Ä–∏ min value
    maxAngle:Float, //—É–≥–æ–ª –ø—Ä–∏ max value
    minValue:Float,
    maxValue:Float,
    realValue:Float,    //real value
    indentDp:Int,
    strokeWidth:Float
    ) {
    with(drawScope) {
        //—Ü–µ–Ω—Ç—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (–æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏)
        val x0 = center.x
        val y0 = center.y

        val degrees = valueIntoDegrees(minValue,maxValue,minAngle,maxAngle,realValue)
        val angle = degreesToRadians(degrees)
        val x1 = getPointX(radius - indentDp.dp.toPx(),x0,angle)
        val y1 = getPointY(radius - indentDp.dp.toPx(),y0,angle)
        //—Ä–∏—Å—É–µ–º –ª–∏–Ω–∏—é
        drawLine(
            start = Offset(x = x0, y = y0),
            end = Offset(x = x1, y = y1),
            strokeWidth = strokeWidth,
            color = color
        )

    }
}

//–¶–µ–Ω—Ç—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
private fun writePointInCenter(drawScope : DrawScope, color:Color){
    with(drawScope){
        drawPoints(
            points = listOf(
                Offset(center.x, center.y),
            ),
            pointMode = PointMode.Points,
            cap = StrokeCap.Round,
            color = color,
            strokeWidth = 30.dp.toPx()
        )

    }
}

//–î–µ–ª–µ–Ω–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç–∞
private fun writeDivisionsIndicator(
    textMeasurer:TextMeasurer,
    drawScope : DrawScope,
    color:Color,
    radius:Float,
    minAngle:Float, //—É–≥–æ–ª –ø—Ä–∏ min value
    maxAngle:Float, //—É–≥–æ–ª –ø—Ä–∏ max value
    minValue:Float,
    maxValue:Float,
    quantity:Int,    //–∫–æ–ª-–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    widthDp:Int,
    strokeWidth:Float,
    isOutValue:Boolean,
    style: TextStyle,
    indentTextDp:Int = 50,
) {
    with(drawScope) {
//—Ü–µ–Ω—Ç—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (–æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏)
        val x0 = center.x
        val y0 = center.y

//–ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ –≤–µ–ª–∏—á–∏–Ω—ã
        val increment = (maxValue - minValue) / quantity

        for (i in 0..quantity){
            val value = minValue + i * increment

            val degrees = valueIntoDegrees(minValue,maxValue,minAngle,maxAngle,value)
            val angle = degreesToRadians(degrees)
            val x1 = getPointX(radius,x0,angle)
            val y1 = getPointY(radius,y0,angle)
            val x2 = getPointX(radius - widthDp.dp.toPx(),x0,angle)
            val y2 = getPointY(radius - widthDp.dp.toPx(),y0,angle)
            //—Ä–∏—Å—É–µ–º –ª–∏–Ω–∏—é
            drawLine(
                start = Offset(x = x1, y = y1),
                end = Offset(x = x2, y = y2),
                strokeWidth = strokeWidth,
                color = color
            )

            if (isOutValue){
                val xx = getPointX(radius - indentTextDp.dp.toPx(),x0,angle)
                val yy = getPointY(radius - indentTextDp.dp.toPx(),y0,angle)
                writeTexttoCanvas(textMeasurer,drawScope,value.toInt().toString(),style,xx,yy)

            }


        }
    }
}


//–ø–µ—Ä–µ—Å—á–µ—Ç –≤–µ–ª–∏—á–∏–Ω—ã –≤ —É–≥–æ–ª(–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
//–∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Ä–æ–≤–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ–π, –ø—Ä–æ—Ö–æ–¥—è—â–µ–π —á–µ—Ä–µ–∑ –¥–≤–µ —Ç–æ—á–∫–∏ (x1,y1) (x2,y2)
private fun valueIntoDegrees(
    x1:Float = 0f,        //0 mA     min value
    x2:Float = 1200f,     //1200 mA  max value
    y1:Float = -225f,     //—É–≥–æ–ª –ø—Ä–∏ min -225¬∞
    y2:Float = 45f,       //—É–≥–æ–ª –ø—Ä–∏ max  45¬∞
    x:Float = 0f,  //—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ª—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –≤–µ–ª–∏—á–∏–Ω–∞
):Float = y1 + (y2-y1)/(x2-x1)*(x - x1)

//–ø–µ—Ä–µ—Å—á–µ—Ç –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
private fun degreesToRadians(degrees:Float = 0f):Double = degrees * Math.PI / 180

//–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –• –Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Å —Ä–∞–¥–∏—É—Å–æ–º R —Å —Ü–µ—Ç—Ä–æ–º –≤ —Ç–æ—á–∫–µ —Ö0
private fun getPointX(
    r:Float = 100f,       //radius
    x0:Float = 0f,        //center
    angle:Double = 100.0, //angle in radians
):Float = (x0 + r * cos(angle)).toFloat()

//–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –• –Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Å —Ä–∞–¥–∏—É—Å–æ–º R —Å —Ü–µ—Ç—Ä–æ–º –≤ —Ç–æ—á–∫–µ —Ö0
private fun getPointY(
    r:Float = 100f,       //radius
    y0:Float = 0f,        //center
    angle:Double = 100.0, //angle in radians
):Float = (y0 + r * sin(angle)).toFloat()

                
            """.trimIndent()
        ),

        ExampleCode(
            title = "–°—Ç—Ä–µ–ª–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä 2",
            comment = """
–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏–º–µ—Ä–∞ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ì—Ä–∞—Ñ–∏–∫–∞ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/overview?hl=ru"
                ),
                TextClickLink(
                    text = "–ß—Ç–æ —Å—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º",
                    textUrl = "\uD83D\uDCD6 Netology.ru ",
                    url = "https://netology.ru/blog/03-2021-krugovye-diagrammy"
                ),
                TextClickLink(
                    text = "androidx. compose. ui. graphics. drawscope ",
                    textUrl = "\uD83D\uDCD6 Developers graphics drawscope",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/drawscope/package-summary"
                ),
            ),

            lambdaFun = { ArrowNewIndicator(it) },
            nameFun = "ArrowNewIndicator.kt",
            code = """
@Composable
private fun IndicatorArc(
    modifier: Modifier = Modifier,
    value: Float = 60f,
    minValue: Float = 0f,
    maxValue: Float = 100f,
    alarmValue: Float = 85f,
    startAngle:Float = 45f,
    sweepAngle:Float = -180f - 2 * startAngle,
    indentDp:Int = 16,
    strokeWidth:Float = 15f, //–®–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∏
    quantity:Int = 5,    //–∫–æ–ª-–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    background: Color = MaterialTheme.colorScheme.tertiaryContainer,
    colorArrow: Color = MaterialTheme.colorScheme.onTertiaryContainer,
    arcColor: Color = MaterialTheme.colorScheme.primary,
    bgColor: Color = MaterialTheme.colorScheme.secondaryContainer,
    alarmColor: Color = MaterialTheme.colorScheme.error,
    thickness: Dp = 8.dp,
    unitOfMeasurement: String  = "kV",
    styleUnitOfMeasurement: TextStyle = TextStyle(
        //LocalTextStyle.current,
        textAlign = TextAlign.Center,
        fontWeight = FontWeight.Bold,
        fontFamily = Alice,
        fontSize = 40.sp,
        color = MaterialTheme.colorScheme.onTertiaryContainer,
    ),
    styleScaleValues: TextStyle = TextStyle(
        textAlign = TextAlign.Center,
        fontSize = 35.sp,
        color = MaterialTheme.colorScheme.onTertiaryContainer,
    ),
    styleRealValue: TextStyle = TextStyle(
        textAlign = TextAlign.Center,
        fontFamily = FontFamily.SansSerif,
        fontSize = 45.sp,
        color = MaterialTheme.colorScheme.secondary,
    )

) {

    val textPosition = unitOfMeasurement //sliderPosition.toInt().toString()

    val textMeasurer = rememberTextMeasurer()

    val textLayoutResult = remember(textPosition) {
        textMeasurer.measure(textPosition, styleUnitOfMeasurement)
    }

    //–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    val delta = 0.02f * maxValue
    val outValue = if (value > maxValue) maxValue + delta
    else if (value < minValue) minValue - delta
    else value


    Canvas(
        modifier = modifier.background(background)
    ) {
        // —à–∏—Ä–∏–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        val widthIndicator = size.minDimension - 16.dp.toPx()
        val radius = widthIndicator/2
        val minAngle = sweepAngle + startAngle
        val maxAngle = startAngle

        val widthBorder = 3f
        val widthBg = 30f
        val widthFrame = 150f
        val alarmAngle = sweepAngle - sweepAngle * alarmValue/maxValue

        //–∫–∞—Ä–∫–∞—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        writeFrame(this,bgColor,startAngle,sweepAngle,widthBg + 2*widthBorder,widthIndicator - widthFrame/2)
        writeFrame(this,alarmColor,startAngle,alarmAngle,widthBg + 2*widthBorder,widthIndicator - widthFrame/2)
        writeFrame(this,arcColor,startAngle,sweepAngle,widthBorder,widthIndicator)
        writeFrame(this,arcColor,startAngle,sweepAngle,widthBorder,widthIndicator-widthFrame)

        //—Ä–∏—Å—É–µ–º –¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        writeDivisionsIndicator(
            textMeasurer = textMeasurer,
            drawScope = this,
            color = colorArrow,
            radius = radius,
            minAngle = minAngle,
            maxAngle = maxAngle,
            minValue = minValue,
            maxValue = maxValue,
            quantity = quantity,
            widthDp = widthBg.toInt()+8,
            strokeWidth = if (strokeWidth>2f) strokeWidth/2 else 2f,
            isOutValue = true,
            style = styleScaleValues,
            indentTextDp = 60

        )

        //—Ä–∏—Å—É–µ–º –¥–µ–ª–µ–Ω–∏—è —Å –º–µ–Ω—å—à–∏–º —à–∞–≥–æ–º
        writeDivisionsIndicator(
            textMeasurer = textMeasurer,
            drawScope = this,
            color = colorArrow,
            radius = radius,
            minAngle = minAngle,
            maxAngle = maxAngle,
            minValue = minValue,
            maxValue = maxValue,
            quantity = quantity*2,
            widthDp = widthBg.toInt(),
            strokeWidth = if (strokeWidth>2f) strokeWidth/2 else 2f,
            isOutValue = false,
            style = styleScaleValues

        )

        //—Ä–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        writeIndicatorArrow(
            this,
            colorArrow,
            radius,
            sweepAngle + startAngle,
            startAngle,
            minValue,
            maxValue,
            outValue,
            indentDp,
            strokeWidth
        )

        //—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ—Ç—Ä—É
        drawText(
            textMeasurer = textMeasurer,
            text = textPosition,
            style = styleUnitOfMeasurement,
            topLeft = Offset(
                x = center.x - textLayoutResult.size.width / 2,
                y = center.y +  20.dp.toPx() ,
            ),
        )

        val textValue = "${'$'}{value.toInt()} (${'$'}unitOfMeasurement)"

        val valueLayout = textMeasurer.measure(textValue,styleRealValue)
        drawText(
            textMeasurer = textMeasurer,
            text = textValue,
            style = styleRealValue,
            topLeft = Offset(
                x = center.x - valueLayout.size.width / 2,
                y = size.height - valueLayout.size.height ,
            ),
        )

        writePointInCenter(this,colorArrow)

    }

}

private fun writeFrame(
    drawScope : DrawScope,
    color: Color,
    startAngle:Float,
    sweepAngle:Float,
    widthBg:Float,
    widthIndicator:Float
) {
    with(drawScope) {
        drawArc(
            color = color,
            startAngle = startAngle,
            sweepAngle = sweepAngle,
            style = Stroke(
                width = widthBg.dp.toPx(),
//                cap = StrokeCap.Round,
            ),
            useCenter = false,
            topLeft = Offset(
                (size.width - widthIndicator) / 2,
                (size.height - widthIndicator) / 2
            ),
            size = Size(
                widthIndicator, widthIndicator
            )
        )

    }
}

// ...
                
            """.trimIndent()
        ),

        ExampleCode(
            title = "–õ–∏–Ω–µ–π–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä",
            comment = """
–ü—Ä–∏–º–µ—Ä –ª–∏–Ω–µ–π–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ì—Ä–∞—Ñ–∏–∫–∞ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/overview?hl=ru"
                ),
                TextClickLink(
                    text = "–ß—Ç–æ —Å—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º",
                    textUrl = "\uD83D\uDCD6 Netology.ru ",
                    url = "https://netology.ru/blog/03-2021-krugovye-diagrammy"
                ),
                TextClickLink(
                    text = "androidx. compose. ui. graphics. drawscope ",
                    textUrl = "\uD83D\uDCD6 Developers graphics drawscope",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/drawscope/package-summary"
                ),
            ),

            lambdaFun = { LineDriverIndicator(it) },
            nameFun = "LineDriverIndicator.kt",
            code = """
@Composable
fun LineDriverIndicator(
    isExpanded: Boolean = false,
    labelSlider: String = "kV",
    mivValue:Float = 0f,
    maxValue:Float = 120f,
    alarmValue:Float = 105f
) {
    val sliderPosition = remember {
        mutableFloatStateOf(43f)
    }

    val modifier = Modifier
        .fillMaxWidth(if (isExpanded) 0.8f else 1f)

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(MaterialTheme.colorScheme.tertiaryContainer)
            .padding(top = 32.dp)
            .padding(8.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)

    ) {
        IndicatorLine(
            modifier = modifier,
            value = sliderPosition.floatValue,
            minValue = mivValue,
            maxValue = maxValue,
            alarmValue = alarmValue,
            unitOfMeasurement = labelSlider
        )
        SliderSimple(labelSlider+":", sliderPosition, mivValue, maxValue,modifier)
    }
}

@Composable
private fun IndicatorLine(
    title: String = "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—Ñ–∏–ª—å—Ç–∞",
    modifier: Modifier = Modifier,
    value: Float = 0f,
    minValue: Float = 0f,
    maxValue: Float = 120f,
    alarmValue: Float = maxValue - 25f,
    indentDp: Int = 16,
    strokeWidth: Float = 15f, //–®–∏—Ä–∏–Ω–∞ –ø–æ–ª–∑—É–Ω–∫–∞
    quantity: Int = 8,    //–∫–æ–ª-–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    background: Color = MaterialTheme.colorScheme.background,
    colorArrow: Color = MaterialTheme.colorScheme.onBackground,
    colorValue: Color = MaterialTheme.colorScheme.secondary,
    colorAlarm: Color = MaterialTheme.colorScheme.error,
    height: Int = 80,
    unitOfMeasurement: String = "kV",
    styleScaleValues: TextStyle = TextStyle(
        textAlign = TextAlign.Center,
        fontSize = 18.sp,
        color = MaterialTheme.colorScheme.onTertiaryContainer,
    ),
    styleRealValue: TextStyle = TextStyle(
        textAlign = TextAlign.Center,
        fontFamily = FontFamily.SansSerif,
        fontSize = 25.sp,
        color = colorValue,
    )

) {
    val textMeasurer = rememberTextMeasurer()

    Card {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
        ) {
            Text(title)
            Row(
                modifier = modifier
                    .fillMaxWidth()
                    .background(background),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Center
            ) {
                LineIndicator(
                    modifier = Modifier
                        .height(height.dp)
                        .weight(1f),
                    textMeasurer = textMeasurer,
                    color = colorArrow,
                    minValue = minValue,
                    maxValue = maxValue,
                    quantity = quantity * 2,
                    strokeWidth = if (strokeWidth > 2f) strokeWidth / 2 else 2f,
                    indentDp = indentDp,
                    style = styleScaleValues,
                    alarmValue = alarmValue,
                    alarmColor = colorAlarm,
                    realValue = value
                )
                Spacer(
                    modifier = Modifier
                        .width(2.dp)
                        .background(styleRealValue.color)
                        .height(height.dp)
                )
                Column(
                    modifier = Modifier
                        .background(background)
                        .padding(horizontal = 8.dp)
                        .widthIn(min = 70.dp)
                        .height(height.dp),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center
                ) {
                    Text(
                        "%.1f".format(value), style = styleRealValue.merge(
                            color = if (value >= alarmValue) colorAlarm else colorValue
                        )
                    )
                    Text(unitOfMeasurement, style = styleRealValue)

                }

            }

        }

    }

}

@Composable
fun LineIndicator(
    modifier: Modifier = Modifier,
    textMeasurer: TextMeasurer,
    color: Color,
    minValue: Float,
    maxValue: Float,
    quantity: Int,       //–∫–æ–ª-–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    strokeWidth: Float,
    sliderHeightDp: Int = 30,
    divisionHeight: Int = 10,
    indentDp: Int = 0,
    style: TextStyle,
    alarmValue: Float = 0f,
    alarmColor: Color,
    realValue: Float = 70f
) {
    //–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    val outValue = if (realValue > maxValue) maxValue
    else if (realValue < minValue) minValue
    else realValue

    Canvas(modifier) {
        val indentPx = indentDp.dp.toPx()
        val widthIndicator = size.width - 2 * indentPx

//—Ä–∏—Å—É–µ–º –±–µ–≥—É–Ω–æ–∫ (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫),—Ä–∞–∑–º–µ—Ä—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å
        val sliderWidth = outValue * widthIndicator / maxValue
        drawRect(
            topLeft = Offset(
                x = indentPx,
                y = size.height - sliderHeightDp.dp.toPx()
            ),

            size = Size(
                width = sliderWidth,
                height = sliderHeightDp.dp.toPx()
            ),

//–≥—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–∞ –∑–∞–ª–∏–≤–∫–∏
            brush = Brush.linearGradient(
                colors = listOf(
                    Color(0xff2962ff),
                    Color(0xffffeb3b),
                    Color(0xffff5722),
                )
            ),
        )

//–Ω–∏–∂–Ω—è—è –ª–∏–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        drawLine(
            start = Offset(indentPx, size.height),
            end = Offset(size.width - indentPx, size.height),
            strokeWidth = strokeWidth,
            color = color
        )

//–ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ –≤–µ–ª–∏—á–∏–Ω
        val increment = (maxValue - minValue) / quantity
        val dx = widthIndicator / quantity
        var inc = 0
        var isSmoll = false

        for (i in 0..quantity) {
            val value = minValue + i * increment
            val x = indentPx + i * dx
            val y1 = size.height - sliderHeightDp.dp.toPx()

            val y2 = if (isSmoll) y1 - divisionHeight
            else y1 - 2 * divisionHeight

            val isBorder = if ((i == 0) || (i == quantity)) true
            else false
            //—Ä–∏—Å—É–µ–º –¥–µ–ª–µ–Ω–∏–µ
            drawLine(
                start = Offset(x, y = if (isBorder) size.height else y1),
                end = Offset(x, y = y2),
                strokeWidth = strokeWidth,
                color = color
            )

            if (inc == 0) {
                //–í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ –¥–µ–ª–µ–Ω–∏—è–º–∏
                val textValue = "${'$'}{value.toInt()}"
                val valueLayout = textMeasurer.measure(textValue, style)
                val xx = when (i) {
                    0 -> x - 6.dp.toPx()
                    quantity -> x - valueLayout.size.width + 6.dp.toPx()
                    else -> x - valueLayout.size.width / 2
                }
                drawText(
                    textMeasurer = textMeasurer,
                    text = textValue,
                    style = style,
                    topLeft = Offset(
                        x = xx,
                        y = y2 - valueLayout.size.height - 8.dp.toPx()
                    ),
                )
            }

            inc++
            if (inc >= 4) inc = 0
            isSmoll = !isSmoll

        }


//—Ä–∏—Å—É–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        val alarmX = alarmValue * widthIndicator / (maxValue - minValue) + indentPx
        val alarmY = size.height - sliderHeightDp.dp.toPx() + 3.dp.toPx()
        val alarmdWidth = 6.dp.toPx()
        val alarmTop = alarmY - 5 * divisionHeight
        val path = Path().apply {
            moveTo(alarmX, alarmY)
            lineTo(alarmX - alarmdWidth, alarmTop)
            lineTo(alarmX + alarmdWidth, alarmTop)
        }
        drawPath(path, alarmColor)

    }

}
                
            """.trimIndent()
        ),

        ExampleCode(
            title = "–ú–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ö–æ–ª—Å—Ç–µ",
            comment = """
–§—É–Ω–∫—Ü–∏—è DrawScope.|withTransform()| –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ —Ä–∏—Å—É–Ω–∫–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π.

|withTransform()| —Å–æ–∑–¥–∞–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ –≤—Å–µ –∂–µ–ª–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. 
 
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ |withTransform|() –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, —á–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π, –ø–æ—Å–∫–æ–ª—å–∫—É –≤—Å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤–º–µ—Å—Ç–µ –≤ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã Compose –≤—ã—á–∏—Å–ª—è–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–ª –∫–∞–∂–¥–æ–µ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π.
                
Canvas(modifier = Modifier.fillMaxSize()) {
    withTransform({
        translate(left = size.width / 5F)
        rotate(degrees = 45F)
    }) {
        drawRect(
            color = Color.Gray,
            topLeft = Offset(x = size.width / 3F, y = size.height / 3F),
            size = size / 3F
        )
    }
}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ì—Ä–∞—Ñ–∏–∫–∞ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/overview?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose",
                    textUrl = "\uD83D\uDCD6 Animations in Compose ",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "androidx. compose. ui. graphics. drawscope ",
                    textUrl = "\uD83D\uDCD6 Developers graphics drawscope",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/drawscope/package-summary"
                ),
            ),

            lambdaFun = { DrawAnimeScaleAText() },
            nameFun = "DrawAnimeScaleAText.kt",
            code = """
@Composable
fun DrawAnimeScaleAText(
    modifier: Modifier = Modifier,
    duration: Int = 10000,   //10 sek
    textToCenter: String = "–ê",
    color: Color = Color.White,
    fontFamily: FontFamily = Cabin  //Alice
) {
    val textMeasurer = rememberTextMeasurer()

    val styleCenter = TextStyle(
        fontSize = 18.sp,
        fontFamily = fontFamily,
        fontWeight = FontWeight.Bold,
        color = color,
    )
    val textLayoutCenter = remember(textToCenter) {
        textMeasurer.measure(textToCenter, styleCenter)
    }

    val infiniteTransition = rememberInfiniteTransition(
        label = "infinite"
    )

    val scale by infiniteTransition.animateFloat(
        initialValue = 33f,
        targetValue = 1f,
        animationSpec = infiniteRepeatable(
            animation = tween(
                durationMillis = duration,
                easing = LinearEasing
            ),
            repeatMode = RepeatMode.Reverse
        ),
        label = "scale text"
    )

    Canvas(
        modifier = modifier
            .fillMaxSize()
            .background(color = Color.Black),
    ) {
        withTransform({
            scale(scaleX = scale, scaleY = scale)
        }) {
//—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ —Ü–µ—Ç—Ä—É —Ç–µ–∫—Å—Ç–∞
            drawText(
                textMeasurer = textMeasurer,
                text = textToCenter,
                style = styleCenter,
                topLeft = Offset(
                    x = center.x - textLayoutCenter.size.width / 2,
                    y = center.y - textLayoutCenter.size.height / 2,
                ),
            )

        }

    }
}
                
            """.trimIndent()
        ),

        ExampleCode(
            title = "–¢–µ–∫—Å—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –≤—ã–±–æ—Ä–∞",
            comment = """
–ö–æ–º–ø–æ–Ω—É–µ–º—ã–π |SelectionContainer| –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è,–≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞, –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. 

–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–ø–æ–Ω—É–µ–º—ã–º |SelectionContainer|                        
                
            """.trimIndent(),
            lambdaFun = { SelectableText()  },

            code ="""

            """.trimIndent(),
            links = listOf(

                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 Developers. Accessibility",
                    url = "https://developer.android.com/develop/ui/compose/accessibility/semantics?hl=ru"
                ),
            ),
        ),

        ExampleCode(
            title = "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Å–∞–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É",
            comment = """
–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä |clickable| –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É. –û–¥–Ω–∞–∫–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —â–µ–ª—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —É –≤–∞—Å –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö —Ç–µ–∫—Å—Ç–∞, –≤–∞–º –Ω—É–∂–Ω–æ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å |ClickableText|                        
                
            """.trimIndent(),
            lambdaFun = { ClickableMyText()  },
            nameFun = "ClickableMyText.kt",

            code ="""
@Composable
fun ClickableMyText(
    identification:String = "–§–∏–ª–∏–Ω",
    comment:String = "\"–£–≥—É–∫–∞—é—â–∞—è\" –Ω–æ—á–Ω–∞—è –ø—Ç–∏—Ü–∞",
    char:Char = '*'
) {
    val identLen = identification.length
    val comLen = comment.length
    val corner = 8.dp


    var expanded by remember { mutableStateOf(false) }

    val letters = remember { Array(identLen,{ _ -> char}) }

    var text by remember {
        mutableStateOf(letters.toStr())
    }

    val applicationContext = LocalContext.current

    val annotatedString = AnnotatedString(
        text = text+ " " +comment,
        spanStyles = listOf(
            AnnotatedString.Range(
                SpanStyle(
                    color = Color.Yellow,
                    fontStyle = FontStyle.Normal,
                    fontFamily = FontFamily.Monospace,
                    fontSize = 40.sp,
                    letterSpacing = 25.sp
                ),
                0, identLen //–§–∏–ª–∏–Ω
            ),
            AnnotatedString.Range(
                SpanStyle(
                    color = Color.Cyan,
                    fontSize = 15.sp
                ),
                identLen + 1, identLen + 1 + comLen  //–£–≥—É–∫–∞—é—â–∞—è –Ω–æ—á–Ω–∞—è –ø—Ç–∏—Ü–∞
            ),
        ),

        // —Å–æ–∑–¥–∞–µ–º –¥–≤–∞ –∞–±–∑–∞—Ü–∞
        paragraphStyles = listOf(
            AnnotatedString.Range(
                ParagraphStyle(
                    textAlign = TextAlign.Center
                ),
                0, identLen //–§–∏–ª–∏–Ω
            ),
            AnnotatedString.Range(
                ParagraphStyle(
                    textAlign = TextAlign.Center
                ),
                identLen + 1, identLen + 1 + comLen  //–£–≥—É–∫–∞—é—â–∞—è –Ω–æ—á–Ω–∞—è –ø—Ç–∏—Ü–∞
            ),
        )
    )

    Column(
        modifier = Modifier
            .padding(16.dp)
            .verticalScroll(rememberScrollState()),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text("–û—Ç–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ")
        ClickableText(
            text = annotatedString,
            modifier = Modifier
                .padding(16.dp)
                .fillMaxWidth()
                .graphicsLayer {
                    shadowElevation = 8.dp.toPx()
                    shape = RoundedCornerShape(corner)
                    clip = true //!!! –æ–±—Ä–µ–∑–∞–Ω–∏–µ –≤—Å–µ–≥–æ, —á—Ç–æ –≤–Ω–µ —Ñ–æ—Ä–º—ã
                }
                .background(color = Color.Black)
                .drawBehind {
//—Ä–∏—Å—É–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –∑–∞–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
                    drawRoundRect(
                        color = Color.Cyan,
                        cornerRadius = CornerRadius(corner.toPx()),
                        style = Stroke(
                            width = 4.dp.toPx(),
                            pathEffect = PathEffect.dashPathEffect(floatArrayOf(10f, 10f))
                        )
                    )

                }
                .padding(top = 32.dp,bottom = 32.dp),
            onClick = { ind ->
                if (ind < identLen){
                    letters[ ind ] = identification[ ind ].uppercaseChar()
                    text = letters.toStr()
                    Toast.makeText(
                        applicationContext,
                        "${'$'}{ind+1} -th character is clicked",
                        Toast.LENGTH_SHORT
                    )
                        .show()
                }

            }
        )

        Card(
            modifier = Modifier
                .border(1.dp, MaterialTheme.colorScheme.onBackground)
                .padding(16.dp),
            onClick = { expanded = !expanded }
        ) {
            Crossfade(
                targetState = expanded,
                label = "cross fade"
            ) { state ->
                when (state) {
                    true -> ExpandedText()
                    else -> ContentIcon()
                }
            }

        }

    }


}

@Composable
private fun ContentIcon(
    text: String = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ...",
    expanded: Boolean = false
){
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically,

        ) {
        Text(
            text = text,
            modifier = Modifier
                .weight(1f),
            textAlign = TextAlign.Center,
            fontSize = 18.sp
        )
        Icon(
            imageVector = Icons.Default.ArrowDropDown,
            contentDescription = "",
            modifier = Modifier.rotate(if (expanded) 180F else 0f)
        )
    }
}

@Composable
private fun ExpandedText(){
    Column(
        modifier = Modifier
            .padding(4.dp)
            .fillMaxWidth()
    ) {
        ContentIcon("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–∏–º–µ—Ä—É",true)

        Text(
            text = "–î–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–æ—Å–Ω–∏—Ç–µ—Å—å –Ω–∞ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª '*' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–∫–≤—ã",
            textAlign = TextAlign.Justify,
            letterSpacing = 1.3.sp,
            fontSize = 16.sp

        )
    }
}

fun Array<Char>.toStr(): String {
    val array: Array<Char> = this
    var result = ""
    array.forEach { result += it }
    return result
}
                

            """.trimIndent(),
            links = listOf(

                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 Developers. Accessibility",
                    url = "https://developer.android.com/develop/ui/compose/accessibility/semantics?hl=ru"
                ),
                TextClickLink(
                    text = "–û–Ω–ª–∞–π–Ω –≤–µ—Ä—Å–∏—è –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞ –¥–ª—è –¥–µ—Ç–µ–π –í—Å–µ–∑–Ω–∞–π–∫–∞",
                    textUrl = "\uD83D\uDCD6 –ö—Ä–æ—Å—Å–≤–æ—Ä–¥ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —ç—Ä—É–¥–∏—Ç–æ–≤ ",
                    url = "https://www.obovsemka.com/crosswordy/crossword-vseznajka.html"
                ),

            ),
        ),


        ExampleCode(
            id = 1,
            title = "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞",
            comment = """
–°–≤–æ–π—Å—Ç–≤–æ |liveRegion| –∏–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –±–ª–æ–∫–∞ |semantics| –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è |Composable| 

–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã–º –∑—Ä–µ–Ω–∏–µ–º.

–ê–∫—Ç–∏–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É–∂–±–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, —á—Ç–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —É–∑–ª–∞ –∏–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –∏–ª–∏ —Ç–µ–∫—Å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤. 

–ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ª—É—á–∞–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ |!TalkBack| –ø—Ä–æ–≥—Ä–∞–º–º–∞ —á—Ç–µ–Ω–∏—è —Å —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—á—Ç–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–ª—É—Ö.

|TalkBack| ‚Äì —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —á—Ç–µ–Ω–∏—è —Å —ç–∫—Ä–∞–Ω–∞ –æ—Ç |Google|, –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö |Android|. –û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º, –Ω–µ —Å–º–æ—Ç—Ä—è –Ω–∞ —ç–∫—Ä–∞–Ω.                
                
–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è |liveRegion|:

 LiveRegionMode.|Polite| - —Ä–µ–∂–∏–º —Ä–µ–≥–∏–æ–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —Å–ª—É–∂–±—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω—ã –æ–±—ä—è–≤–ª—è—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —ç—Ç–æ–º —É–∑–ª–µ;

 LiveRegionMode.|Assertive| - —Ä–µ–∂–∏–º —Ä–µ–≥–∏–æ–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —Å–ª—É–∂–±—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω—ã –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ—á—å, —á—Ç–æ–±—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—ä—è–≤–∏—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —ç—Ç–æ–º —É–∑–ª–µ.

 
 –ö–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è |Compose|:

1)|!–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤|. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Ä–∞–∑–º–µ—Ä –Ω–µ –º–µ–Ω–µ–µ |48| dp. –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ |Material Design|.

2)|!–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤! . –û–ø–∏—à–∏—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —â–µ–ª—á–∫–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ |clickable| –∏–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ |semantics| , –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ |clickable| .

3)|!–û–ø–∏—à–∏—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã| . –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä |contentDescription| –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è |contentDescription| –∑–Ω–∞—á–µ–Ω–∏–µ |null| –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

4)|!–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏| . –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ |semantics| , —á—Ç–æ–±—ã –ø–æ–º–µ—Ç–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

5)|!–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ—Ä—è–¥–∫–æ–º –æ–±—Ö–æ–¥–∞| . –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ |isTraversalGroup| , —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≥—Ä—É–ø–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç —á–∏—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ |traversalIndex| –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø–∞—Ö.


            """.trimIndent(),
            lambdaFun = { SemanticsText() },
            nameFun = "SemanticsText.kt",

            code ="""
@Composable
fun SemanticsText(){

    var changingText by remember {
        mutableStateOf("–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
    }

    Column(
        modifier = Modifier
            .padding(16.dp)
            .verticalScroll(rememberScrollState())
            .fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = changingText,
            textAlign = TextAlign.Center,
            modifier = Modifier.semantics {
                liveRegion = LiveRegionMode.Polite
                contentDescription = changingText
            }
        )

        Button(
            modifier = Modifier
                .padding(all = 16.dp),
            onClick = {},
            shape = RoundedCornerShape(20.dp)
        ) {
            Text(
                modifier = Modifier
                    .clickable(
                        onClickLabel = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–ª–∞ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º",
                        onClick = {
                            val num = (1..50).random()
                            changingText = num.toString()
                        }
                    ),
                text = "Generation",
                style = MaterialTheme.typography.bodySmall,
            )

        }

        Text(
            text = stringResource(R.string.talkback_generation),
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Justify,
        )

    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ Jetpack Compose ",
                    textUrl = "\uD83D\uDCD6 –°–µ–º–∞–Ω—Ç–∏–∫–∞ –≤ Compose ",
                    url = "https://developer.android.com/develop/ui/compose/accessibility?hl=ru#custom-actions"
                ),
                TextClickLink(
                    text = "–ö–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Compose\n ",
                    textUrl = "\uD83D\uDCD6 Developers. Key steps ",
                    url = "https://developer.android.com/develop/ui/compose/accessibility/key-steps?hl=ru#add-click-labels"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 Developers. LiveRegionMode",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/LiveRegionMode"
                ),
                TextClickLink(
                    text = "–ê–¥–∞–ø—Ç–∏—Ä—É–µ–º Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∑—Ä—è—á–∏—Ö –ª—é–¥–µ–π.  ",
                    textUrl = "\uD83D\uDCD6 https://habr.com/...",
                    url = "https://habr.com/ru/companies/surfstudio/articles/694622/"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 Developers. Accessibility",
                    url = "https://developer.android.com/develop/ui/compose/accessibility/semantics?hl=ru"
                ),
            ),
        ),

        ExampleCode(
            title = "–ú–∞—Å—à—Ç–∞–± —à—Ä–∏—Ñ—Ç–∞",
            comment = """
LocalDensity.current.|fontScale| —è–≤–ª—è–µ—Ç—Å—è –º–∞—à—Ç–∞–±–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º —à—Ä–∏—Ñ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —Ä–∞–∑–º–µ—Ä–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ –∑—Ä–µ–Ω–∏—è.

–í–µ–ª–∏—á–∏–Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞ |fontSize| –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö –ø–∏–∫—Å–µ–ª—è—Ö |sp|             
             
–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ |fontSize| –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ |Typography|, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.


            """.trimIndent(),
            lambdaFun = { FontScale() },
            nameFun = "FontScale.kt",
            code ="""
        //...        
        Text(
            text = "–ú–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–æ—ç—Ñ. : ${'$'}{LocalDensity.current.fontScale}",
            textDecoration = TextDecoration.Underline,
            fontSize = 18.sp
        )
        Text(
            modifier = Modifier
                .fillMaxWidth(),
            text = "Text [fontSize = 18sp]\n –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–∞—à—Ç–∞–±–∞",
            textAlign = TextAlign.Center,
            fontSize = 18.sp
        )
        Text(
            modifier = Modifier
                .fillMaxWidth(),
            text = "Text [fontSize = 18nonScaledSp()]\n –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–∞—à—Ç–∞–±–∞",
            textAlign = TextAlign.Center,
            fontSize = 18. nonScaledSp()
        )
        Text(
            modifier = Modifier
                .fillMaxWidth(),
            text = "Text [fontSize = 4.6em]\n –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–∞—à—Ç–∞–±–∞",
            textAlign = TextAlign.Center,
            fontSize = 4.6.em
        )
        //...

        @Composable
        fun Int.nonScaledSp(): TextUnit {
            val value: Int = this
            return with(LocalDensity.current) {
                val fontScale = this.fontScale
                val textSize = value / fontScale
                textSize.sp
            }
        }
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ Jetpack Compose ",
                    textUrl = "\uD83D\uDCD6 –°–µ–º–∞–Ω—Ç–∏–∫–∞ –≤ Compose ",
                    url = "https://developer.android.com/develop/ui/compose/accessibility?hl=ru#custom-actions"
                ),
                TextClickLink(
                    text = "–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤.",
                    textUrl = "\uD83D\uDCD6 Developers. FontScaling ",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/unit/FontScaling"
                ),
            ),
        ),

        ExampleCode(
            title = "–°–º–∞–π–ª–∏–∫–∏ –≠–º–æ–¥–∑–∏ \uD83D\uDD25",  //üî•
            comment = """
üê± ü¶â üòÄ üëã üê± üåª üçÅ ü¶â üåé  ‚ú® üéº ‚â† üìó üìò üìô üìï üìè  ü™ê              
            """.trimIndent(),
            lambdaFun = { Emoticons() },
            nameFun = "Emoticons.kt",
            code ="""
@Composable
fun Emoticons(){
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Blue)
            .padding(16.dp)
            .background(Color.Black),
        contentAlignment = Alignment.Center
    ) {
        Column(
            modifier = Modifier
                .verticalScroll(rememberScrollState()),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(48.dp)
        ) {
            Text(
                text = "\uD83C\uDF87",
                fontSize = 120.sp,
            )
            Text(
                text = "‚ú® Good Day ‚ú®",
                color = Color.White,
                fontFamily = FontFamily.Cursive,
                fontSize = 40.sp,
                textAlign = TextAlign.Center
            )
            Text(
                text = "\uD83D\uDEF0\uFE0F",
                fontSize = 80.sp,
            )
        }

    }
}                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–º–æ–¥–∑–∏ ",
                    textUrl = "\uD83D\uDCD6 https://emojio.ru/category.html ",
                    url = "https://emojio.ru/category.html"
                ),
                TextClickLink(
                    text = "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è PNG –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
                    textUrl = "\uD83D\uDCD6 https://www.pngegg.com/ru ",
                    url = "https://www.pngegg.com/ru"
                ),
            ),
        ),

        ExampleCode(
            title = "–ü–µ—Ä–µ—Ö–æ–¥—ã –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
            comment = """
 |SharedTransitionLayout| - —Å–∞–º—ã–π –≤–Ω–µ—à–Ω–∏–π –º–∞–∫–µ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç |SharedTransitionScope|. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ–±—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ |SharedTransitionScope|.

 Modifier.|sharedElement|() : –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–µ—á–∞–µ—Ç –≤ |SharedTransitionScope| —Å–æ—Å—Ç–∞–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º —Å–æ—Å—Ç–∞–≤–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º.

 Modifier.|sharedBounds|() : –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç |SharedTransitionScope| , —á—Ç–æ –≥—Ä–∞–Ω–∏—Ü—ã —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥—Ä–∞–Ω–∏—Ü –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥. 
 
 –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç |sharedElement|() , |sharedBounds|() –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

–í–∞–∂–Ω—ã–º –º–æ–º–µ–Ω—Ç–æ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ |Compose| —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –Ω–∞–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –æ–±—Ä–µ–∑–∫–æ–π.    
            
            """.trimIndent(),
            lambdaFun = { ListProducts(it,DataItemProducts.listProducts) },
            nameFun = "ListProducts.kt",
            code ="""
@OptIn(ExperimentalSharedTransitionApi::class)
@Composable
fun ListProducts(
    isExpanded: Boolean = false,
    itemList: List<ItemProduct>
) {
    var showDetails by remember {
        mutableStateOf(false)
    }

    var item by remember {
        mutableStateOf(ItemProduct())
    }

//—Å–∞–º—ã–π –≤–Ω–µ—à–Ω–∏–π –º–∞–∫–µ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    SharedTransitionLayout {
        AnimatedContent(
            targetState = showDetails,
            label = "basic_transition"
        ) { targetState ->
            if (!targetState) {
                MainContent(
                    itemList = itemList,
                    onShowDetails = {
                        showDetails = true
                        item = it
                    },
                    animatedVisibilityScope = this@AnimatedContent,
                    sharedTransitionScope = this@SharedTransitionLayout
                )
            } else {
                DetailsContent(
                    isExpanded = isExpanded,
                    item = item,
                    onBack = {
                      showDetails = false
                    },
                    animatedVisibilityScope = this@AnimatedContent,
                    sharedTransitionScope = this@SharedTransitionLayout
                )
            }
        }

    }

}

@OptIn(ExperimentalSharedTransitionApi::class)
private val boundsTransform = BoundsTransform { _: Rect, _: Rect ->
    tween(durationMillis = boundsAnimationDurationMillis, easing = FastOutSlowInEasing)
}


@OptIn(ExperimentalSharedTransitionApi::class)
@Composable
private fun MainContent(
    modifier: Modifier = Modifier,
    itemList: List<ItemProduct>,
    onShowDetails: (ItemProduct) -> Unit = {},
    sharedTransitionScope: SharedTransitionScope,
    animatedVisibilityScope: AnimatedVisibilityScope

){
    with(sharedTransitionScope){
        LazyVerticalGrid(
            columns = GridCells.Adaptive(150.dp),
            contentPadding = PaddingValues(4.dp),
            modifier = modifier
                .padding(8.dp)
                .sharedBounds(
                    rememberSharedContentState(key = "bounds"),
                    animatedVisibilityScope = animatedVisibilityScope,
                    enter = fadeIn(
                        tween(
                            boundsAnimationDurationMillis,
                            easing = FastOutSlowInEasing
                        )
                    ),
                    exit = fadeOut(
                        tween(
                            boundsAnimationDurationMillis,
                            easing = FastOutSlowInEasing
                        )
                    ),
                    boundsTransform = boundsTransform
                )

        ) {
            itemsIndexed(itemList) { _,item ->
                ItemSharedUI(item,onShowDetails,sharedTransitionScope,animatedVisibilityScope)
            }
        }

    }

}


@OptIn(ExperimentalSharedTransitionApi::class)
@Composable
private fun DetailsContent(
    isExpanded: Boolean = false,
    item: ItemProduct,
    onBack: () -> Unit = {},
    sharedTransitionScope: SharedTransitionScope,
    animatedVisibilityScope: AnimatedVisibilityScope,
){

    with(sharedTransitionScope) {
        LazyColumn(modifier = Modifier.fillMaxSize()) {
            item {
                val modifier = Modifier
                    .padding(top = 70.dp, start = 16.dp, end = 16.dp)
                    .sharedBounds(
                        rememberSharedContentState(key = "bounds"),
                        animatedVisibilityScope = animatedVisibilityScope,
                        enter = fadeIn(
                            tween(
                                durationMillis = boundsAnimationDurationMillis,
                                easing = FastOutSlowInEasing
                            )
                        ),
                        exit = fadeOut(
                            tween(
                                durationMillis = boundsAnimationDurationMillis,
                                easing = FastOutSlowInEasing
                            )
                        ),
                        boundsTransform = boundsTransform
                    )
                    .border(1.dp, Color.Gray.copy(alpha = 0.5f), RoundedCornerShape(8.dp))
                    .background(
                        MaterialTheme.colorScheme.secondaryContainer,
                        RoundedCornerShape(8.dp)
                    )
                    .clickable(
                        interactionSource = remember { MutableInteractionSource() },
                        indication = null
                    ) {
                        onBack()
                    }
                    .fillMaxSize()
                    .padding(8.dp)

                if (isExpanded) DetailsSharedExpandedItemUI(item,modifier,sharedTransitionScope,animatedVisibilityScope)
                else DetailsSharedItemUI(item,modifier,sharedTransitionScope,animatedVisibilityScope)

            }
        }


    }
}

@OptIn(ExperimentalSharedTransitionApi::class)
@Composable
private fun ItemSharedUI(
    item: ItemProduct,
    onItemClick: (ItemProduct) -> Unit = {},
    sharedTransitionScope: SharedTransitionScope,
    animatedVisibilityScope: AnimatedVisibilityScope,
    modifier: Modifier = Modifier,
){
    Card(
        modifier = modifier
            .padding(4.dp)
            .fillMaxWidth()
            .requiredHeight(270.dp)  //296
            .clickable { onItemClick(item) },
        elevation = CardDefaults.cardElevation(),  //8.dp
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            with(sharedTransitionScope) {

                Text(
                    text = stringResource(id = item.idTitle),
                    textAlign = TextAlign.Center,
                    fontWeight = FontWeight.Bold,
                    modifier = modifier
                        .sharedBounds(
                            rememberSharedContentState(key = "title ${'$'}{item.idTitle}"),
                            animatedVisibilityScope = animatedVisibilityScope
                        )
                        .padding(top = 4.dp, bottom = 8.dp)
                )

                Image(
                    modifier = Modifier
                        .sharedElement(
                            rememberSharedContentState(key = "image ${'$'}{item.idTitle}"),
                            animatedVisibilityScope = animatedVisibilityScope
                        )
                        .padding(16.dp)
                        .weight(1f),
                    painter = painterResource(id = item.idImage),
                    contentDescription = "",
                    contentScale = ContentScale.Crop
                )

                Text(
                    text = setPriceString(item.price.toString()),
                    textAlign = TextAlign.Center,
                    modifier = modifier
                        .padding(top = 4.dp, bottom = 8.dp)
                )
            }

        }
    }

}


@OptIn(ExperimentalSharedTransitionApi::class)
@Composable
private fun DetailsSharedItemUI(
    item: ItemProduct,
    modifier: Modifier = Modifier
        .padding(top = 70.dp, start = 16.dp, end = 16.dp)
        .border(1.dp, Color.Gray.copy(alpha = 0.5f), RoundedCornerShape(8.dp))
        .background(
            MaterialTheme.colorScheme.secondaryContainer,
            RoundedCornerShape(8.dp)
        )
        .padding(8.dp),
    sharedTransitionScope: SharedTransitionScope,
    animatedVisibilityScope: AnimatedVisibilityScope,


){
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        with(sharedTransitionScope) {
            Image(
                modifier = Modifier
                    .sharedElement(
                        rememberSharedContentState(key = "image ${'$'}{item.idTitle}"),
                        animatedVisibilityScope = animatedVisibilityScope
                    )
                    .fillMaxWidth(),
                painter = painterResource(id = item.idImage),
                contentDescription = "",
            )
            Text(
                text = stringResource(id = item.idTitle),
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.onSecondaryContainer,
                modifier = Modifier
                    .sharedBounds(
                        rememberSharedContentState(key = "title ${'$'}{item.idTitle}"),
                        animatedVisibilityScope = animatedVisibilityScope
                    )
            )
            Text(
                text = stringResource(id = item.idComment),
                color = MaterialTheme.colorScheme.onSecondaryContainer,
                textAlign = TextAlign.Justify,
            )
            Text(
                text = setPriceString(item.price.toString()),
                textAlign = TextAlign.Center,
                color = MaterialTheme.colorScheme.onSecondaryContainer
            )
            Spacer(modifier = Modifier.height(4.dp))
        }
    }

}



@OptIn(ExperimentalSharedTransitionApi::class)
@Composable
private fun DetailsSharedExpandedItemUI(
    item: ItemProduct,
    modifier: Modifier = Modifier
        .padding(top = 70.dp, start = 16.dp, end = 16.dp)
        .border(1.dp, Color.Gray.copy(alpha = 0.5f), RoundedCornerShape(8.dp))
        .fillMaxWidth()
        .background(
            MaterialTheme.colorScheme.secondaryContainer,
            RoundedCornerShape(8.dp)
        )
        .padding(8.dp),
    sharedTransitionScope: SharedTransitionScope,
    animatedVisibilityScope: AnimatedVisibilityScope,

){
    Row(
        modifier = modifier,
        horizontalArrangement = Arrangement.Start,
    ) {
        with(sharedTransitionScope) {
            Image(
                painter = painterResource(id = item.idImage),
                contentDescription = "",
                modifier = Modifier
                    .sharedElement(
                        rememberSharedContentState(key = "image ${'$'}{item.idTitle}"),
                        animatedVisibilityScope = animatedVisibilityScope
                    )
                    .weight(1f),
            )
            Column(
                modifier = Modifier
                    .padding(horizontal = 16.dp)
                    .weight(1f),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                Text(
                    text = stringResource(id = item.idTitle),
                    textAlign = TextAlign.Center,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onSecondaryContainer,
                    modifier = Modifier
                        .sharedBounds(
                            rememberSharedContentState(key = "title ${'$'}{item.idTitle}"),
                            animatedVisibilityScope = animatedVisibilityScope
                        )
                        .padding(bottom = 8.dp)
                )
                Text(
                    text = stringResource(id = item.idComment),
                    color = MaterialTheme.colorScheme.onSecondaryContainer,
                    textAlign = TextAlign.Justify,
                )


            }
        }

    }

}


private fun setPriceString(priceStr:String = "0"):AnnotatedString = buildAnnotatedString {
    withStyle(
        style = ParagraphStyle(
            textAlign = TextAlign.Center,
        )
    ) {
        withStyle(
            style = SpanStyle(
                color = Color.Red,
                fontFamily = FontFamily.Cursive,
                fontSize = 24.sp
            )
        ) {
            append("${'$'}")
        }
        withStyle(
            style = SpanStyle(
                fontSize = 18.sp
            )
        ) {
            append(priceStr)
        }
    }
}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ü–µ—Ä–µ—Ö–æ–¥—ã –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ",
                    textUrl = "\uD83D\uDCD6 Developers. Compose ",
                    url = "https://developer.android.com/develop/ui/compose/animation/shared-elements?hl=ru"
                ),
            ),
        ),

        ExampleCode(
            title = "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—É—Å–µ–ª—å",
            comment = """
|HorizontalMultiBrowseCarousel| - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—É—Å–µ–ª—å, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.

–î–∞–Ω–Ω–∞—è –∫–∞—Ä—É—Å–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∏–∫—Å –∫—Ä—É–ø–Ω—ã—Ö, —Å—Ä–µ–¥–Ω–∏—Ö, –∞ –º–µ–ª–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ—Ç–ª–∏—á–Ω–æ –≤–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –∏–º–µ—é—â–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏—è—Ç–Ω–æ–±. 
–ó–∞—Ç–µ–º ¬´–ö–∞—Ä—É—Å–µ–ª—å¬ª —Ä–∞–∑–º–µ—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ –æ–±—Ä–µ–∑–∞–µ—Ç (–∏–ª–∏ –º–∞—Å–∫–∏—Ä—É–µ—Ç) —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞ –∏—Ö —Å–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–≤–Ω–æ —Ä–∞—Å—à–∏—Ä—è—é—Ç—Å—è –∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è –º–µ–∂–¥—É –±–æ–ª—å—à–∏–º–∏, —Å—Ä–µ–¥–Ω–∏–º–∏ –∏ –º–∞–ª—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏.

|!@ExperimentalMaterial3Api
@Composable
fun HorizontalMultiBrowseCarousel(
    state: CarouselState,
    preferredItemWidth: Dp,
    modifier: Modifier = Modifier,
    itemSpacing: Dp = 0.dp,
    flingBehavior: TargetedFlingBehavior =
        CarouselDefaults.singleAdvanceFlingBehavior(state = state),
    minSmallItemWidth: Dp = CarouselDefaults.MinSmallItemSize,
    maxSmallItemWidth: Dp = CarouselDefaults.MaxSmallItemSize,
    contentPadding: PaddingValues = PaddingValues(0.dp),
    content: @Composable CarouselItemScope.(itemIndex: Int) -> Unit
)|


|state|	- –æ–±—ä–µ–∫—Ç state, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–∞—Ä—É—Å–µ–ª–∏

|preferredItemWidth| - —à–∏—Ä–∏–Ω–∞, –∫–æ—Ç–æ—Ä—É—é –±–æ–ª—å—à–∏–µ, –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–º–µ—Ç—å –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Å–∏. –≠—Ç–∞ —à–∏—Ä–∏–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª–µ–≤–æ–π –∏, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±—É–¥–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—É—Å–µ–ª–∏, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å —Ü–µ–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ö–∞—Ä—É—Å–µ–ª—å —Å–Ω–∞—á–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –º–µ–ª–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–º–µ–∂–¥—É [minSmallItemWidth] –∏ [maxSmallItemWidth]), –∑–∞—Ç–µ–º —Å—Ä–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏, –Ω–∞–∫–æ–Ω–µ—Ü, –±–æ–ª—å—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.

|modifier| - —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —ç—Ç–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –∫–æ–ª—å—Ü–µ–≤–æ–π –≥–∞–ª–µ—Ä–µ–∏

|itemSpacing| - –æ–±—ä–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ä—É—Å–µ–ª–∏

|flingBehavior| -—Å–≤–æ–π—Å—Ç–≤–æ [TargetedFlingBehavior], –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –¥–ª—è –∂–µ—Å—Ç–æ–≤ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

|minSmallItemWidth| -–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è —à–∏—Ä–∏–Ω–∞ –º–µ–ª–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ dp. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç [preferredItemWidth] –∏ —à–∏—Ä–∏–Ω—ã –∫–∞—Ä—É—Å–µ–ª–∏, —à–∏—Ä–∏–Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [minSmallItemWidth] –∏ [maxSmallItemWidth]

|maxSmallItemWidth| - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è —à–∏—Ä–∏–Ω–∞ –º–µ–ª–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ dp. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç [preferredItemWidth] –∏ —à–∏—Ä–∏–Ω—ã –∫–∞—Ä—É—Å–µ–ª–∏, —à–∏—Ä–∏–Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [minSmallItemWidth] –∏ [maxSmallItemWidth]

|contentPadding| - –Ω–∞–±–∏–≤–∫–∞ –≤–æ–∫—Ä—É–≥ –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ. –≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–æ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏–ª–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [itemSpacing] –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.

|content| = —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—É—Å–µ–ª–∏ Composable                
            """.trimIndent(),
            lambdaFun = { CarouselProducts() },
            nameFun = "CarouselProducts.kt",
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—É—Å–µ–ª—å",
                    textUrl = "\uD83D\uDCD6 https://emojio.ru/category.html ",
                    url = "https://composables.com/material3/horizontalmultibrowsecarousel"
                ),
                TextClickLink(
                    text = "Find components for your Jetpack Compose apps",
                    textUrl = "\uD83D\uDCD6 Composables",
                    url = "https://composables.com/"
                ),
            ),
        ),

        ExampleCode(
            title = "–†–µ—Å–∞–π–∑–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |autoSize| –≤ |!BasicText| –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.                
            """.trimIndent(),
            lambdaFun = { BasicTextAutoSize() },
            nameFun = "BasicTextAutoSize.kt",
            code ="""
    Box(
        modifier = Modifier
            .background(MaterialTheme.colorScheme.secondary)
            .fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        BasicText(
            text = "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!",
            modifier = Modifier
                .padding(16.dp),
            maxLines = 1,
            autoSize = TextAutoSize.StepBased()
        )

    }                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤—ã–ø—É—Å–∫–µ Jetpack Compose –æ—Ç 25 –∞–ø—Ä–µ–ª—è 25 –≥–æ–¥–∞",
                    textUrl = "\uD83D\uDCD6 –ë–ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Android ",
                    url = "https://android-developers.googleblog.com/2025/04/whats-new-in-jetpack-compose-april-25.html"
                ),
            ),
        ),

        ExampleCode(
            title = "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞",
            comment = """
            –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä .|rotate|(-90f) –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏.
            """.trimIndent(),
            lambdaFun = { VertikalOrientationText(it) },
            nameFun = "VertikalOrientationText.kt",
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤—ã–ø—É—Å–∫–µ Jetpack Compose –æ—Ç 25 –∞–ø—Ä–µ–ª—è 25 –≥–æ–¥–∞",
                    textUrl = "\uD83D\uDCD6 –ë–ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Android ",
                    url = "https://android-developers.googleblog.com/2025/04/whats-new-in-jetpack-compose-april-25.html"
                ),
                TextClickLink(
                    text = "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è Android",
                    textUrl = "\uD83D\uDCD6 Android Studio ",
                    url = "https://developer.android.com/studio?utm_source=android-studio&hl=ru"
                ),
            ),
        ),

        ExampleCode(
            title = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∏",
            comment = """
 –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ |SegmentedButton|,—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å –∏–∑ –Ω–∞–±–æ—Ä–∞ –æ–ø—Ü–∏–π, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–º.

 –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–±–∏—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã.

 –°—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:
    –ö–Ω–æ–ø–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ : –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç.
    –ö–Ω–æ–ø–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ : –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–±–∏—Ä–∞—Ç—å –æ—Ç –¥–≤—É—Ö –¥–æ –ø—è—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –±–æ–ª–µ–µ –ø—è—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏—à–∫–∏
                 
 –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–∫–µ—Ç—ã |SingleChoiceSegmentedButtonRow| –∏ |MultiChoiceSegmentedButtonRow| –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫. 
 –≠—Ç–∏ –º–∞–∫–µ—Ç—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä |SegmentedButton| , –∞ —Ç–∞–∫–∂–µ –æ–±—â–∏–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

    space : —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏.
    content : –°–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å SegmentedButton .                 
    """.trimIndent(),
            lambdaFun = { SegmentedButtonExample(it) },
            nameFun = "SegmentedButtonExample.kt",
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞  ",
                    textUrl = "\uD83D\uDCD6 Android. Developers ",
                    url = "https://developer.android.com/develop/ui/compose/components/segmented-button?hl=ru"
                ),
                TextClickLink(
                    text = "Segmented buttons.  ",
                    textUrl = "\uD83D\uDCD6 m3.material.io ",
                    url = "https://m3.material.io/components/segmented-buttons/overview"
                ),
                TextClickLink(
                    text = "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ",
                    textUrl = "\uD83D\uDCD6 SegmentedButtonSingleSelectSample() ",
                    url = "https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:compose/material3/material3/samples/src/main/java/androidx/compose/material3/samples/SegmentedButtonSamples.kt"
                ),
            ),
        ),

        ExampleCode(
            title = "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            comment = """
Checkbox –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –Ω–∞–±–æ—Ä–∞. –û–±—ã—á–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ.
                 
 –ü–æ—Å–∫–æ–ª—å–∫—É –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–ª–∞–∂–∫–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Ñ–ª–∞–∂–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–æ–≤.
                  
            """.trimIndent(),
            lambdaFun = { CheckboxWithTextExample(it) },
            nameFun = "CheckboxWithTextExample.kt",
            code ="""
import androidx.compose.material3.Checkbox
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember

val checkedState = remember { mutableStateOf(true) }
Checkbox(
    checked = checkedState.value, 
    onCheckedChange = { checkedState.value = it }
)
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–î–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–∂–∫–∏ –≤ —Å–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ  ",
                    textUrl = "\uD83D\uDCD6  Android.Developers ",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary#Checkbox(kotlin.Boolean,kotlin.Function1,androidx.compose.ui.Modifier,kotlin.Boolean,androidx.compose.material3.CheckboxColors,androidx.compose.foundation.interaction.MutableInteractionSource)"
                ),
                TextClickLink(
                    text = "Material Design checkbox  ",
                    textUrl = "\uD83D\uDCD6  m3.material.io ",
                    url = "https://m3.material.io/components/checkbox/overview"
                ),
                TextClickLink(
                    text = "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ",
                    textUrl = "\uD83D\uDCD6  CheckboxWithTextSample ",
                    url = "https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:compose/material3/material3/samples/src/main/java/androidx/compose/material3/samples/CheckboxSamples.kt"
                ),
            ),
        ),

        )
}
