package com.pvmprog.mytextwithcompose.data.locale

import android.os.Build
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import com.pvmprog.mytextwithcompose.data.locale.DataHighCode.highCodeList
import com.pvmprog.mytextwithcompose.data.model.ExampleCode
import com.pvmprog.mytextwithcompose.data.model.HighlightCode
import com.pvmprog.mytextwithcompose.data.model.TextClickLink
import com.pvmprog.mytextwithcompose.ui.examples.AnimationBgGradient
import com.pvmprog.mytextwithcompose.ui.examples.AnimationSizeText
import com.pvmprog.mytextwithcompose.ui.examples.SimpleAlign
import com.pvmprog.mytextwithcompose.ui.examples.AnnotatedHtmlString
import com.pvmprog.mytextwithcompose.ui.examples.BackgroundDriver
import com.pvmprog.mytextwithcompose.ui.examples.DrawAnimeScaleAText
import com.pvmprog.mytextwithcompose.ui.examples.DrawTextCanvas
import com.pvmprog.mytextwithcompose.ui.examples.ExampleFontSize
import com.pvmprog.mytextwithcompose.ui.examples.GradientDriver
import com.pvmprog.mytextwithcompose.ui.examples.GradientOverview
import com.pvmprog.mytextwithcompose.ui.examples.TextFontWeight
import com.pvmprog.mytextwithcompose.ui.examples.ItalicText
import com.pvmprog.mytextwithcompose.ui.examples.SimpleLimit
import com.pvmprog.mytextwithcompose.ui.examples.MultipleStylesInText
import com.pvmprog.mytextwithcompose.ui.examples.ScaleDraver
import com.pvmprog.mytextwithcompose.ui.examples.ShaderAnimation
import com.pvmprog.mytextwithcompose.ui.examples.TextInCenterBox
import com.pvmprog.mytextwithcompose.ui.examples.ShaderDriver
import com.pvmprog.mytextwithcompose.ui.examples.ShadowDriver
import com.pvmprog.mytextwithcompose.ui.examples.SimpleWithPadding
import com.pvmprog.mytextwithcompose.ui.examples.Simple
import com.pvmprog.mytextwithcompose.ui.examples.SimpleStringResource
import com.pvmprog.mytextwithcompose.ui.examples.SimpleAlignJustify
import com.pvmprog.mytextwithcompose.ui.examples.TextAlignedHeight
import com.pvmprog.mytextwithcompose.ui.examples.TextAnnotatedStringClickLink
import com.pvmprog.mytextwithcompose.ui.examples.TextBuildAnnotatedString
import com.pvmprog.mytextwithcompose.ui.examples.TextBuildAnnotatedString1
import com.pvmprog.mytextwithcompose.ui.examples.TextBuildAnnotatedString3
import com.pvmprog.mytextwithcompose.ui.examples.TextColorAny
import com.pvmprog.mytextwithcompose.ui.examples.TextFontFamalyAlternate
import com.pvmprog.mytextwithcompose.ui.examples.TextFontFamily
import com.pvmprog.mytextwithcompose.ui.examples.TypographyStyles

object DataCodeUI {
    val codeUI: List<ExampleCode> = listOf(
        ExampleCode(
            id = 0,
            title = "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç",
            comment = """
–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç |Text| —Å–æ |!String| –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.

|!–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞|:

|text|:String - –≤—ã–≤–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç
  –∏–ª–∏
|text|:AnnotatedString - —Ç–µ–∫—Å—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç–∏–ª—è–º–∏. 

|modifier| - –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã.

|color| - —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é  |!Color.Unspecified| - –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

|fontSize| - —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞.

|fontStyle| - —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞.

|fontWeight| - —Ç–æ–ª—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç–∞.

|fontFamily| - —Ç–∏–ø —à—Ä–∏—Ñ—Ç–∞.

|letterSpacing| - –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏.

|textDecoration| - —Ç–∏–ø –¥–µ–∫–æ—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ).

|textAlign| - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.

|lineHeight| - –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞.

|overflow| - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –µ–≥–æ –≤—ã—Ö–æ–¥–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. 

|softWrap| - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏. 

|maxLines| - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, —Ç–æ –æ–Ω —É—Å–µ–∫–∞–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ overflow –∏ softWrap.

|onTextLayout| - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã–ø–æ–ª–Ω—è–µ–º—É—é –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞.

|style| - —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞.
                        
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞",
                    textUrl = "\uD83D\uDCD6 Developers", //üìó üìñ
                    url = "https://developer.android.com/develop/ui/compose/text?hl=ru"
                ),
                TextClickLink(
                    text = "–®–∫–∞–ª–∞ —Å—Ç–∏–ª–µ–π",
                    textUrl = "\uD83D\uDCD6 Type scale",
                    url = "https://m3.material.io/styles/typography/type-scale-tokens"
                ),

                ),
            highlightCode = highCodeList +listOf(
                HighlightCode("Simple", Color(0xFFffc530)),
                HighlightCode("Text", Color(0xFF3CEE0A)),
            ),
            lambdaFun =  @Composable { Simple() },
            code ="""
                @Composable
                fun Simple() {
                    Text("Hello, World!")
                }
            """.trimIndent()
        ),
        ExampleCode(
            id = 1,
            title = "–¢–µ–∫—Å—Ç —Å –æ—Ç—Å—Ç—É–ø–æ–º",
            comment = """
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Modifier.|padding| –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å—Ç—É–ø–æ–≤.
–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç—Å—Ç—É–ø–æ–≤:
1)|!–æ—Ç –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏|:
fun Modifier.|padding|(
   |start|: Dp = 0.dp, 
   |top|: Dp = 0.dp, 
   |end|: Dp = 0.dp, 
   |bottom|: Dp = 0.dp
): Modifier
2)|!–ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏|:
fun Modifier.|padding|(
    |horizontal|: Dp = 0.dp, 
    |vertical|: Dp = 0.dp
): Modifier
3)|!–æ—Ç –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç–æ—Ä–æ–Ω|:
fun Modifier.|padding|(
    |all|: Dp
): Modifier
4)|!–≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ PaddingValues|:
fun Modifier.|padding|(
    |paddingValues|: PaddingValues
): Modifier
               
–í –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—Å—Ç—É–ø–æ–≤, –ø–æ—Ä—è–¥–æ–∫ –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ. –û—Ç—Å—Ç—É–ø—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏, –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–µ—Ä–≤—ã–º–∏.               

    val externalPadding = |PaddingValues|(
        |start| = 16.dp,
        |top| = 16.dp,
    )

    val innerPadding = |PaddingValues|(
        |all| = 16.dp,
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black)
    ) {
        Text(
            text = "Hello, world!",
            modifier = Modifier
                .|padding|(externalPadding)
                .background(Color.Blue)
                .|padding|(innerPadding),
            color = Color.White
        )
    }|
               
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 Compose modifiers ",
                    url = "https://developer.android.com/develop/ui/compose/modifiers?hl=ru"
                ),
            ),
            highlightCode = highCodeList + listOf(
                HighlightCode("SimpleWithPadding", Color(0xFFffc530)),
                HighlightCode("16", Color(0xFF2DB8FF)),
                HighlightCode(".padding ", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { SimpleWithPadding() },

            code ="""
@Composable
fun SimpleWithPadding() {
    Text (
        text = "Hello, World!",
        modifier = Modifier
//–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –æ—Ç—Å—Ç—É–ø —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω        
            .padding (16.dp)                   

    )
}
            """.trimIndent()
        ),
        ExampleCode(
            id = 2,
            title = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
            comment = """
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API |stringResource| –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤ –≤–∞—à–∏—Ö |!XML| —Ä–µ—Å—É—Ä—Å–∞—Ö.
                
–û–¥–∏–Ω —Ä–∞–∑ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑.

|!res/values/strings.xml|
  <|string| name="text_in_jetpack_compose">Text in jetpack Compose</string>

  <|string| name="day_of_month">There are %2${'$'}d days in %1${'$'}s</string>

|!res/values/dimens.xml|
  <|dimen| name="padding_medium">16dp</dimen>

                
            """.trimIndent(),

            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 –†–µ—Å—É—Ä—Å—ã –≤ Compose",
                    url = "https://developer.android.com/develop/ui/compose/resources?hl=ru#strings"
                ),
            ),
            highlightCode = highCodeList + listOf(
                HighlightCode("SimpleStringResource", Color(0xFFffc530)),
                HighlightCode("31", Color(0xFF2DB8FF)),
                HighlightCode(".day_of_month", Color(0xFFe48def)),
                HighlightCode("January", Color(0xFFFFEB3B)),
                HighlightCode("stringResource", Color(0xFF3CEE0A)),
                HighlightCode("dimensionResource", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { SimpleStringResource() },
            code ="""
@Composable
fun SimpleStringResource() {
    val text1 = stringResource(
        id = R.string.hello_world
    )

//–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    val text2 = stringResource(
        id = R.string.day_of_month, "January", 31
    )

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    Column(
        modifier = Modifier
            .padding (padding)
    ){
        Text (text = text1)
        Text (
            text = text2,
            modifier = Modifier
                .padding (bottom = padding)

        )
    }
}
            """.trimIndent()
        ),
        ExampleCode(
            id = 3,
            title = "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞",
            comment = """
–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º |fontSize|. 

–í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—É –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ |Int|, |Double| –∏ |Float|, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∏–ø –µ–¥–∏–Ω–∏—Ü: 
 1)|!sp| - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ –ø–∏–∫—Å–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28.sp); 
 2)|!em| - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18.em).
  
–ó–Ω–∞—á–µ–Ω–∏–µ |!TextUnit.Unspecified| —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã—Å–æ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
                
                
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞:
 |–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü|(|!22|sp)
 |–¢–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞|(|!14|sp)
 |–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ø–∏—Å–∫–æ–≤|(|!14|sp)
 |–í–∞–∂–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞|(|!16|sp)
 |–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–¥–ø–∏—Å–∏|(|!14|sp)
 |–ö–Ω–æ–ø–∫–∏, –≤–∫–ª–∞–¥–∫–∏|(|!14|sp)
 |–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞|(|!16|sp)
     
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "Material Design 3 –≤ Compose",
                    textUrl = "\uD83D\uDCD6 MaterialTheme.typography",
                    url = "https://developer.android.com/develop/ui/compose/designsystems/material3?hl=ru"
                ),
            ),

            nameFun = "",
            highlightCode = highCodeList + listOf(
                HighlightCode("ExampleFontSize", Color(0xFFffc530)),
                HighlightCode("fontSize", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { ExampleFontSize() },
            code = """
@Composable
fun ExampleFontSize() {
    val text = stringResource(
        id = R.string.hello_world
    )

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    Column(
        modifier = Modifier
            .padding (padding)
            .fillMaxWidth (),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text (
            text = text + "(default)",
            fontSize = TextUnit.Unspecified
        )
        Text (
            text = text + "(20.sp)",
            fontSize = 20.sp
        )
        Text (
            text = text + "(3.em)",
            fontSize = 3.em
        )
        Text (
            text = text + "(15.sp)",
            style = TextStyle(
                fontSize = 15.sp,
            )
        )


    }

}
            """.trimIndent()
        ),

        ExampleCode(
            id = 3,
            title = "–ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞",
            comment = """
–≠–∫–∑–µ–º–ø–ª—è—Ä |InfiniteTransition| –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏.

    val infiniteTransition = rememberInfiniteTransition()

–î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ—á–µ—Ä–Ω—é—é –∞–Ω–∏–º–∞—Ü–∏—é —Ç–∏–ø–∞ |float|, –∫–∞–∫ —á–∞—Å—Ç—å |InfiniteTransition|.

val size by
    infiniteTransition.animateFloat(
        |initialValue| = 10f, |! –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞| 
        |targetValue| = 120f, |! –ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞|
        animationSpec =
        infiniteRepeatable(
            |!// –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 10000 –º—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–≤–æ–π –∑–∞–º–µ–¥–ª–µ–Ω–∏—è LinearOutSlowInEasing|
            animation = tween(10000, easing = LinearEasing),
            |!// –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ (—Ç. –µ. –∫–∞–∂–¥—ã–µ 10000 –º—Å) –∞–Ω–∏–º–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è  —Ä–µ–≤–µ—Ä—Å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç.–µ. —Å [targetValue]|
            repeatMode = RepeatMode.Reverse
        )
    )
     
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose",
                    textUrl = "\uD83D\uDCD6 Animations in Compose ",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
            ),

            nameFun = "",
            highlightCode = highCodeList + listOf(
                HighlightCode("AnimationSizeText", Color(0xFFffc530)),
                HighlightCode("fontSize", Color(0xFF3CEE0A)),
                HighlightCode("initialValue", Color(0xFF3CEE0A)),
                HighlightCode("targetValue", Color(0xFF3CEE0A)),
                HighlightCode("10f", Color(0xFF5EADD6)),
                HighlightCode("170f", Color(0xFF5EADD6)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { AnimationSizeText() },
            code = """
@Composable
fun AnimationSizeText(
    text: String ="–® –ë",
){

    // –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä [InfiniteTransition] –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
    val infiniteTransition = rememberInfiniteTransition()

    // –°–æ–∑–¥–∞–µ—Ç –¥–æ—á–µ—Ä–Ω—é—é –∞–Ω–∏–º–∞—Ü–∏—é —Ç–∏–ø–∞ float –∫–∞–∫ —á–∞—Å—Ç—å [InfiniteTransition].
    val size by
    infiniteTransition.animateFloat(
        initialValue = 10f,
        targetValue = 170f,
        animationSpec =
        infiniteRepeatable(
            // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 5000 –º—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–≤–æ–π –∑–∞–º–µ–¥–ª–µ–Ω–∏—è LinearOutSlowInEasing
            animation = tween(20000, easing = LinearEasing),
            // –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ (—Ç. –µ. –∫–∞–∂–¥—ã–µ 5000 –º—Å) –∞–Ω–∏–º–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å [initialValue]
            repeatMode = RepeatMode.Reverse
        )
    )


    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = text,
            fontSize = size.sp,
            color = Color.White,
            fontWeight = FontWeight.ExtraBold
            )
    }

}
                
            """.trimIndent()
        ),

        ExampleCode(
            id = 4,
            title = "–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ Material 3",
            comment = """
–ù–∞–±–æ—Ä —Å—Ç–∏–ª–µ–π |Typography| –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ —Ç–µ–∫—Å—Ç–∞. 

|Typography|(

|!//–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç|
    |displayLarge|: TextStyle,   
    |displayMedium|: TextStyle, 
    |displaySmall|: TextStyle,  

|!//–ù–æ–≤–æ—Å—Ç–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π 
–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ, –≤–∞–∂–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ü–∏—Ñ—Ä.
–î–ª—è headline –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–µ—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π,–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ.|
    |headlineLarge|: TextStyle,  
    |headlineMedium|: TextStyle, 
    |headlineSmall|: TextStyle,

|!//–ó–∞–≥–æ–ª–æ–≤–æ–∫ 
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º, –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–æ –¥–ª–∏–Ω–µ. 
–®—Ä–∏—Ñ—Ç—ã —Å –∑–∞—Å–µ—á–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑ –∑–∞—Å–µ—á–µ–∫ —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–π.|
    |titleLarge|: TextStyle,     
    |titleMedium|: TextStyle,
    |titleSmall|: TextStyle,
    
|!//–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç 
–û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞.| 
    bodyLarge: TextStyle,      
    bodyMedium: TextStyle,
    bodySmall: TextStyle,
  
|!//–ú–µ—Ç–∫–∞ 
–≠—Ç–æ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∫–Ω–æ–ø–æ–∫, –∞ —Ç–∞–∫–∂–µ –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö, –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–Ω–∞—Ö –∏ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö. 
–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –±–µ–∑ –∑–∞—Å–µ—á–µ–∫, –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏.|
    |labelLarge|: TextStyle,   
    |labelMedium|: TextStyle,
    |labelSmall|: TextStyle    
    
  )
  
 |displayLarge| - —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç. 
 |labelSmall| - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —à—Ä–∏—Ñ—Ç–∞. 
 
 –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        Text(
            text = "Hello, World!",
            style = MaterialTheme.typography.|titleLarge|
        )

            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–º –∏ –∫—Ä–∞—Å–∏–≤—ã–º.",
                    textUrl = "\uD83D\uDCD6 MaterialTheme.typography",
                    url = "https://m3.material.io/styles/typography/overview"
                ),
                TextClickLink(
                    text = "–®–∫–∞–ª–∞ —Å—Ç–∏–ª–µ–π",
                    textUrl = "\uD83D\uDCD6 Type scale",
                    url = "https://m3.material.io/styles/typography/type-scale-tokens"
                ),
                TextClickLink(
                    text = "Jetpack Compose –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é",
                    textUrl = "\uD83D\uDCD6 Material Design 3 –≤ Compose",
                    url = "https://developer.android.com/develop/ui/compose/designsystems/material3?hl=ru"
                ),
            ),

            nameFun = "",
            highlightCode = highCodeList + listOf(
                HighlightCode("TypographyStyles", Color(0xFFffc530)),
                HighlightCode(".displayLarge", Color(0xFF3CEE0A)),
                HighlightCode(".displayMedium", Color(0xFF3CEE0A)),
                HighlightCode(".displaySmall", Color(0xFF3CEE0A)),
                HighlightCode(".headlineLarge", Color(0xFF3CEE0A)),
                HighlightCode(".headlineMedium", Color(0xFF3CEE0A)),
                HighlightCode(".headlineSmall", Color(0xFF3CEE0A)),
                HighlightCode(".titleLarge", Color(0xFF3CEE0A)),
                HighlightCode(".titleMedium", Color(0xFF3CEE0A)),
                HighlightCode(".titleSmall", Color(0xFF3CEE0A)),
                HighlightCode(".bodyLarge", Color(0xFF3CEE0A)),
                HighlightCode(".bodyMedium", Color(0xFF3CEE0A)),
                HighlightCode(".bodySmall", Color(0xFF3CEE0A)),
                HighlightCode(".labelLarge", Color(0xFF3CEE0A)),
                HighlightCode(".labelMedium", Color(0xFF3CEE0A)),
                HighlightCode(".labelSmall", Color(0xFF3CEE0A)),
                HighlightCode("16", Color(0xFF2DB8FF)),
                HighlightCode(".name", Color(0xFFe48def)),
                HighlightCode(".style", Color(0xFFe48def)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { TypographyStyles() },
            code = """
data class TypographyStyle(
    val name: String,
    val style:TextStyle
)

@Composable
fun TypographyStyles() {
    val listStyle = listOf(
        TypographyStyle("displayLarge", MaterialTheme.typography.displayLarge),
        TypographyStyle("displayMedium", MaterialTheme.typography.displayMedium),
        TypographyStyle("displaySmall", MaterialTheme.typography.displaySmall),
        TypographyStyle("headlineLarge", MaterialTheme.typography.headlineLarge),
        TypographyStyle("headlineMedium", MaterialTheme.typography.headlineMedium),
        TypographyStyle("headlineSmall", MaterialTheme.typography.headlineSmall),
        TypographyStyle("titleLarge", MaterialTheme.typography.titleLarge),
        TypographyStyle("titleMedium", MaterialTheme.typography.titleMedium),
        TypographyStyle("titleSmall", MaterialTheme.typography.titleSmall),
        TypographyStyle("bodyLarge", MaterialTheme.typography.bodyLarge),
        TypographyStyle("bodyMedium", MaterialTheme.typography.bodyMedium),
        TypographyStyle("bodySmall", MaterialTheme.typography.bodySmall),
        TypographyStyle("labelLarge", MaterialTheme.typography.labelLarge),
        TypographyStyle("labelMedium", MaterialTheme.typography.labelMedium),
        TypographyStyle("labelSmall", MaterialTheme.typography.labelSmall),
    )

    LazyColumn(
        modifier = Modifier
            .padding(16.dp)
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        items(listStyle) {
            Column(
                modifier = Modifier
                    .fillMaxWidth(),
                horizontalAlignment = Alignment.CenterHorizontally,
            ) {
                Text (
                    text = it.name,
                    style = it.style
                )
                Text (
                    text = "(${'$'}{it.style.fontSize})",
                )
            }
        }

    }

}
            """.trimIndent()
        ),
        ExampleCode(
            id =  5,
            title = "–°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞",
            comment = """
–°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º |fontStyle|:
 
 FontStyle.|Italic| - –Ω–∞–∫–ª–æ–Ω–Ω–Ω—ã–π (–∫—É—Ä—Å–∏–≤–Ω—ã–π) —à—Ä–∏—Ñ—Ç;
 
 FontStyle.|Normal|  - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç.
                
            """.trimIndent(),
            highlightCode = highCodeList + listOf(
                HighlightCode("ItalicText", Color(0xFFffc530)),
                HighlightCode("Normal", Color(0xFF00BCD4)),
                HighlightCode("Italic", Color(0xFF00BCD4)),
                HighlightCode("fontStyle", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { ItalicText() },
            code ="""
@Composable
fun ItalicText () {

    val text = stringResource(
        id = R.string.text_in_jetpack_compose
    )

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val modifier = Modifier
        .padding(top = 16.dp)

    Column(
        modifier = Modifier
            .padding(padding)
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        Text(
            text = text,
            modifier = modifier,
            fontStyle = FontStyle.Italic
        )

        Text(
            text = text,
            modifier = modifier,
            fontStyle = FontStyle.Normal
        )

    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
            ),

            ),
        ExampleCode(
            id =  6,
            title = "–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —à—Ä–∏—Ñ—Ç–∞",
            comment = """
–¢–æ–ª—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç–∞ –∑–∞–¥–∞–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º |fontWeight|, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å |!FontWeight|.
                        
–î–≤–∞ —Å–ø–æ—Å–æ–±–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–ª—â–∏–Ω—ã —à—Ä–∏—Ñ—Ç–∞:
 
 1)–ø–µ—Ä–µ–¥–∞—á–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1 –¥–æ 1000;
 
 2)–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã |FontWeight|:
 
    |Black| (–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—é W900)

    |Bold| (W700)

    |ExtraBold| (W800)

    |ExtraLight| (W200)

    |Light| (W300)

    |Medium| (W500)

    |Normal| (W400 - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

    |SemiBold| (W600)

    |Thin| (W100)
                          
                
            """.trimIndent(),
            highlightCode = highCodeList + listOf(
                HighlightCode("TextFontWeight", Color(0xFFffc530)),
                HighlightCode("fontWeight", Color(0xFF3CEE0A)),
                HighlightCode(".Bold", Color(0xFF00BCD4)),
                HighlightCode(".Normal", Color(0xFF00BCD4)),
                HighlightCode(".ExtraBold", Color(0xFF00BCD4)),
                HighlightCode(".Light", Color(0xFF00BCD4)),
                HighlightCode(".W100", Color(0xFF00BCD4)),
                HighlightCode(".W300", Color(0xFF00BCD4)),
                HighlightCode(".W900", Color(0xFF00BCD4)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { TextFontWeight() },
            code ="""
@Composable
fun TextFontWeight() {

    val text = stringResource(
        id = R.string.text_in_jetpack_compose
    )

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val modifier = Modifier
        .padding(top = 16.dp)

    Column(
        modifier = Modifier
            .padding(padding)
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "${'$'}text (Normal)",
            modifier = modifier,
            fontWeight = FontWeight.Normal
        )
        Text(
            text = "${'$'}text (Bold)",
            modifier = modifier,
            fontWeight = FontWeight.Bold
        )
        Text(
            text = "${'$'}text (ExtraBold)",
            modifier = modifier,
            fontWeight = FontWeight.ExtraBold
        )
        Text(
            text = "${'$'}text (Light)",
            modifier = modifier,
            fontWeight = FontWeight.Light
        )
        Text(
            text = "${'$'}text (W100)",
            modifier = modifier,
            fontWeight = FontWeight.W100
        )
        Text(
            text = "${'$'}text (W300)",
            modifier = modifier,
            fontWeight = FontWeight.W300
        )
        Text(
            text = "${'$'}text (W900)",
            modifier = modifier,
            fontWeight = FontWeight.W900
        )

    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
            ),

            ),

        ExampleCode(
            id = 19,
            title = "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫",
            comment = """
|overflow| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç –ø—Ä–∏ –µ–≥–æ –≤—ã—Ö–æ–¥–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. 

–≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ |TextOverflow|:

|Clip|: —Ç–µ–∫—Å—Ç —É—Å–µ–∫–∞–µ—Ç—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

|Ellipsis|: —Ç–µ–∫—Å—Ç —É—Å–µ–∫–∞–µ—Ç—Å—è, –∞ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ

|Visible|: –≤–µ—Å—å —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è     
                   
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. 
  –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–≤–æ–∏—Ö –≥—Ä–∞–Ω–∏—Ü —Å –ø–æ–º–æ—â—å—é |Visible|, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ Modifier.|clipToBounds|
                
            """.trimIndent(),
            highlightCode = highCodeList + listOf(
                HighlightCode("LongText", Color(0xFFffc530)),
                HighlightCode("overflow", Color(0xFF3CEE0A)),
                HighlightCode("maxLines", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { SimpleLimit() },
            code ="""
@Composable
fun SimpleLimit() {

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    LazyColumn(
        modifier = Modifier
            .border(1.dp, MaterialTheme.colorScheme.onBackground)
            .padding(padding),
    ) {
        item {
            Text(
                text = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π-–¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ".repeat(20),
                overflow = TextOverflow.Ellipsis,
                maxLines = 2,
            )

        }

    }

}
            """.trimIndent()
        ),


        ExampleCode(
            id =  7,
            title = "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |textAlign| —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ |TextAlign|. 

–í –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–≤–æ–π—Å—Ç–≤ –∫–ª–∞—Å—Å–∞ |TextAlign|:

 |!Center|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

 |!Justify|: —Ç–µ–∫—Å—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

 |!End|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–æ–Ω–µ—á–Ω–æ–º—É –∫—Ä–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–µ–≤—ã–π –∏–ª–∏ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π)

 |!Start|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –Ω–∞—á–∞–ª—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–µ–≤—ã–π –∏–ª–∏ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π)

 |!Left|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

 |!Right|: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞                        
                
            """.trimIndent(),
            highlightCode = highCodeList + listOf(
                HighlightCode("LongText", Color(0xFFffc530)),
                HighlightCode(".Left", Color(0xFF00BCD4)),
                HighlightCode(".Center", Color(0xFF00BCD4)),
                HighlightCode(".Right", Color(0xFF00BCD4)),
                HighlightCode("textAlign", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { SimpleAlign() },
            code ="""
@Composable
fun SimpleAlign() {
    val text = stringResource(
        id = R.string.hello_world
    )

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val modifier = Modifier
        .padding(top = 16.dp)
        .fillMaxWidth() // !!!

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background),
        contentAlignment = Alignment.Center
    ) {
        LazyColumn(
            modifier = Modifier
                .border(1.dp, MaterialTheme.colorScheme.onBackground)
                .padding(padding),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            item {
                Text(
                    text = text + " (Left)",
                    textAlign = TextAlign.Left,
                    modifier = modifier
                )
                Text(
                    text = text + " (Center)",
                    textAlign = TextAlign.Center,
                    modifier = modifier
                )
                Text(
                    text = text + " (Right)",
                    textAlign = TextAlign.Right,
                    modifier = modifier
                )

            }
        }
    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å –∞–±–∑–∞—Ü–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-paragraph?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. TextAlign",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/TextAlign"
                ),
            ),
        ),

        ExampleCode(
            id =  8,
            title = "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |textAlign| —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞. 

  TextAlign.|!Justify| —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.

                
            """.trimIndent(),
            highlightCode = highCodeList + listOf(
                HighlightCode("TextAlignJustify", Color(0xFFffc530)),
                HighlightCode(".Justify", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { SimpleAlignJustify() },
            code ="""
@Composable
fun SimpleAlignJustify() {

    val text = "–ë–µ–∑ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è. ".repeat(10)

    val text2 = "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. ".repeat(10)

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )


    LazyColumn(
        modifier = Modifier
            .border(1.dp, MaterialTheme.colorScheme.onBackground)
            .padding(padding),
    ) {
        item {
            //–ë–µ–∑ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            Text(text = text)
            
            Spacer(modifier = Modifier.padding(padding))

            //–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            Text(
                text = text2,
                textAlign = TextAlign.Justify,
            )

        }
    }


}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. TextAlign",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/TextAlign"
                ),
            ),

            ),
        ExampleCode(
            id =  9,
            title = "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤—ã—Å–æ—Ç–µ",
            comment = """
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏ –∫ –≤–µ—Ä—Ö—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –≤–µ—Ä—Ö—É –∏ –Ω–∏–∑—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏.         
               
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏.
               
–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–µ–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ |PlatformParagraphStyle.includeFontPadding| –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ |false|.
               
|trim| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–µ—Ä—Ö—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –≤–Ω–∏–∑—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏.

–í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è |trim|: 
 |!Both| - –û–±—Ä–µ–∑–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–µ—Ä—Ö—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –≤–Ω–∏–∑—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑-–∑–∞ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏.
                 
 |!FirstLineTop| - –û–±—Ä–µ–∑–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑-–∑–∞ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏
                  
 |!LastLineBottom| - –û–±—Ä–µ–∑–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑-–∑–∞ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏
                  
 |!None| - –µ—Ç –æ–±—Ä–µ–∑–∫–∏                
                
            """.trimIndent(),
            highlightCode = highCodeList + listOf(
                HighlightCode("TextAlignedHeight", Color(0xFFffc530)),
                HighlightCode("lineHeightStyle =", Color(0xFF3CEE0A)),
                HighlightCode("lineHeight =", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { TextAlignedHeight() },
            code ="""
@Composable
fun TextAlignedHeight() {

    val text = "–ë–µ–∑ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è. ".repeat(10)

    val text2 = "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–µ —Å—Ç—Ä–æ–∫–∏. ".repeat(10)

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, MaterialTheme.colorScheme.onBackground)
            .padding(padding),
    ) {
        item {
            Column(
                verticalArrangement = Arrangement.spacedBy(padding)
            ) {
                //–±–µ–∑ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                Text(
                    text = text,
                )

                //–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–µ
                Text(
                    text = text2,
                    style = LocalTextStyle.current.merge(
                        TextStyle(
                            lineHeight = 2.0.em,
                            platformStyle = PlatformTextStyle(
                                includeFontPadding = false
                            ),
                            lineHeightStyle = LineHeightStyle(
                                alignment = LineHeightStyle.Alignment.Center,
                                //–æ–±—Ä–µ–∑–∫–∞ –Ω–∏–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
                                trim = LineHeightStyle.Trim.LastLineBottom
                            )
                        )
                    )
                )

            }

        }

    }

}

            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. LineHeightStyle",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/LineHeightStyle"
                ),
            ),

            ),

        ExampleCode(
            id = 11,
            title = "–¢–∏–ø—ã —à—Ä–∏—Ñ—Ç–æ–≤",
            comment = """
                      
 |–¢–∏–ø —à—Ä–∏—Ñ—Ç–∞| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º |!fontFamily|
 
 |FontFamily| –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä—è–¥ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç:
 
    |!Cursive| - –∫—É—Ä—Å–∏–≤–Ω—ã–π, —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —à—Ä–∏—Ñ—Ç;
 
    |!Monospace| -  –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –≤—Å–µ –∑–Ω–∞–∫–∏ (—Ç–æ—á–Ω–µ–µ, –∫–µ–≥–µ–ª—å–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –∑–Ω–∞–∫–æ–≤) –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —à–∏—Ä–∏–Ω—É;
 
    |!Serif| - —à—Ä–∏—Ñ—Ç—ã —Å –∑–∞—Å–µ—á–∫–∞–º–∏;
 
    |!SansSerif| - —à—Ä–∏—Ñ—Ç—ã –±–µ–∑ –∑–∞—Å–µ—á–µ–∫;
 
    |!Default| - —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.

 –ü—Ä–∏–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤ –±–µ–∑ –∑–∞—Å–µ—á–µ–∫ (sans-serif):
 ‚Ä¢|Arial|
 ‚Ä¢|Verdana|

 –ü—Ä–∏–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Å –∑–∞—Å–µ—á–∫–∞–º–∏ (serif):
 ‚Ä¢|Times New Roman|


–®—Ä–∏—Ñ—Ç—ã |Serif| —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç—å —Ç—Ä–∞–¥–∏—Ü–∏—è–º.

–®—Ä–∏—Ñ—Ç—ã |Sans Serif| —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É—é—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å, –¥–∏–Ω–∞–º–∏—á–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å. –ß–∞—Å—Ç–æ —ç—Ç–∏ —à—Ä–∏—Ñ—Ç—ã –∞—Å—Å–æ—Ü–∏–∏—Ä—É—é—Ç—Å—è —Å –º–∏–Ω–∏–º–∞–ª–∏–∑–º–æ–º –∏ –ª—ë–≥–∫–æ—Å—Ç—å—é: –æ–Ω–∏ –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã, –≤—ã–≥–ª—è–¥—è—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ |Sans Serif| –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ |!–∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏|: –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏—è –±–µ–∑ –∑–∞—Å–µ—á–µ–∫ –ø—Ä–æ—â–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É—é—Ç—Å—è.

|!–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞|:

1.–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 3-4 —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

2.–ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —à—Ä–∏—Ñ—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –æ—á–µ–Ω—å –≤–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π.

3.Sans-serif —à—Ä–∏—Ñ—Ç—ã —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

                
            """.trimIndent(),
            highlightCode = highCodeList +  listOf(
                HighlightCode("TextFontFamily", Color(0xFFffc530)),
                HighlightCode(".Serif", Color.Yellow),
                HighlightCode(".SansSerif", Color.Yellow),
                HighlightCode(".Cursive", Color.Yellow),
                HighlightCode(".Monospace", Color.Yellow),
                HighlightCode(".Default", Color.Yellow),
                HighlightCode("fontFamily =", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { TextFontFamily() },
            code ="""
@Composable
fun TextFontFamily() {

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val style = MaterialTheme.typography.bodyMedium.merge(
        TextStyle(
            fontSize = 20.sp,
            textAlign = TextAlign.Center,
            //—à—Ä–∏—Ñ—Ç —Å –∑–∞—Å–µ—á–∫–∞–º–∏
            fontFamily = FontFamily.Serif
        )
    )

    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, MaterialTheme.colorScheme.onBackground)
            .padding(padding),
        horizontalAlignment = Alignment.CenterHorizontally

    ) {
        item {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(padding)
            ) {
                Text(
                    text = "Text in jetpack Compose\n(Serif)",
                    //—à—Ä–∏—Ñ—Ç —Å –∑–∞—Å–µ—á–∫–∞–º–∏
                    style = style,
                )

                Text(
                    text = "Text in jetpack Compose\n(SansSerif)",
                    style = style.merge(
                        TextStyle(
                            //—à—Ä–∏—Ñ—Ç –±–µ–∑ –∑–∞—Å–µ—á–µ–∫
                            fontFamily = FontFamily.SansSerif
                        )
                    )
                )

                Text(
                    text = "Text in jetpack Compose\n(Cursive)",
                    style = style.merge(
                        TextStyle(
                            //–∫—É—Ä—Å–∏–≤–Ω—ã–π, —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —à—Ä–∏—Ñ—Ç
                            fontFamily = FontFamily.Cursive
                        )
                    )
                )

                Text(
                    text = "Text in jetpack Compose\n(Monospace)",
                    style = style.merge(
                        TextStyle(
                            //–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
                            //(–≤—Å–µ –∑–Ω–∞–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —à–∏—Ä–∏–Ω—É)
                            fontFamily = FontFamily.Monospace
                        )
                    )
                )

                Text(
                    text = "Text in jetpack Compose\n(Default)",
                    style = style.merge(
                        TextStyle(
                            //—à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
                            fontFamily = FontFamily.Default
                        )
                    )
                )

            }

        }

    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –†–∞–±–æ—Ç–∞ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏",
                    url = "https://developer.android.com/develop/ui/compose/text/fonts?hl=ru"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. FontFamily",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/text/font/FontFamily#summary"
                ),
            ),

            ),

        ExampleCode(
            id = 12,
            title = "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã",
            comment = """
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã —Å –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ 
 |!res/font|
 
–í—ã–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç –º–æ–∂–Ω–æ –∏–∑ —Å–∞–π—Ç–∞ |!Google Fonts| –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –ø–∞–ø–∫—É 
 |!res/font|, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏–≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ.

–í —Ñ–∞–π–ª–µ |!ui/theme/Type.kt| 
–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π —à—Ä–∏—Ñ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:

//—à—Ä–∏—Ñ—Ç –∫—É—Ä—Å–∏–≤–Ω—ã–π –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã    
|val Cormorantinfant = FontFamily(
    Font(R.font.cormorantinfant_regular, FontWeight.Normal),
    Font(R.font.cormorantinfant_medium, FontWeight.Medium),
    Font(R.font.cormorantinfant_bold, FontWeight.Bold),
    Font(R.font.cormorantinfant_light, FontWeight.Light),
    Font(R.font.cormorantinfant_italic, FontWeight.Normal,FontStyle.Italic),
    Font(R.font.cormorantinfant_mediumitalic, FontWeight.Medium,FontStyle.Italic),
    Font(R.font.cormorantinfant_bolditalic, FontWeight.Bold,FontStyle.Italic),
    Font(R.font.cormorantinfant_lightitalic, FontWeight.Light,FontStyle.Italic),
)|
                   
            """.trimIndent(),
            highlightCode = highCodeList + listOf(
                HighlightCode("TextFontFamalyAlternate", Color(0xFFffc530)),
                HighlightCode("fontFamily", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { TextFontFamalyAlternate() },
            code ="""
/*
                 –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã

 ui/theme/Type.kt

    val Cabin = FontFamily(
        Font(R.font.cabin_regular, FontWeight.Normal),
        Font(R.font.cabin_bold, FontWeight.Bold)
    )

    val Poppins = FontFamily(
        Font(R.font.poppins_medium, FontWeight.Medium),
        Font(R.font.poppins_regular, FontWeight.Normal),
        Font(R.font.poppins_bold, FontWeight.Bold)
    )

    val AbrilFatface = FontFamily(
        Font(R.font.abril_fatface_regular)
    )

    val Alice = FontFamily(
        Font(R.font.alice_regular)
    )

//—à—Ä–∏—Ñ—Ç –∫—É—Ä—Å–∏–≤–Ω—ã–π –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    val Cormorantinfant = FontFamily(
        Font(R.font.cormorantinfant_regular, FontWeight.Normal),
        Font(R.font.cormorantinfant_medium, FontWeight.Medium),
        Font(R.font.cormorantinfant_bold, FontWeight.Bold),
        Font(R.font.cormorantinfant_light, FontWeight.Light),
        Font(R.font.cormorantinfant_italic, FontWeight.Normal,FontStyle.Italic),
        Font(R.font.cormorantinfant_mediumitalic, FontWeight.Medium,FontStyle.Italic),
        Font(R.font.cormorantinfant_bolditalic, FontWeight.Bold,FontStyle.Italic),
        Font(R.font.cormorantinfant_lightitalic, FontWeight.Light,FontStyle.Italic),
    )

 */

data class FontExample(
    val nameFont: String = "",
    val style: TextStyle = TextStyle()
)

@Composable
fun TextFontFamalyAlternate() {

    val style = MaterialTheme.typography.bodyMedium.merge(
        TextStyle(
            fontSize = 18.sp,
            textAlign = TextAlign.Start,
            fontStyle = FontStyle.Normal
        )
    )

    val fonts = listOf(
        FontExample(
            nameFont = "Serif",
            style = style.merge(
                TextStyle(
                    fontFamily = FontFamily.Serif
                )
            )
        ),
        FontExample(
            nameFont = "Cabin",
            style = style.merge(
                TextStyle(
                    fontFamily = Cabin
                )
            )
        ),
        FontExample(
            nameFont = "Poppins",
            style = style.merge(
                TextStyle(
                    fontFamily = Poppins
                )
            )
        ),
        FontExample(
            nameFont = "AbrilFatface",
            style = style.merge(
                TextStyle(
                    fontFamily = AbrilFatface
                )
            )
        ),
        FontExample(
            nameFont = "Alice",
            style = style.merge(
                TextStyle(
                    fontFamily = Alice
                )
            )
        ),
        FontExample(
            nameFont = "Cormorantinfant",
            style = style.merge(
                TextStyle(
                    fontFamily = Cormorantinfant
                )
            )
        ),
    )


    val text = "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã."

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )


    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, MaterialTheme.colorScheme.onBackground)
            .padding(padding),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(padding)

    ) {
        items(fonts){
            val nameFont = it.nameFont
            val styleText = it.style
            Text(
                text = "${'$'}text (${'$'}nameFont)",
                style = styleText
            )

            Text(
                text = "${'$'}text - Italic",
                style = styleText.merge(
                    TextStyle(
                        fontStyle = FontStyle.Italic
                    )
                )
            )

            Text(
                text = "${'$'}text - Bold",
                style = styleText.merge(
                    TextStyle(
                        fontWeight = FontWeight.Bold,
                    )
                )
            )

            Spacer(modifier = Modifier.height(padding))

        }

    }

}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –†–∞–±–æ—Ç–∞ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏",
                    url = "https://developer.android.com/develop/ui/compose/text/fonts?hl=ru"
                ),
                TextClickLink(
                    text = "–í—ã–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç –º–æ–∂–Ω–æ —Å ",
                    textUrl = "\uD83D\uDCD6 Google Fonts",
                    url = "https://fonts.google.com/?hl=ru"
                ),
                TextClickLink(
                    text = "Playwrite ‚Äî —ç—Ç–æ –Ω–æ–≤–æ–µ —Å—É–ø–µ—Ä—Å–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤, –ø–æ–º–æ–≥–∞—é—â–µ–µ —É—á–∞—â–∏–º—Å—è –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –∏–∑—É—á–∞—Ç—å –ø–æ—á–µ—Ä–∫.",
                    textUrl = "\uD83D\uDCD6 Google Fonts blog",
                    url = "https://fonts.googleblog.com/"
                ),
            ),

            ),


        ExampleCode(
            id = 5,
            title = "–¶–≤–µ—Ç,–∫–æ–Ω—Ç–∞—Å—Ç–Ω–æ—Å—Ç—å",
            comment = """
–ó–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä |color|.

–ó–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä Modifier.|background|.
                        
–ï—Å–ª–∏ |Color| –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (|!Unspecified|).

–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å—Ç–∏–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ü–≤–µ—Ç–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è |!LocalContentColor| —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º |!LocalContentAlpha|. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—É, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è |!–∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ü–≤–µ—Ç–∞–º —Ñ–æ–Ω–∞| –∏ –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å |!–∫–æ–Ω—Ç—Ä–∞—Å—Ç| –∏ |!–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å|.
                
–õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–∞ |MaterialTheme|. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ü–≤–µ—Ç–∞–º –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ |!MaterialTheme.colorScheme|

–ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å |–∫–æ–Ω—Ç–∞—Å—Ç–Ω–æ—Å—Ç—å| —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞.

–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ —á–∏—Å—Ç—ã—Ö —Ü–≤–µ—Ç–æ–≤. 

–ö–∞–∫ –±–µ–ª—ã–π –∏ —á—ë—Ä–Ω—ã–π —è–≤–ª—è—é—Ç —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å–≤–µ—Ç–ª–æ–≥–æ –∏ —Ç—ë–º–Ω–æ–≥–æ, —Ç–∞–∫ –∏ –ø–µ—Ä–≤–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞, –∂—ë–ª—Ç—ã–π, —Å–∏–Ω–∏–π –∏ –∫—Ä–∞—Å–Ω—ã–π, –Ω–∞–¥–µ–ª–µ–Ω—ã —Å–≤–æ–π—Å—Ç–≤–æ–º –Ω–∞–∏–±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, —Å–æ–∑–¥–∞—é—â–µ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Å–∏–ª—ã –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. 

–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –æ—Å–ª–∞–±–µ–≤–∞–µ—Ç –æ—Ç –ø–µ—Ä–≤–∏—á–Ω—ã—Ö ‚Äî –∫ —Ü–≤–µ—Ç–∞–º —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞.

(–∏–∑ –∫–Ω–∏–≥–∏ –ò—Ç—Ç–µ–Ω–∞).

            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. Color",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/Color"
                ),
                TextClickLink(
                    text = "Material Design 3 –≤ Compose",
                    textUrl = "\uD83D\uDCD6 –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º",
                    url = "https://developer.android.com/develop/ui/compose/designsystems/material3?hl=ru"
                ),
                TextClickLink(
                    text = "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ",
                    textUrl = "\uD83D\uDCD6 Developers.Codelabs",
                    url = "https://codelabs.developers.google.com/visualize-dynamic-color#0"
                ),
                TextClickLink(
                    text = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤ ",
                    textUrl = "\uD83D\uDCD6 ImageColorPicker.com",
                    url = "https://imagecolorpicker.com/color-contrast-checker/000000-ef1515"
                ),
                TextClickLink(
                    text = "–¶–≤–µ—Ç–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ ",
                    textUrl = "\uD83D\uDCD6 ImageColorPicker.com",
                    url = "https://imagecolorpicker.com/color-code/22200d"
                ),
                TextClickLink(
                    text = "–¢–µ–æ—Ä–∏—è —Ü–≤–µ—Ç–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç ",
                    textUrl = "\uD83D\uDCD6 Datasakura. –•–∞–±—Ä ",
                    url = "https://habr.com/ru/articles/494750/"
                ),
                TextClickLink(
                    text = "–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞ ",
                    textUrl = "\uD83D\uDCD6 W3C Recommendation 11 December 2008 ",
                    url = "https://www.w3.org/TR/WCAG20/"
                ),
                TextClickLink(
                    text = "–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å –ø–æ–º–æ—â—å—é SASS ",
                    textUrl = "\uD83D\uDCD6 Datasakura. –•–∞–±—Ä ",
                    url = "https://ru.hexlet.io/blog/posts/chto-nuzhno-znat-o-kontraste-teksta-i-kak-kontrolirovat-kontrast-s-pomoschyu-sass#primer-vychisleniya-koeffitsient-kontrasta"
                ),
                TextClickLink(
                    text = "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ü–≤–µ—Ç–æ–≤ –û–Ω–ª–∞–π–Ω",
                    textUrl = "\uD83D\uDCD6 Color Scheme ",
                    url = "https://colorscheme.ru/color-converter.html"
                ),
                TextClickLink(
                    text = "–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ –¥–≤—É–º —Ü–≤–µ—Ç–∞–º. Kotlin –ø—Ä–æ–≥—Ä–∞–º–º–∞. ",
                    textUrl = "\uD83D\uDCD6 play.kotlinlang.org ",
                    url = "https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS44LjIxIiwiY29kZSI6ImltcG9ydCBqYXZhLnV0aWwuKlxuaW1wb3J0IGphdmEubWF0aC4qXG5pbXBvcnQgamF2YS5hd3QuQ29sb3JcblxuLy9pbnB1dDogYzggPSAwLi4yNTVcbi8vb3V0cHV0OiBjID0gMC4uMVxuLy/QntC/0YDQtdC00LXQu9C10L3QuNC1INC70LjQvdC10LnQvdC+0LPQviDQt9C90LDRh9C10L3QuNGPINC60L7QvNC/0L7QvdC10L3RgtGLINGG0LLQtdGC0LBcbmZ1biBjb2xvcl9jb21wb25lbnRzKGM4OkludCk6RmxvYXQge1xuICAgIHZhciBjU3JnYjpGbG9hdCA9IGM4LnRvRmxvYXQoKS8yNTVcbiAgICBcbiAgICBpZiAoY1NyZ2IgPiAwLjAzOTI4KXtcbiAgICAgICAgdmFsIGMgPSAoY1NyZ2IrMC4wNTUpLzEuMDU1XG4gICAgICAgIGNTcmdiID0gTWF0aC5wb3coYywyLjQpLnRvRmxvYXQoKVxuICAgIH0gXG4gICAgIGVsc2UgY1NyZ2IgPSAoY1NyZ2IvMTIuOTIpLnRvRmxvYXQoKVxuICAgIFxuICAgIHJldHVybiBjU3JnYlxufVxuXG4vL9Cy0YvRh9C40YHQu9C10L3QuNGPINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QvtC5INGP0YDQutC+0YHRgtC4XG5mdW4gY2FsY3VsYXRfYnJpZ2h0bmVzcyhyOkZsb2F0LGc6RmxvYXQsYjpGbG9hdCkgPSAwLjIxMjYgKiByICsgMC43MTUyICogZyArIDAuMDcyMiAqIGJcblxuLy/QstGL0YfQuNGB0LvQtdC90LjRjyDQutC+0Y3RhNGE0LjRhtC40LXQvdGCINC60L7QvdGC0YDQsNGB0YLQsFxuZnVuIGNvbnRyYXN0X3JhdGlvX2NhbGN1bGF0aW9uKGNvbG9yMTpDb2xvcixjb2xvcjI6Q29sb3IpOkZsb2F0e1xuICAgIFxuICAgIHZhciByID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjEucmVkKSBcbiAgICB2YXIgZyA9IGNvbG9yX2NvbXBvbmVudHMoY29sb3IxLmdyZWVuKVxuICAgIHZhciBiID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjEuYmx1ZSlcbiAgICBcbiAgICB2YWwgbDEgPSBjYWxjdWxhdF9icmlnaHRuZXNzKHIsZyxiKVxuXG4gICAgciA9IGNvbG9yX2NvbXBvbmVudHMoY29sb3IyLmdldFJlZCgpKSBcbiAgICBnID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjIuZ2V0R3JlZW4oKSlcbiAgICBiID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjIuZ2V0Qmx1ZSgpKVxuICAgIFxuICAgIHZhbCBsMiA9IGNhbGN1bGF0X2JyaWdodG5lc3MocixnLGIpXG5cbiAgICBcbiAgICB2YWwgY29udHJhc3RfcmF0aW8gPSBpZiAobDE+bDIpICgobDEgKyAwLjA1KS8obDIgKyAwLjA1KSkudG9GbG9hdCgpXG4gICAgZWxzZSAoKGwyICsgMC4wNSkvKGwxICsgMC4wNSkpLnRvRmxvYXQoKVxuICAgIFxuICAgIHJldHVybiBjb250cmFzdF9yYXRpb1xufVxuXG5mdW4gbWFpbigpIHtcblxuLy8g0KbQstC10YIg0YTQvtC90LA6IENvbG9yKDB4RkYyMDFCMTYpICByZ2IoMzIsIDI3LCAyMikgIFxuICAgIHZhbCBoZXhDb2xvcjEgPSBcIiMyMDFCMTZcIlxuICAgIHZhbCBjb2xvcjEgPSBDb2xvci5kZWNvZGUoaGV4Q29sb3IxKVxuLy8g0KbQstC10YIg0YLQtdC60YHRgtCwOiBDb2xvcigweEZGRUJFMEQ5KSAgcmdiKDIzNSwgMjI0LCAyMTcpICBcbiAgICB2YWwgaGV4Q29sb3IyID0gXCIjRUJFMEQ5XCJcbiAgICB2YWwgY29sb3IyID0gQ29sb3IuZGVjb2RlKGhleENvbG9yMilcbiAgICBcbiAgICB2YWwgaz0gY29udHJhc3RfcmF0aW9fY2FsY3VsYXRpb24oY29sb3IxLGNvbG9yMilcbiAgICBwcmludGxuKFwi0KbQstC10YIg0YTQvtC90LA6ICAgJGhleENvbG9yMVwiKSAgXG4gICAgcHJpbnRsbihcItCm0LLQtdGCINGC0LXQutGB0YLQsDogJGhleENvbG9yMlwiKSAgXG4gICAgcHJpbnRsbihcIiDQmtC+0L3RgtGA0LDRgdGC0L3QvtGB0YLRjDogJGtcIikgIFxuICAgIFxufSIsInBsYXRmb3JtIjoiamF2YSIsImFyZ3MiOiIifQ=="
                ),
                TextClickLink(
                    text = "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö —Ü–≤–µ—Ç–æ–≤ ",
                    textUrl = "\uD83D\uDCD6 –û–Ω–ª–∞–π–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ",
                    url = "https://planetcalc.ru/7779/"
                ),
            ),

            highlightCode = highCodeList + listOf(
                HighlightCode("TextColorAny", Color(0xFFffc530)),
                HighlightCode("color = ", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { TextColorAny() },
            code ="""   
@Composable
fun TextColorAny() {

    LazyColumn(
        modifier = Modifier
            .padding(8.dp)
            .fillMaxWidth()
            .background(Color(0xFF201B16))
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
    ) {
        item {
            Column(
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:17.08 (–û—Ç–ª–∏—á–Ω—ã–π)",
                    color = Color(0xFFEBE0D9),
                    fontSize = 18.sp
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:5.44 (–•–æ—Ä–æ—à–∏–π)",
                    color = Color.Red,
                    fontSize = 18.sp
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:4.16 (–ü–ª–æ—Ö–æ–π)",
                    color = colorResource(id = R.color.red700),
                    fontSize = 18.sp
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:2.14 (–ü–ª–æ—Ö–æ–π)",
//–ò–∑ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ SRGB. –ê–ª—å—Ñ–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
                    color = Color(
                        red = 0x44,   //between 0 and 255
                        green = 0x55,
                        blue = 0x88,
                        alpha = 0xFF
                    ),
                    fontSize = 18.sp
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:2.67 (–ü–ª–æ—Ö–æ–π)", //32-bit ARGB color
                    color = Color(0xFF993399),
                    fontSize = 18.sp
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:12.44 (–û—Ç–ª–∏—á–Ω—ã–π)",
                    fontSize = 18.sp,
                    style = TextStyle(
                        color = Color.Green,
                    )
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:8.59 (–•–æ—Ä–æ—à–∏–π)",
                    style = TextStyle(
                        color = Color.Yellow,
                        background = Color.Blue
                    ),
                    fontSize = 18.sp,
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:16.40 (–û—Ç–ª–∏—á–Ω—ã–π)",
                    modifier = Modifier
                        .background(Color(0xff22200d)),
                    color = Color(0xffffff00),
                    fontSize = 18.sp,
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:7.41 (–•–æ—Ä–æ—à–∏–π)",
                    modifier = Modifier
                        .background(MaterialTheme.colorScheme.secondary),
                    color = MaterialTheme.colorScheme.onSecondary,
                    fontSize = 18.sp,
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:7.55 (–•–æ—Ä–æ—à–∏–π)",
                    modifier = Modifier
                        .background(MaterialTheme.colorScheme.secondaryContainer),
                    color = MaterialTheme.colorScheme.onSecondaryContainer,
                    fontSize = 18.sp,
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:9.31 (–•–æ—Ä–æ—à–∏–π)",
                    modifier = Modifier
                        .background(MaterialTheme.colorScheme.tertiaryContainer),
                    color = MaterialTheme.colorScheme.onTertiaryContainer,
                    fontSize = 18.sp,
                )

                Text (
                    text = "–ö–æ–Ω—Ç—Ä–∞—Å—Ç:21.00 (–û—Ç–ª–∏—á–Ω—ã–π)",
                    modifier = Modifier
                        .background(Color(0xff000000)),
                    color = Color(0xffffffff),
                    fontSize = 18.sp,
                )

            }
        }


    }
}
            """.trimIndent()
        ),
        ExampleCode(
            id = 20,
            title = "–¶–≤–µ—Ç —Ñ–æ–Ω–∞ ",
            comment = """
–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä Modifier.|background|(color) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∫–æ–º–ø–æ–Ω—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.

–ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç –±—ã–ª —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω.

–õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—á–∏—Ç–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ MaterialTheme.|colorScheme|, –Ω–∞–ø—Ä–∏–º–µ—Ä:
  
  –î–ª—è —Ñ–æ–Ω–∞                   –î–ª—è —Ç–µ–∫—Å—Ç–∞
    primary                onPrimary
    primaryContainer       onPrimaryContainer
    secondary              onSecondary
    secondaryContainer     onSecondaryContainer
    tertiary               onTertiary
    tertiaryContainer      onTertiaryContainer
  
  
      |–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞|

–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É |Web Content Accessibility Guidelines| (WCAG), –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ: 

    |(L1 + 0,05) / (L2 + 0,05)|, 
–≤ –∫–æ—Ç–æ—Ä–æ–π: 
 |L1| ‚Äî –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å |—Å–∞–º–æ–≥–æ —Å–≤–µ—Ç–ª–æ–≥–æ| —Ü–≤–µ—Ç–∞. 
 |L2| ‚Äî –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å |—Å–∞–º–æ–≥–æ —Ç—ë–º–Ω–æ–≥–æ| —Ü–≤–µ—Ç–∞.


|!–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏|:

1)–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –Ω–µ –º–µ–Ω–µ–µ |4.5|. 
–í –∏–¥–µ–∞–ª–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ |7|.

2)–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–µ–Ω–µ–µ |3|. 
–í –∏–¥–µ–∞–ª–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ |4.5|. 

|!–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ|:
–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç —Ä–∞–∑–º–µ—Ä–æ–º –≤ |18| –ø–∏–∫—Å–µ–ª–µ–π, –ª–∏–±–æ |14| –ø–∏–∫—Å–µ–ª–µ–π —Å –ø–æ–ª—É–∂–∏—Ä–Ω—ã–º –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏–µ–º.


     |–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏|

 –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç—å—é —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç –Ω—É–ª—è –¥–æ –µ–¥–∏–Ω–∏—Ü—ã, 
–≥–¥–µ 0 - —á—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç, 
    1 - –±–µ–ª—ã–π —Ü–≤–µ—Ç. 

 –ö–∞–∂–¥–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ü–≤–µ—Ç–∞ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ C8, –Ω–∞—Ö–æ–¥—è—â–µ–µ—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 255 
( C8 = {R8 - –∫—Ä–∞—Å–Ω—ã–π, G8 - –∑–µ–ª–µ–Ω—ã–π, B8 - —Å–∏–Ω–∏–π}).
  
 –ü–µ—Ä–µ–≤–µ–¥–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–≤–µ—Ç–∞ –∏–∑ —Ü–µ–ª—ã—Ö –≤ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0..1:
 |Csrgb| = C8/255, –≥–¥–µ C8 = { R8, G8, B8 }

 –ù–∞–π–¥–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–≤–µ—Ç–∞ –ª–∏–Ω–µ–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ C = { R,G,B }:
 |C = ((Csrgb+0.055)/1.055)^2.4| , 
    –µ—Å–ª–∏ |Csrgb > 0.03928|
–∏–ª–∏
 |C = Csrgb/12.92|, 
     –µ—Å–ª–∏ |Csrgb <= 0.03928|

–ò—Å–ø–æ–ª—å–∑—É—è –ª–∏–Ω–µ–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–≤–µ—Ç–∞ C={R, G, B} –ø–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —è—Ä–∫–æ—Å—Ç—å —Ü–≤–µ—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
L = 0.2126R + 0.7152G + 0.0722B

–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º—É–ª–µ, –æ—Ç—Ä–∞–∂–∞—é—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≥–ª–∞–∑–∞ –∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Å–≤–µ—Ç–∞: –∑–µ–ª–µ–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–≤–µ—Ç–∞ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —è—Ä–∫–æ, –∫—Ä–∞—Å–Ω–∞—è - –º–µ–Ω–µ–µ –∏ —Å–∏–Ω—è—è –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ.


    |–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞|
    
 –¶–≤–µ—Ç —Ñ–æ–Ω–∞:   .background(Color(0xFF201B16)) 
  rgb(32, 27, 22)
    
R_sRGB = 32 / 255 = 0,12
G_sRGB = 27 / 255 = 0,10
B_sRGB = 22 / 255 = 0,09   

 R_sRGB < 0,03928 , —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ 
     |R| = 0,12 / 12,92 =  |!0,009|
 G_sRGB < 0,03928 , —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ 
     |G| = 0,10 / 12,92 =  |!0,008|
 B_sRGB < 0,03928 , —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ 
     |B| = 0,09 / 12,92 =  |!0,007|

–ò—Å—Ö–æ–¥—è –∏–∑ —Ñ–æ—Ä–º—É–ª—ã
  L = 0,2126 * R + 0,7152 * G + 0,0722 * B

 |L1| = 0.2126 * |0,009| + 0.7152 * |0,008| + 0.0722 * |0,007| = 0.0081404     
   
 –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: color = Color(0xFFEBE0D9)
 rgb(235, 224, 217)
    
R_sRGB = 235 / 255 = 0,92
G_sRGB = 224 / 255 = 0,88
B_sRGB = 217 / 255 = 0,85  

 –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è > 0,03928 ,—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
 r = ((0.92 + 0.055) / 1.055)
 g = ((0.88 + 0.055) / 1.055)
 b = ((0.85 + 0.055) / 1.055)

 R = Math.pow(r,2.4) = 0.8276
 G = Math.pow(g,2.4) = 0.7484
 B = Math.pow(b,2.4) = 0.6921
 
 L = 0,2126 * R + 0,7152 * G + 0,0722 * B
 
 |L2| = 0.2126 * |0.8276| + 0.7152 * |0.7484| + 0.0722 * |0.6921| = 0.76117306          

 k  = (L2+ 0,05) / (L1 + 0,05)
 
 k  = (0.76117306 + 0,05)/(0.0081404 + 0,05)=13.9604
 
"–ö–æ–Ω—Ç—Ä–∞—Å—Ç:17.08 (–û—Ç–ª–∏—á–Ω—ã–π)"    


                
                
            """.trimIndent(),
            highlightCode = highCodeList +  listOf(
                HighlightCode("BackgroundDriver", Color(0xFFffc530)),
                HighlightCode("color = ", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { BackgroundDriver() },
            code ="""
@Composable
fun BackgroundDriver(
    message: String = stringResource(R.string.text_compose),

    ){

    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    val fontSize = remember {
        mutableFloatStateOf(35f)
    }

    var indexColor by remember { mutableIntStateOf(-1) }

    var colorBg by remember {
        mutableStateOf(DataColor.colors[8])
    }
    var colorTx by remember {
        mutableStateOf(DataColor.colors[12])
    }

    Column(
        modifier = Modifier
            .fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(padding)
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .border(1.dp, Color.White)
                .background(color = colorBg)
                .widthIn(min = 150.dp)
                .padding(padding),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = message,
                modifier = Modifier
                    .padding(16.dp),
                style = TextStyle(
                    textAlign = TextAlign.Center,
                    fontFamily = Alice,
                    fontSize = fontSize.floatValue.sp,
                    lineHeight = fontSize.floatValue.sp,
                    color = colorTx
                ),
            )
        }

        val k = contrast_ratio_calculation(colorTx,colorBg)

        val status = stringResource(id = R.string.—Åontrast,k) + contrast_ratio_comment(k)
    
        Text(
            text = status,
            textAlign = TextAlign.Center,
            fontSize = 20.sp
        )
        LazyColumn(
            modifier = Modifier
                .fillMaxWidth()
                .padding(padding),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            item {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(padding)
                ) {
                    if (indexColor == -1){

                        SliderSimple("size",fontSize,10f,50f)

                        Row(
                            modifier = Modifier
                                .padding(padding)
                                .widthIn(max = 250.dp),
                            horizontalArrangement = Arrangement.SpaceAround,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Box(
                                modifier = Modifier
                                    .padding(padding)
                                    .border(1.dp, MaterialTheme.colorScheme.onBackground)
                                    .background(colorBg)
                                    .size(40.dp)
                                    .clickable {
                                        indexColor = 0
                                    }
                            )
                            Box(
                                modifier = Modifier
                                    .padding(padding)
                                    .border(1.dp, MaterialTheme.colorScheme.onBackground)
                                    .background(colorTx)
                                    .size(40.dp)
                                    .clickable {
                                        indexColor = 1
                                    }
                            )
                        }
                    } else{
                        ColorSelect(
                            colorCurrent = when(indexColor){
                                0 -> colorBg
                                else -> colorTx
                            },
                            onColorSelect ={
                                when(indexColor){
                                    0 -> colorBg = it
                                    else -> colorTx= it
                                }
                                indexColor = -1
                            },
                            title = when(indexColor){
                                0 -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞"
                                else -> "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                            },

                        )

                    }


                }

            }

        }
    }
}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–¢–µ–æ—Ä–∏—è —Ü–≤–µ—Ç–∞, –∫–æ–Ω—Ç—Ä–∞—Å—Ç ",
                    textUrl = "\uD83D\uDCD6 Datasakura. –•–∞–±—Ä ",
                    url = "https://habr.com/ru/articles/494750/"
                ),
                TextClickLink(
                    text = "–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞ ",
                    textUrl = "\uD83D\uDCD6 W3C Recommendation 11 December 2008 ",
                    url = "https://www.w3.org/TR/WCAG20/"
                ),
                TextClickLink(
                    text = "–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å –ø–æ–º–æ—â—å—é SASS ",
                    textUrl = "\uD83D\uDCD6 Datasakura. –•–∞–±—Ä ",
                    url = "https://ru.hexlet.io/blog/posts/chto-nuzhno-znat-o-kontraste-teksta-i-kak-kontrolirovat-kontrast-s-pomoschyu-sass#primer-vychisleniya-koeffitsient-kontrasta"
                ),
                TextClickLink(
                    text = "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ü–≤–µ—Ç–æ–≤ –û–Ω–ª–∞–π–Ω",
                    textUrl = "\uD83D\uDCD6 Color Scheme ",
                    url = "https://colorscheme.ru/color-converter.html"
                ),
                TextClickLink(
                    text = "–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ –¥–≤—É–º —Ü–≤–µ—Ç–∞–º. Kotlin –ø—Ä–æ–≥—Ä–∞–º–º–∞. ",
                    textUrl = "\uD83D\uDCD6 play.kotlinlang.org ",
                    url = "https://play.kotlinlang.org/#eyJ2ZXJzaW9uIjoiMS44LjIxIiwiY29kZSI6ImltcG9ydCBqYXZhLnV0aWwuKlxuaW1wb3J0IGphdmEubWF0aC4qXG5pbXBvcnQgamF2YS5hd3QuQ29sb3JcblxuLy9pbnB1dDogYzggPSAwLi4yNTVcbi8vb3V0cHV0OiBjID0gMC4uMVxuLy/QntC/0YDQtdC00LXQu9C10L3QuNC1INC70LjQvdC10LnQvdC+0LPQviDQt9C90LDRh9C10L3QuNGPINC60L7QvNC/0L7QvdC10L3RgtGLINGG0LLQtdGC0LBcbmZ1biBjb2xvcl9jb21wb25lbnRzKGM4OkludCk6RmxvYXQge1xuICAgIHZhciBjU3JnYjpGbG9hdCA9IGM4LnRvRmxvYXQoKS8yNTVcbiAgICBcbiAgICBpZiAoY1NyZ2IgPiAwLjAzOTI4KXtcbiAgICAgICAgdmFsIGMgPSAoY1NyZ2IrMC4wNTUpLzEuMDU1XG4gICAgICAgIGNTcmdiID0gTWF0aC5wb3coYywyLjQpLnRvRmxvYXQoKVxuICAgIH0gXG4gICAgIGVsc2UgY1NyZ2IgPSAoY1NyZ2IvMTIuOTIpLnRvRmxvYXQoKVxuICAgIFxuICAgIHJldHVybiBjU3JnYlxufVxuXG4vL9Cy0YvRh9C40YHQu9C10L3QuNGPINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QvtC5INGP0YDQutC+0YHRgtC4XG5mdW4gY2FsY3VsYXRfYnJpZ2h0bmVzcyhyOkZsb2F0LGc6RmxvYXQsYjpGbG9hdCkgPSAwLjIxMjYgKiByICsgMC43MTUyICogZyArIDAuMDcyMiAqIGJcblxuLy/QstGL0YfQuNGB0LvQtdC90LjRjyDQutC+0Y3RhNGE0LjRhtC40LXQvdGCINC60L7QvdGC0YDQsNGB0YLQsFxuZnVuIGNvbnRyYXN0X3JhdGlvX2NhbGN1bGF0aW9uKGNvbG9yMTpDb2xvcixjb2xvcjI6Q29sb3IpOkZsb2F0e1xuICAgIFxuICAgIHZhciByID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjEucmVkKSBcbiAgICB2YXIgZyA9IGNvbG9yX2NvbXBvbmVudHMoY29sb3IxLmdyZWVuKVxuICAgIHZhciBiID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjEuYmx1ZSlcbiAgICBcbiAgICB2YWwgbDEgPSBjYWxjdWxhdF9icmlnaHRuZXNzKHIsZyxiKVxuXG4gICAgciA9IGNvbG9yX2NvbXBvbmVudHMoY29sb3IyLmdldFJlZCgpKSBcbiAgICBnID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjIuZ2V0R3JlZW4oKSlcbiAgICBiID0gY29sb3JfY29tcG9uZW50cyhjb2xvcjIuZ2V0Qmx1ZSgpKVxuICAgIFxuICAgIHZhbCBsMiA9IGNhbGN1bGF0X2JyaWdodG5lc3MocixnLGIpXG5cbiAgICBcbiAgICB2YWwgY29udHJhc3RfcmF0aW8gPSBpZiAobDE+bDIpICgobDEgKyAwLjA1KS8obDIgKyAwLjA1KSkudG9GbG9hdCgpXG4gICAgZWxzZSAoKGwyICsgMC4wNSkvKGwxICsgMC4wNSkpLnRvRmxvYXQoKVxuICAgIFxuICAgIHJldHVybiBjb250cmFzdF9yYXRpb1xufVxuXG5mdW4gbWFpbigpIHtcblxuLy8g0KbQstC10YIg0YTQvtC90LA6IENvbG9yKDB4RkYyMDFCMTYpICByZ2IoMzIsIDI3LCAyMikgIFxuICAgIHZhbCBoZXhDb2xvcjEgPSBcIiMyMDFCMTZcIlxuICAgIHZhbCBjb2xvcjEgPSBDb2xvci5kZWNvZGUoaGV4Q29sb3IxKVxuLy8g0KbQstC10YIg0YLQtdC60YHRgtCwOiBDb2xvcigweEZGRUJFMEQ5KSAgcmdiKDIzNSwgMjI0LCAyMTcpICBcbiAgICB2YWwgaGV4Q29sb3IyID0gXCIjRUJFMEQ5XCJcbiAgICB2YWwgY29sb3IyID0gQ29sb3IuZGVjb2RlKGhleENvbG9yMilcbiAgICBcbiAgICB2YWwgaz0gY29udHJhc3RfcmF0aW9fY2FsY3VsYXRpb24oY29sb3IxLGNvbG9yMilcbiAgICBwcmludGxuKFwi0KbQstC10YIg0YTQvtC90LA6ICAgJGhleENvbG9yMVwiKSAgXG4gICAgcHJpbnRsbihcItCm0LLQtdGCINGC0LXQutGB0YLQsDogJGhleENvbG9yMlwiKSAgXG4gICAgcHJpbnRsbihcIiDQmtC+0L3RgtGA0LDRgdGC0L3QvtGB0YLRjDogJGtcIikgIFxuICAgIFxufSIsInBsYXRmb3JtIjoiamF2YSIsImFyZ3MiOiIifQ=="
                ),
                TextClickLink(
                    text = "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö —Ü–≤–µ—Ç–æ–≤ ",
                    textUrl = "\uD83D\uDCD6 –û–Ω–ª–∞–π–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ",
                    url = "https://planetcalc.ru/7779/"
                ),
            )

        ),

        ExampleCode(
            id = 5,
            title = "–ì—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–∞",
            comment = """
|Brush| –≤ Compose –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∏—Å—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—Å—è –≤–º–µ—Å—Ç–æ |color|.

–ö–∏—Å—Ç—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–∞.  

–ö–∏—Å—Ç—å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–∏–ø–∞–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è: 
   |—Ñ–æ–Ω—É|, |—Ç–µ–∫—Å—Ç—É| –∏ |—Ö–æ–ª—Å—Ç—É|.                        
 
–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∏—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è:
 
|horizontalGradient|(colors) 

|linearGradient|(colors) 

|verticalGradient|(colors) 

|sweepGradient|(colors) 

|radialGradient|(colors) 

  –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∫–∏—Å—Ç—å |SolidColor|.

–ö–∏—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –≤—ã–∑–æ–≤–∞–º–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ 
 |Modifier.background|() 
 |TextStyle| 
 |DrawScope| 
  –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫ —Ä–∏—Å—É–µ–º–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.
 
 –í–º–µ—Å—Ç–æ |colors| –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å |colorStops| –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ |—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤|.
 
 –ù–∞–ø—Ä–∏–º–µ—Ä:
 val colorStops = arrayOf(
     0.0f to Color.Yellow, |!// –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –∂–µ–ª—Ç–æ–≥–æ|
     0.2f to Color.Red,    |!//–∫—Ä–∞—Å–Ω–æ–≥–æ –±–æ–ª—å—à–µ —á–µ–º –∂–µ–ª—å—Ç–æ–≥–æ|
     1f to Color.Blue      |!//—Å–∏–Ω–µ–≥–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ|
 )
–ó–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ –¥—Ä–æ–±–∏ –æ—Ç 0 –¥–æ 1. –ó–Ω–∞—á–µ–Ω–∏—è –±–æ–ª—å—à–µ 1 –ø—Ä–∏–≤–µ–¥—É—Ç –∫ —Ç–æ–º—É, —á—Ç–æ —ç—Ç–∏ —Ü–≤–µ—Ç–∞ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ —á–∞—Å—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞.


 |tileMode| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —à–µ–π–¥–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –µ–≥–æ –≥—Ä–∞–Ω–∏—Ü. 
  –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 
   .|!Clamp| - –∫—Ä–∞–π —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –ø–æ –∫–æ–Ω–µ—á–Ω–æ–º—É —Ü–≤–µ—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é);
   .|!Decal| - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–∫—Å–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–µ–π–¥–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü;
   .|!Mirror| - —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∑–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞ –∫ –ø–µ—Ä–≤–æ–º—É;
   .|!Repeated| - —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ;

 –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏.

 –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–∏—Å—Ç–∏.

 –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∏—Å—Ç—å |AGSL| RuntimeShader

            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∏—Å—Ç—å. –†–∞—Å–∫—Ä–∞—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Compose ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Medium. Android Developers. Alejandra Stamato",
                    url = "https://medium.com/androiddevelopers/animating-brush-text-coloring-in-compose-%EF%B8%8F-26ae99d9b402"
                ),
                TextClickLink(
                    text = "Brush ‚Äî –∫–∏—Å—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/Brush"
                ),
                TextClickLink(
                    text = "Android Graphics Shading Language",
                    textUrl = "\uD83D\uDCD6 Developers.  AGSL",
                    url = "https://developer.android.com/reference/android/graphics/RuntimeShader"
                ),
            ),

            highlightCode = highCodeList + listOf(
                HighlightCode("GradientOverview", Color(0xFFffc530)),
                HighlightCode("BackgroundWithBrush ", Color(0xFFffc530)),
                HighlightCode("RadioButtonColumn ", Color(0xFFffc530)),
                HighlightCode("brush = ", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { GradientOverview(it) },
            code ="""   

//********************************

@Composable
fun GradientOverview(
    isExpanded: Boolean = false,
){
    val padding = dimensionResource(
        id = R.dimen.padding_medium
    )

    var indexSelect by remember { mutableIntStateOf(4) }

    val gradients = listOf(
        "linearGradient",
        "horizontalGradient",
        "verticalGradient",
        "sweepGradient",
        "radialGradient",
    )
    if (isExpanded) {
        Row(
            modifier = Modifier.fillMaxSize(),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column(
                modifier = Modifier.weight(0.7f),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center

            ) {
                RadioButtonColumn(
                    indexSelect = indexSelect,
                    items = listOf(
                        "linear",
                        "horizontal",
                        "vertical",
                        "sweep",
                        "radial",
                    ),
                    onClick = { indexSelect = it }
                )
            }

            BackgroundWithBrush(
                indexSelect = indexSelect,
                modifier = Modifier
                    .fillMaxHeight()
                    .background(color = Color.Black)
                    .padding(padding)
                    .weight(1f),
            )
        }
    } else {
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center

        ) {
            RadioButtonColumn(
                indexSelect = indexSelect,
                items = gradients,
                onClick = { indexSelect = it }
            )

            BackgroundWithBrush(
                indexSelect = indexSelect,
                modifier = Modifier
                    .fillMaxWidth()
                    .background(color = Color.Black)
                    .padding(padding)
                    .weight(1f),
            )
        }
    }
}

//********************************

@Composable
fun BackgroundWithBrush (
    indexSelect: Int = 0,
    modifier: Modifier = Modifier,
    colors: List<Color> = listOf(Color.Red,Color.Blue),
    text: String = "Hello, World!",
    style: TextStyle = MaterialTheme.typography.bodyMedium.merge(
        TextStyle(
            fontSize = 30.sp,
            textAlign = TextAlign.Center,
            color = Color.White,
            fontFamily = FontFamily.Serif //—à—Ä–∏—Ñ—Ç —Å –∑–∞—Å–µ—á–∫–∞–º–∏
        )
    ),
    ) {
    val gradientBrush = when (indexSelect) {
        0 -> Brush.linearGradient(colors)
        1 -> Brush.horizontalGradient(colors)
        2 -> Brush.verticalGradient(colors)
        3 -> Brush.sweepGradient(colors)
        else -> Brush.radialGradient(colors)
    }

    Box(
        modifier = modifier
            .fillMaxSize()
            .background(brush = gradientBrush),
        contentAlignment = Alignment.Center
    ) {
        Text(
           text = text,
           style = style
        )
    }
}

//********************************

@Composable
fun RadioButtonColumn (
    indexSelect: Int = 0,
    items: List<String> = listOf(
        "linearGradient",
        "horizontalGradient",
        "verticalGradient",
        "sweepGradient",
        "radialGradient",
    ),
    onClick: (Int) -> Unit = {},
) {
    Column(
        Modifier
            .fillMaxWidth()
            .selectableGroup(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    )
    {
        items.forEachIndexed { index, element ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable {onClick(index)  },
                verticalAlignment = Alignment.CenterVertically
            ) {
                RadioButton(
                    selected = indexSelect == index,
                    onClick = { onClick(index) },
                    modifier = Modifier.padding(8.dp)
                )
                Text(
                    text = element,
                    modifier = Modifier
                        .fillMaxWidth(),
                    fontSize = 22.sp
                )
            }
        }

    }
}
                
                
            """.trimIndent()
        ),
        ExampleCode(
            id = 20,
            title = "–ê–Ω–∏–º–∞—Ü–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞",
            comment = """
|–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ tween|
@Stable
fun <T> tween(
    durationMillis: Int = DefaultDurationMillis,
    delayMillis: Int = 0,
    easing: Easing = FastOutSlowInEasing
): TweenSpec<T> = {...}                        

–¢—Ä–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:

    |durationMillis| ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö;

    |delayMillis| ‚Äî |–∑–∞–¥–µ—Ä–∂–∫–∞| –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è |–¥–æ –∑–∞–ø—É—Å–∫–∞| –∞–Ω–∏–º–∞—Ü–∏–∏;

    |easing| ‚Äî –∫—Ä–∏–≤–∞—è —Å–º—è–≥—á–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–Ω–∏–º–∞—Ü–∏—è.

Easing ‚Äî —ç—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–≤–∏–≥–∞—Ç—å—Å—è —Ç–∞–∫, –±—É–¥—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ç—Ä–µ–Ω–∏–µ, –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –∏ –º–∞—Å—Å–∞, —Ä–∞–±–æ—Ç–∞—é—Ç. 

Easing –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º —É—Å–∫–æ—Ä—è—Ç—å—Å—è –∏ –∑–∞–º–µ–¥–ª—è—Ç—å—Å—è —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é.

–í Jetpack Compose –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ easing:

 |FastOutSlowInEasing| - –º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –∏ –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

 |LinearOutSlowInEasing| - –±—ã—Å—Ç—Ä–æ–µ –Ω–∞—á–∞–ª–æ –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

 |FastOutLinearInEasing| - –º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

 |LinearEasing| - –Ω–∞—á–∞–ª–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º

 |CubicBezierEasing| - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫—Ä–∏–≤—É—é —Å–º—è–≥—á–µ–Ω–∏—è. –î–∞–Ω–Ω—ã–π easing –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ —á–µ—Ç—ã—Ä—ë–º —Ç–æ—á–∫–∞–º.




   |–ü–æ–≤—Ç–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏|

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RememberInfiniteTransition —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π InfinRepeatable, —á—Ç–æ–±—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é. 

–ò–∑–º–µ–Ω–∏—Ç–µ —Ä–µ–∂–∏–º—ã –ø–æ–≤—Ç–æ—Ä–∞, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –æ–Ω –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ FinRepeatable –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑. 

            """.trimIndent(),
            highlightCode = highCodeList + listOf(
                HighlightCode("AnimationBgGradient", Color(0xFFffc530)),
                HighlightCode(".animateFloat", Color(0xFF3CEE0A)),
                HighlightCode(".animateColor", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { AnimationBgGradient() },
            code ="""
@Composable
fun AnimationBgGradient(
    backgroundBox: Painter = painterResource(id = R.drawable.bg2),
){

    // –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä [InfiniteTransition] –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
    val infiniteTransition = rememberInfiniteTransition()

    // –°–æ–∑–¥–∞–µ—Ç –¥–æ—á–µ—Ä–Ω—é—é –∞–Ω–∏–º–∞—Ü–∏—é —Ç–∏–ø–∞ float –∫–∞–∫ —á–∞—Å—Ç—å [InfiniteTransition].
    val endX by infiniteTransition.animateFloat(
        initialValue = 150f,
        targetValue = 200f,
        animationSpec = infiniteRepeatable(
            // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 2000 –º—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–≤–æ–π –∑–∞–º–µ–¥–ª–µ–Ω–∏—è LinearOutSlowInEasing
            animation = tween(2000, easing = LinearEasing),
            // –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ (—Ç. –µ. –∫–∞–∂–¥—ã–µ 2000 –º—Å) –∞–Ω–∏–º–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å [initialValue]
            repeatMode = RepeatMode.Reverse
        ),
        label = "size"
        
    )

    val color by infiniteTransition.animateColor(
        initialValue = Color.Transparent,
        targetValue = Color.Blue,
        animationSpec = infiniteRepeatable(  //LinearOutSlowInEasing
            animation = tween(1000, easing = LinearEasing),
            repeatMode = RepeatMode.Reverse
        ),
        label = "color"
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black),
        contentAlignment = Alignment.Center
    ){

        Image(
            painter = backgroundBox,
            contentDescription = null,
            modifier = Modifier
                .fillMaxSize(),
            contentScale = ContentScale.Crop,
        )

        BackgroundWithBrush(
            indexSelect = 4,     //radialGradient
            modifier = Modifier
                .fillMaxSize(),
            colors = listOf(Color.Red,color),
            StartDp = 0,
            endDp = endX.toInt(),
            tileMode = TileMode.Decal,
            style = MaterialTheme.typography.bodyMedium.merge(
                TextStyle(
                    fontSize = 25.sp,
                    textAlign = TextAlign.Center,
                    color = Color.White,
                    fontFamily = FontFamily.Serif 
                )
            ),
        )

    }
}
                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ö—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Quick guide",
                    url = "https://developer.android.com/develop/ui/compose/animation/quick-guide?hl=ru"
                ),
                TextClickLink(
                    text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏  ",
                    textUrl = "\uD83D\uDCD6 Developers. Animation. Customize",
                    url = "https://developer.android.com/develop/ui/compose/animation/customize?hl=ru"
                ),
                TextClickLink(
                    text = "Animations in Compose   ",
                    textUrl = "\uD83D\uDCD6 Developers. Compose. Animation. Introduction",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º, —Å–≤–æ–π—Å—Ç–≤–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º, –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ –ø–∞–∫–µ—Ç–µ androidx.compose.animation.core  ",
                    textUrl = "\uD83D\uDCD6 Developers. Compose. Animation. Core",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/animation/core/package-summary#Ease()"
                ),
                TextClickLink(
                    text = "–û—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å  ",
                    textUrl = "\uD83D\uDCD6 m3.material.io. Easing and duration",
                    url = "https://m3.material.io/styles/motion/easing-and-duration/applying-easing-and-duration"
                ),
                TextClickLink(
                    text = "How to Create Gradient Background in Android Jetpack Compose ",
                    textUrl = "\uD83D\uDCD6 Bolt UiX ",
                    url = "https://www.boltuix.com/2023/01/how-to-create-gradient-background-in.html"
                ),
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),
            )

        ),
        ExampleCode(
            id = 21,
            title = "–ì—Ä–∞–¥–∏–µ–Ω—Ç —à—Ä–∏—Ñ—Ç–∞",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |brush| (–∫–∏—Å—Ç—å) –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ |color| –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞ —Ç–µ–∫—Å—Ç–∞.
                
–í –Ω–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∏—Å—Ç—å |horizontalGradient|:

|!fun horizontalGradient(
    colors: List<Color>,
    startX: Float = 0.0f,
    endX: Float = Float.POSITIVE_INFINITY,
    tileMode: TileMode = TileMode.Clamp
): Brush|
 
|colors| - –¶–≤–µ—Ç–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞

|start| - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞. 

|end| - –ö–æ–Ω–µ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞. 
     
|tileMode| - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —à–µ–π–¥–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –µ–≥–æ –≥—Ä–∞–Ω–∏—Ü. 
 
 TileMode 
   .|!Clamp| - –∫—Ä–∞–π —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –ø–æ –∫–æ–Ω–µ—á–Ω–æ–º—É —Ü–≤–µ—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é);
   .|!Decal| - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–∫—Å–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–µ–π–¥–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü;
   .|!Mirror| - —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∑–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞ –∫ –ø–µ—Ä–≤–æ–º—É;
   .|!Repeated| - —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ;

 

                
            """.trimIndent(),
            highlightCode = highCodeList + listOf(
                HighlightCode("GradientDriver", Color(0xFFffc530)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { GradientDriver(it) },
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),
                TextClickLink(
                    text = "Brush ‚Äî –∫–∏—Å—Ç—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/Brush"
                ),

                ),

            ),

        ExampleCode(
            id = 21,
            title = "–ö–∏—Å—Ç—å AGSL",
            comment = """
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–∏—Å—Ç—å |AGSL| (Android Graphics Shading Language) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ |RuntimeShader|. 

–®–µ–π–¥–µ—Ä—ã - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é —Ä–∞–±–æ—Ç—É –ø–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—é —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è.

C –ø–æ–º–æ—â—å—é —à–µ–π–¥–µ—Ä–æ–≤ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã, –∞ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –ø–æ—Å–∫–æ–ª—å–∫—É –≤—Å–µ —ç—Ç–æ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö.

|AGSL| –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Android 13 –∏ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.

|GLSL| ES 1.0 - —è–∑—ã–∫ —à–µ–π–¥–∏–Ω–≥–∞ |OpenGL ES|

|AGSL| –∏ |GLSL| –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏ –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç |–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏| –º–Ω–æ–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ñ—Ä–∞–≥–º–µ–Ω—Ç–Ω—ã—Ö —à–µ–π–¥–µ—Ä–æ–≤ |GLSL| –≤ |Android| —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.
                
|AGSL| (–∏ |GLSL|) ‚Äî —ç—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –≤ —Å—Ç–∏–ª–µ |C|. 

–í GLSL –≤–≤–µ–¥–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
 1)–¥–ª—è —Å–≤—è–∑–∏ —à–µ–π–¥–µ—Ä–∞ —Å –≤–Ω–µ—à–Ω–∏–º –º–∏—Ä–æ–º (|uniform|); 
 2)—Ñ—Ä–∞–≥–º–µ–Ω—Ç–Ω–æ–≥–æ —à–µ–π–¥–µ—Ä–∞ —Å –≤–µ—Ä—à–∏–Ω–Ω—ã–º —à–µ–π–¥–µ—Ä–æ–º (|varying|); 
 3)–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ-–∞—Ç—Ä–∏–±—É—Ç—ã –≤–µ—Ä—à–∏–Ω–∞ (|attribute|). 
 
–¢–∞–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏.

–í GLSL –µ—Å—Ç—å —Ü–∏–∫–ª—ã:  for, while, do..while ... 

|AGSL| –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ø–æ–ª–æ–≤–∏–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.

–ò–º–µ–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª–∏–Ω—ã 2‚Äì4 –æ–±–æ–∑–Ω–∞—á–∞—é—Ç—Å—è –æ–¥–Ω–æ–π –±—É–∫–≤–æ–π.

|vect.xyzw| ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–º —Ç–æ—á–∫–∏/–Ω–æ—Ä–º–∞–ª–∏.

|vect.rgba| ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–º —Ü–≤–µ—Ç–∞.

|vect.LTRB| ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –∫–æ–≥–¥–∞ –≤–µ–∫—Ç–æ—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (–Ω–µ –≤ GLSL).

–í |AGSL| 0 –∏ 1 –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã 0 –∏–ª–∏ 1 –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. 
–ü—Ä–∏–º–µ—Ä: 
  |!vect.rgb1 == vec4(vect.rgb,1)|

 –ö–∞–∂–¥–∞—è —à–µ–π–¥–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ |main|. 

–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç |GLSL|, —Ñ—É–Ω–∫—Ü–∏—è |AGSL| –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —à–µ–π–¥–µ—Ä–∞ –≤ ¬´–ª–æ–∫–∞–ª—å–Ω—ã—Ö¬ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö,–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª—è –≤ –≤–∏–¥–µ |vec4| —Å–æ —Å—Ä–µ–¥–Ω–µ–π –∏–ª–∏ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.

–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–µ–π–¥–µ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º |uniform|

–ö–æ–¥ —à–µ–π–¥–µ—Ä–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è |–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è| –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç |—Ü–≤–µ—Ç|, –∫–æ—Ç–æ—Ä—ã–º –ø–∏–∫—Å–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–∫—Ä–∞—à–µ–Ω.

–ö–æ–¥ —à–µ–π–¥–µ—Ä–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å —Ç–∏–ø–æ–º |String|.

 –ü—Ä–∏–º–µ—Ä —à–µ–π–¥–µ—Ä–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:
************************** 
 | –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–µ–π–¥–µ—Ä–∞|    
 
 |!// –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (pixels)|
    uniform float2 iResolution;   
 |!// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —à–µ–π–¥–µ—Ä–∞ time (s)|
    uniform float  iTime;         

–ú–æ–≥—É—Ç –±—ã—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...
 
 |!// –¢–µ–ª–æ —à–µ–π–¥–µ—Ä–∞| 
    half4 |main|(float2 fragCoord) {
 |!// –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–∏–∫—Å–µ–ª–µ–π (from 0 to 1)|
       float2 scaled = fragCoord/iResolution.xy;
       float2 col = abs(1.0-mod(scaled+0.5*cos(iTime+vec2(0,2)),2.0));      
       return half4(col, 0.2, 1);
      
 }      
************************** 


      |–§—É–Ω–∫—Ü–∏–∏ AGSL|
  
  1)|!–£–≥–ª–æ–≤—ã–µ –∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏|
     |radians|(degrees) 	–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
     |degrees|(radians) 	–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞–¥–∏–∞–Ω—ã –≤ –≥—Ä–∞–¥—É—Å—ã
     |sin|(angle) 	–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏–Ω—É—Å (—É–≥–æ–ª)
     |cos|(angle) 	–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ—Å–∏–Ω—É—Å
     |tan|(angle) 	–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞–Ω–≥–µ–Ω—Å
     |asin|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª, —Å–∏–Ω—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–µ–Ω x, –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-pi/2,pi/2]
     |acos|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª, –∫–æ—Å–∏–Ω—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–µ–Ω x, –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,pi]
     |atan|(y,x)	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª, —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–µ–Ω y/x, –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-pi,pi]
     |atan|(y_over_x) 	R–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª, —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–≤–µ–Ω y_over_x –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-pi/2,pi/2] 

   2)|!–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏|
      |pow|(x, y) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç x^y
      |exp|(x) 	    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç x^2
      |log|(x) 	    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ln(x)
      |exp2|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç  2^x
      |log2|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç  log2(x)
      |sqrt|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç  sqrt(x)
      |inversesqrt|(x) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç  1/sqrt(x)
  
    3)|!–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏|
       |abs|(x) –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
       |sign|(x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1,0, 0,0 –∏–ª–∏ 1,0 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞–∫–∞ x.
       |floor|(x) –ë–ª–∏–∂–∞–π—à–µ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ <= x
       |ceil|(x) –ë–ª–∏–∂–∞–π—à–µ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= x
       |fract|(x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å x.
       |mod|(x,y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x –ø–æ –º–æ–¥—É–ª—é y.
       |mod|(x, float y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x –ø–æ –º–æ–¥—É–ª—é y.
       |min|(x,y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –∏–ª–∏ y.
       |min|(x, float y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –∏–ª–∏ y.
       |max|(x,y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –∏–ª–∏ y.
       |max|(x, float y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –∏–ª–∏ y.
       |Clamp|(x, minVal, maxVal) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x, –∑–∞–∂–∞—Ç–æ–µ –º–µ–∂–¥—É minVal –∏ maxVal.
       |Clamp|(x, float minVal, float maxVal) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x, –∑–∞–∂–∞—Ç–æ–µ –º–µ–∂–¥—É minVal –∏ maxVal.
       |saturation|(x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ x, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –æ—Ç 0,0 –¥–æ 1,0.
       |mix|(x, y, a) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é —Å–º–µ—Å—å x –∏ y.
       |mix|(x, y, float a) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é —Å–º–µ—Å—å x –∏ y.
       |step|(edge,x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0,0, –µ—Å–ª–∏ x < edge, –∏–Ω–∞—á–µ 1,0
       |Step|(float edge, x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0,0, –µ—Å–ª–∏ x < edge, –∏–Ω–∞—á–µ 1,0
       |Smoothstep|(edge0, edge1, x) –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –≠—Ä–º–∏—Ç–∞ –º–µ–∂–¥—É 0 –∏ 1, –∫–æ–≥–¥–∞ edge0 < x < edge1
       |Smoothstep|(float edge0, float edge1,x) –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –≠—Ä–º–∏—Ç–∞ –º–µ–∂–¥—É 0 –∏ 1, –∫–æ–≥–¥–∞ edge0 < x < edge1                   
                    
    4)|!–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏|
       |length|(x) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –≤–µ–∫—Ç–æ—Ä–∞
       |distance|(p0, p1) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
       |dot|(x,y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
       |cross|(float3/half3 x, float3/half3 y) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
       |normalize|(x) –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä –¥–æ  1
       |faceforward|(N, I, Nref) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç N, –µ—Å–ª–∏ —Ç–æ—á–∫–∞(Nref, I) < 0, –∏–Ω–∞—á–µ -N.
       |reflect|(I, N) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è I - 2 * dot(N,I) * N.
       |refract|(I, N, float/half eta) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–∫—Ç–æ –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è.                        
                        
    5)|!–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏|
       mat |matrixCompMult|(mat x, mat y)	—É–º–Ω–æ–∂–µ–Ω–∏–µ x –Ω–∞ y 
       mat |inverse|(mat m) 	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–≤–µ—Ä—Å–∏—é m     
       
    6)|!–í–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏|
        (c—Ä–∞–≤–Ω–µ–Ω–∏–µ x –∏ y –ø–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ) 

       BV |lessThan|(T x, T y) 	x < y
       BV |lessThanEqual|(T x, T y) 	x <= y
       BV |greaterThan|(T x, T y) 	x > y
       BV |greaterThanEqual|(T x, T y) 	x >= y
       BV |equal|(T x, T y) 	x == y
       BV |equal|(BV x, BV y) 	x == y
       BV |notEqual|(T x, T y) 	x != y
       BV |notEqual|(BV x, BV y) 	x != y
       bool |any|(BV x) 	true, –µ—Å–ª–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç x true
       bool |all|(BV x) 	true, –µ—Å–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã x true
       BV |not|(BV x) 	–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ x       

     –†–∞–∑–º–µ—Ä—ã –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤–≤–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å.
        T ‚Äî —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π. 
        BV ‚Äî —ç—Ç–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä—É –≤—Ö–æ–¥–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤.

            
    7)|!–§—É–Ω–∫—Ü–∏–∏ —Ü–≤–µ—Ç–∞|

       vec4 unpremul(vec4 color) 	–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∞–ª—å—Ñ–∞ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è
       half3 toLinearSrgb(half3 color) 	–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –ª–∏–Ω–µ–π–Ω–æ–µ SRGB
       half3 fromLinearSrgb(half3 color) 	—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ 
            

–ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∏–∂–µ ...
               
                
            """.trimIndent(),
            highlightCode = highCodeList +  listOf(
                HighlightCode("ShaderDemo", Color(0xFFffc530)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                    ShaderDriver()
                }
            },
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),

                TextClickLink(
                    text = "–Ø–∑—ã–∫ —à–µ–π–¥–µ—Ä–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∏ Android ",
                    textUrl = "\uD83D\uDCD6 Developers. Graphics. AGSL",
                    url = "https://developer.android.com/develop/ui/views/graphics/agsl?hl=ru"
                ),
                TextClickLink(
                    text = "Android Graphics Shading Language ",
                    textUrl = "\uD83D\uDCD6 Developers. RuntimeShader",
                    url = "https://developer.android.com/reference/android/graphics/RuntimeShader"
                ),
                TextClickLink(
                    text = "–ö—Ä–∞—Ç–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ AGSL ",
                    textUrl = "\uD83D\uDCD6 Developers. AGSL. Quick reference.",
                    url = "https://developer.android.com/develop/ui/views/graphics/agsl/agsl-quick-reference"
                ),
                TextClickLink(
                    text = "The OpenGL¬Æ ES Shading Language ",
                    textUrl = "\uD83D\uDCD6 Khronos.org (opengles_shading_language.pdf)",
                    url = "https://www.khronos.org/files/opengles_shading_language.pdf"
                ),
                TextClickLink(
                    text = "–ü—Ä–∏–º–µ—Ä—ã —à–µ–π–¥–µ—Ä–æ–≤ ONLINE ",
                    textUrl = "\uD83D\uDCD6 –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ª—É—á—à–∏–º–∏ —à–µ–π–¥–µ—Ä–∞–º–∏ —Å–æ –≤—Å–µ–º –º–∏—Ä–æ–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Ç–µ—Å—å!",
                    url = "https://www.shadertoy.com/browse"
                ),
            ),

        ),

        ExampleCode(
            id = 21,
            title = "–ê–Ω–∏–º–∞—Ü–∏—è AGSL",
            comment = """
–î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ |AGSL| —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è |Modifier|, –ø—Ä–∏–º–µ–Ω—è—é—â—É—é —à–µ–π–¥–µ—Ä: 

 Modifier.|shaderAGSL|(
     shaderSrc:String = GRADIENT_SHADER
 ) 

–í—Ö–æ–¥–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–∞ String, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å |AGSL|-–∫–æ–¥–æ–º —à–µ–π–¥–µ—Ä–∞.

–°–æ–∑–¥–∞–Ω–Ω—É—é –Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ñ–æ–Ω –∫ –ª—é–±–æ–º—É |Composable| UI-—ç–ª–µ–º–µ–Ω—Ç—É.

–ù–∞ —Å–∞–π—Ç–µ |https://www.shadertoy.com|  –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —à–µ–π–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ê–Ω–¥—Ä–æ–∏–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.

–®–µ–π–¥–µ—Ä—ã –Ω–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ |GLSL| (—è–∑—ã–∫ —à–µ–π–¥–∏–Ω–≥–∞ OpenGL ES).

–û–Ω–∏ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã –∏ –∏–º–µ—é—Ç |–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ| –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

|uniform| vec3  iResolution;  - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)

|uniform| float iTime;        - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

–∏ –¥—Ä.

–¢–∞–∫–∂–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —à–µ–π–¥–∏–Ω–≥, –æ—Ç–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.

–ü—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —à–µ–π–¥–µ—Ä–∞ –≤ –ê–Ω–¥—Ä–æ–∏–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É—á–∏—Ç—ã–≤–∞—è –æ—Ç–ª–∏—á–∏—è —è–∑—ã–∫–∞ |AGSL| –æ—Ç |GLSL|.

–ü–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —à–µ–π–¥–µ—Ä–∞ –≤ –ê–Ω–¥—Ä–æ–∏–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–º–æ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é |mainImage| –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ |main| ,–∞ –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏ main –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä |return| –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ü–≤–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —à–µ–π–¥–µ—Ä–∞.

AGSL |–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç| –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ GLSL, —Ç–∞–∫–∏–µ –∫–∞–∫ define –∏ –¥—Ä.

            """.trimIndent(),
            highlightCode = highCodeList +  listOf(
                HighlightCode("ShaderDemo", Color(0xFFffc530)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {
               if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                    ShaderAnimation()
                }
            },
            code ="""
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ü—Ä–∏–º–µ—Ä—ã —à–µ–π–¥–µ—Ä–æ–≤ ONLINE ",
                    textUrl = "\uD83D\uDCD6 https://www.shadertoy.com - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ª—É—á—à–∏–º–∏ —à–µ–π–¥–µ—Ä–∞–º–∏ —Å–æ –≤—Å–µ–º –º–∏—Ä–æ–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Ç–µ—Å—å!",
                    url = "https://www.shadertoy.com/browse"
                ),
                TextClickLink(
                    text = "–ö–∏—Å—Ç—å: –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —à–µ–π–¥–µ—Ä—ã ‚Äî ",
                    textUrl = "\uD83D\uDCD6 Developers. Brush",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/brush?hl=ru"
                ),
            ),

        ),




        ExampleCode(
            id =  10,
            title = "–¢–µ–∫—Å—Ç —Å —Ç–µ–Ω—å—é",
            comment = """
–ü–∞—Ä–∞–º–µ—Ç—Ä |shadow| –∑–∞–¥–∞–µ—Ç –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –æ–±—ä–µ–∫—Ç–∞ |Shadow|.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã |Shadow|:
 
  |!color|: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–Ω–∏.

  |!offset|: —Å–º–µ—â–µ–Ω–∏–µ —Ç–µ–Ω–∏ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ Offset.

  |!blurRadius|: –∑–∞–¥–∞–µ—Ç —Ä–∞–¥–∏—É—Å —Ä–∞–∑–º—ã—Ç–∏—è.

                
            """.trimIndent(),
            highlightCode = listOf(
                HighlightCode("TextShadow", Color(0xFFffc530)),
                HighlightCode("text ", Color.Cyan),
                HighlightCode("fontSize", Color.Cyan),
                HighlightCode("style ", Color.Cyan),
                HighlightCode("color", Color.Yellow),
                HighlightCode("offset", Color.Yellow),
                HighlightCode("blurRadius", Color.Yellow),
                HighlightCode("@Composable", Color(0xFF3CEE0A)),
                HighlightCode("Text(", Color(0xFF3CEE0A)),
                HighlightCode("shadow", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { ShadowDriver() },
            code ="""
@Composable
fun TextShadow() {

    val offset = Offset(3.0f, 5.0f)
    Text(
        text = "Text in jetpack Compose",
        style = TextStyle(
            fontSize = 24.sp,
            shadow = Shadow(
                color = Color.Blue,
                offset = offset, //—Å–º–µ—â–µ–Ω–∏–µ —Ç–µ–Ω–∏
                blurRadius = 3f  //—Ä–∞–∑–º—ã—Ç–∏–µ
            )
        )
    )
}
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. Shadow",
                    url = "https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/Shadow"
                ),
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ ",
                    textUrl = "\uD83D\uDCD6 Developers. –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –º–∏—Ä —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ—Ä–æ–≤ –Ω–∞ ",
                    textUrl = "\uD83D\uDCD6 Pixabay ",
                    url = "https://pixabay.com/ru/photos/%D0%BC%D0%BE%D0%BB%D0%BD%D0%B8%D1%8F-%D0%B1%D1%83%D1%80%D1%8F-%D0%BD%D0%B5%D0%B1%D0%BE-%D0%BE%D0%B1%D0%BB%D0%B0%D0%BA%D0%BE-%D0%B3%D0%BE%D1%80%D0%B0-7401119/"
                ),
            ),

        ),



        ExampleCode(
            id = 13,
            title = "–¢–µ–∫—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏",
            highlightCode = listOf(
                HighlightCode("TextShadow", Color(0xFFffc530)),
                HighlightCode("text ", Color.Cyan),
                HighlightCode("color", Color.Cyan),
                HighlightCode("fontWeight", Color.Cyan),
                HighlightCode("style ", Color.Cyan),
                HighlightCode("SpanStyle", Color.Yellow),
                HighlightCode("buildAnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("append", Color(0xFF3CEE0A)),
                HighlightCode("withStyle", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { MultipleStylesInText() },
            code ="""
    val Alice = FontFamily(
        Font(R.font.alice_regular)
    )
    val style = SpanStyle(
        color = Color.Cyan,
        fontSize = 22.sp,
        fontFamily = Alice,
        fontStyle = FontStyle.Italic,
    )

    Text(
        text = buildAnnotatedString {
            withStyle(
                style = style
            ) {
                append("T")
            }
            append("ext in jetpack ")

            withStyle(
                style = style.merge(
                    SpanStyle(
                        color = Color.Red,
                    )
                )
            ) {
                append("C")
            }
            append("ompose")
        },
        modifier = Modifier.padding(16.dp)
    )
            """.trimIndent()
        ),
        ExampleCode(
            id = 14,
            title = "–¢–µ–∫—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ 2",
            highlightCode = listOf(
                HighlightCode("TextShadow", Color(0xFFffc530)),
                HighlightCode("text ", Color.Cyan),
                HighlightCode("color", Color.Cyan),
                HighlightCode("textAlign", Color.Cyan),
                HighlightCode("fontWeight", Color.Cyan),
                HighlightCode("style", Color.Cyan),
                HighlightCode("SpanStyle", Color.Yellow),
                HighlightCode("buildAnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("append", Color(0xFF3CEE0A)),
                HighlightCode("withStyle", Color(0xFF3CEE0A)),
                HighlightCode("ParagraphStyle", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { TextBuildAnnotatedString1() },
            code ="""
    val annotatedString = buildAnnotatedString {

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            withStyle(
                style = SpanStyle(
                    color = Color.Red,
                    fontWeight = FontWeight.Bold,
                )
            ) {
                append("Text ")
            }
        }

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            append("in jetpack ")
        }

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            withStyle(
                style = SpanStyle(
                    color = Color.Green,
                    fontFamily = FontFamily.Cursive,
                    fontSize = 24.sp
                )
            ) {
                append("Compose")
            }
        }
    }

    Text(
        annotatedString,
        modifier = Modifier
            .padding(16.dp)
    )
            """.trimIndent()
        ),

        ExampleCode(
            id = 15,
            title = "–¢–µ–∫—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ 3",
            highlightCode = listOf(
                HighlightCode("TextShadow", Color(0xFFffc530)),
                HighlightCode("pushStyle", Color.Cyan),
                HighlightCode("pop", Color.Cyan),
                HighlightCode("text ", Color.Cyan),
                HighlightCode("color", Color.Cyan),
                HighlightCode("onClick", Color.Cyan),
                HighlightCode("textDecoration", Color.Cyan),
                HighlightCode("modifier", Color.Cyan),
                HighlightCode("horizontalAlignment", Color.Cyan),
                HighlightCode("textAlign", Color.Cyan),
                HighlightCode("fontFamily", Color.Cyan),
                HighlightCode("fontWeight", Color.Cyan),
                HighlightCode("style", Color.Cyan),
                HighlightCode("SpanStyle", Color.Yellow),
                HighlightCode("withStyle", Color.Yellow),
                HighlightCode("pushStringAnnotation", Color(0xFF3CEE0A)),
                HighlightCode("tag", Color.Yellow),
                HighlightCode("annotation", Color.Yellow),
                HighlightCode("buildAnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("uriHandler", Color(0xFFF06134)),
                HighlightCode("ClickableText", Color(0xFF3CEE0A)),
                HighlightCode("append", Color(0xFF3CEE0A)),
                HighlightCode("withStyle", Color(0xFF3CEE0A)),
                HighlightCode("ParagraphStyle", Color(0xFF3CEE0A)),
                HighlightCode("annotatedLinkString", Color(0xFFD44EEB)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { TextAnnotatedStringClickLink() },
            code ="""
               
    val annotatedLinkString = buildAnnotatedString {

        withStyle(
            style = SpanStyle(
                fontSize = 18.sp,
                fontWeight = FontWeight.Normal,
            )
        ) {
            pushStyle(
                SpanStyle(
                    color = Color.Red,
                    fontWeight = FontWeight.Bold,
                )
            )
            // append new text red style
            append("Text ")
            // pop the red style
            pop()

            // append new text
            append("in jetpack ")

        }

        withStyle(
            style = SpanStyle(
                color = Color.Magenta,
                fontFamily = FontFamily.Cursive,
                fontSize = 30.sp
            )
        ) {
            append("Compose")
        }

        pushStringAnnotation(
            tag = "URL",
            annotation = "https://developer.android.com/jetpack/compose"
        )

        //–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            withStyle(
                style = SpanStyle(
                    color = Color.Blue,
                    fontFamily = FontFamily.SansSerif,
                    textDecoration = TextDecoration.Underline,
                    fontSize = 18.sp
                )
            ) {
                append("–î–µ—Ç–∞–ª—å–Ω–µ–µ –∑–¥–µ—Å—å...")
            }
        }

        pop()


    }

    val uriHandler = LocalUriHandler.current

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        ClickableText(
            text = annotatedLinkString,
            modifier = Modifier
                .padding(16.dp),
            onClick = {
                annotatedLinkString
                    .getStringAnnotations("URL", it, it)
                    .firstOrNull()?.let { stringAnnotation ->
                        uriHandler.openUri(stringAnnotation.item)
                    }
            }
        )

    }
            """.trimIndent()
        ),
        ExampleCode(
            id = 16,
            title = "–¢–µ–∫—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ 4",
            highlightCode = listOf(
                HighlightCode("TextShadow", Color(0xFFffc530)),
                HighlightCode("text ", Color.Cyan),
                HighlightCode("color", Color.Cyan),
                HighlightCode("modifier", Color.Cyan),
                HighlightCode("horizontalAlignment", Color.Cyan),
                HighlightCode("fontFamily", Color.Cyan),
                HighlightCode("style", Color.Cyan),
                HighlightCode("SpanStyle", Color.Yellow),
                HighlightCode("start", Color.Yellow),
                HighlightCode("end", Color.Yellow),
                HighlightCode("buildAnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("addStyle", Color(0xFF3CEE0A)),
                HighlightCode("append", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { TextBuildAnnotatedString() },
            code ="""
fun TextBuildAnnotatedString() {

    val annotatedString = buildAnnotatedString {

        append("Text in jetpack Compose")

        addStyle(
            style = SpanStyle(
                color = Color.Red,
                fontFamily = FontFamily.Cursive,
                fontSize = 24.sp
            ),
            start = 0,
            end = 1
        )

        addStyle(
            style = SpanStyle(
                color = Color.Blue
            ),
            start = 1,
            end = 4
        )

        addStyle(
            style = SpanStyle(
                color = Color.Black
            ),
            start = 5,
            end = 15
        )

        addStyle(
            style = SpanStyle(
                color = Color.Magenta,
                fontFamily = FontFamily.Cursive,
                fontSize = 25.sp
            ),
            start = 16,
            end = 23
        )
    }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            annotatedString,
            modifier = Modifier
                .padding(16.dp)
        )
    }

            """.trimIndent()
        ),

        ExampleCode(
            id = 17,
            title = "–¢–µ–∫—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ 5",
            highlightCode = listOf(
                HighlightCode("TextShadow", Color(0xFFffc530)),
                HighlightCode("text ", Color.Cyan),
                HighlightCode("color ", Color.Cyan),
                HighlightCode("textAlign", Color.Cyan),
                HighlightCode("fontWeight", Color.Cyan),
                HighlightCode("fontSize", Color.Cyan),
                HighlightCode("baselineShift", Color.Cyan),
                HighlightCode("style", Color.Cyan),
                HighlightCode("SpanStyle", Color.Yellow),
                HighlightCode("buildAnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("append", Color(0xFF3CEE0A)),
                HighlightCode("withStyle", Color(0xFF3CEE0A)),
                HighlightCode("ParagraphStyle", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { TextBuildAnnotatedString3() },
            code ="""
    val colorHour = MaterialTheme.colorScheme.primary
    val colorMin = MaterialTheme.colorScheme.outline
    val annotatedString = buildAnnotatedString {

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            withStyle(
                style = SpanStyle(
                    color = colorHour,
                    fontWeight = FontWeight.Bold,
                    fontSize = 60.sp,
                )
            ) {
                append("18")
            }
            append(" —á–∞—Å–æ–≤")
        }

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center
            )
        ) {
            withStyle(
                style = SpanStyle(
                    color = colorMin,
                    fontWeight = FontWeight.Bold,
                    fontSize = 50.sp,
                )
            ) {
                append("30")
            }
            withStyle(
                style = SpanStyle(
                    baselineShift = BaselineShift(+0.70f)
                )
            ) {
                append(" –º–∏–Ω—É—Ç ")
            }
        }

        withStyle(
            style = ParagraphStyle(
                textAlign = TextAlign.Center,

            )
        ) {
            withStyle(
                style = SpanStyle(
                    color = Color.Red,
                    fontWeight = FontWeight.Bold,
                    fontSize = 20.sp,
                )
            ) {
                append("${'$'}")
            }
            withStyle(
                style = SpanStyle(
                    color = Color.Red,
                    fontWeight = FontWeight.Bold,
                    fontSize = 28.sp,
                )
            ) {
                append("0.99")
            }
        }

    }

    Text(
        text = annotatedString,
        modifier = Modifier
            .padding(16.dp)
    )

            """.trimIndent()
        ),
        ExampleCode(
            id = 18,
            title = "HTML —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –≤ —Ç–µ–∫—Å—Ç–µ",
            highlightCode = listOf(
                HighlightCode("TextShadow", Color(0xFFffc530)),
                HighlightCode("https://www.android.com", Color(0xFFBAF576)),
                HighlightCode("fromHtml", Color(0xFFFF9800)),
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("Text(", Color(0xFF3CEE0A)),
                HighlightCode("@Composable", Color(0xFF3CEE0A)),
                HighlightCode("htmlString", Color(0xFFD857F5)),
                HighlightCode("linkStyles", Color(0xFFD857F5)),
                HighlightCode("<h1>", Color(0xFF1DDBF3)),
                HighlightCode("</h1>", Color(0xFF1DDBF3)),
                HighlightCode("<p>", Color(0xFF1DDBF3)),
                HighlightCode("</p>", Color(0xFF1DDBF3)),
                HighlightCode("<b>", Color(0xFF1DDBF3)),
                HighlightCode("</b>", Color(0xFF1DDBF3)),
                HighlightCode("<a", Color(0xFF1DDBF3)),
                HighlightCode("</a>", Color(0xFF1DDBF3)),
                HighlightCode("<ul>", Color(0xFF1DDBF3)),
                HighlightCode("</ul>", Color(0xFF1DDBF3)),
                HighlightCode("<li>", Color(0xFF1DDBF3)),
                HighlightCode("</li>", Color(0xFF1DDBF3)),
            ),
            lambdaFun = { AnnotatedHtmlString() },
            code ="""
@Composable
fun AnnotatedHtmlString(
    modifier: Modifier = Modifier,
    htmlText: String = ""${'"'}
 <h1>Text in Jetpack Compose</h1>

 <p>
  Simple <b>MVVM</b> 
  <a href="https://www.android.com">App</a> 
  to demonstrate text output in Jetpack Compose.
 </p>

Examples:
<ul>
 <li> Sizes and padding;</li>
 <li> Text and background color;</li>
 <li> Text alignment;</li>
 <li> Font usage;</li>
 <li> Text annotation;</li>
 <li> Text frame, underline and borders;</li>
 <li> Text animation.</li>
</ul>
           ""${'"'}.trimIndent(),
) {

    val textFromHtml = AnnotatedString.fromHtml(
        htmlString = htmlText,
        linkStyles = TextLinkStyles(
            style = SpanStyle(
                textDecoration = TextDecoration.Underline,
                fontStyle = FontStyle.Italic,
                color = Color.Blue
            )
        )
    )
    Text(
        text = textFromHtml,
        modifier = modifier
    )
}
            """.trimIndent()
        ),
        ExampleCode(
            id = 3,
            title = "–ú–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ",
            comment = """
Modifier.|graphicsLayer|  –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫ —Å–æ—Å—Ç–∞–≤–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º.                
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ ",
                    textUrl = "\uD83D\uDCD6 –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞",
                    url = "https://developer.android.com/develop/ui/compose/text/style-text?hl=ru"
                ),
                TextClickLink(
                    text = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∏",
                    textUrl = "\uD83D\uDCD6 ",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/modifiers?hl=ru"
                ),
            ),

            nameFun = "",
            highlightCode = highCodeList + listOf(
                HighlightCode("ScaleDraver", Color(0xFFffc530)),
                HighlightCode("fontSize", Color(0xFF3CEE0A)),
                HighlightCode("initialValue", Color(0xFF3CEE0A)),
                HighlightCode("targetValue", Color(0xFF3CEE0A)),
                HighlightCode("10f", Color(0xFF5EADD6)),
                HighlightCode("170f", Color(0xFF5EADD6)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { ScaleDraver() },
            code = """
            """.trimIndent()
        ),


        ExampleCode(
            id = 3,
            title = "–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ö–æ–ª—Å—Ç–µ",
            comment = """
–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é –º–æ–∂–Ω–æ —Å DrawScope.|drawText|()

–ß—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —Å–æ–∑–¥–∞–π—Ç–µ |TextMeasurer| —Å –ø–æ–º–æ—â—å—é |rememberTextMeasurer| –∏ –≤—ã–∑–æ–≤–∏—Ç–µ |drawText|
                 
val textMeasurer = rememberTextMeasurer()

|Canvas|(modifier = Modifier.fillMaxSize()) {
    drawText(textMeasurer, "Hello")
}

|!fun DrawScope.drawText(
    textMeasurer: TextMeasurer,
    text: String,
    topLeft: Offset,
    style: TextStyle,
    overflow: TextOverflow,
    softWrap: Boolean,
    maxLines: Int,
    size: Size,
    blendMode: BlendMode
): Unit|

–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —à—Ä–∏—Ñ—Ç–æ–≤.

TextMeasurer –∏–º–µ–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–µ—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è.

|overflow| - –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ.

|softWrap| - –¥–æ–ª–∂–µ–Ω –ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞–∑—Ä—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –º—è–≥–∫–∏—Ö —Ä–∞–∑—Ä—ã–≤–∞—Ö —Å—Ç—Ä–æ–∫. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ false, –≥–ª–∏—Ñ—ã –≤ —Ç–µ–∫—Å—Ç–µ –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Ç–∞–∫, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –±—ã–ª–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º. 

|size| –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å–∫–æ–ª—å–∫–æ —à–∏—Ä–æ–∫–∏–º –∏ –≤—ã—Å–æ–∫–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç. 
 |Size.Unspecified| - —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–±—â–µ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ–Ω —Ä–∞–∑–º–µ—â–µ–Ω. 
 |Size.width|  - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ 
 |Size.height| - –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ |softWrap| –∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è |TextOverflow.Ellipsis|. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ Size.height –ª–∏–±–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≥–¥–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è (TextOverflow.Clip), –ª–∏–±–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º.

|maxLines| - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –æ–Ω –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ softWrap. –ï—Å–ª–∏ –æ–Ω–æ –Ω–µ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, —Ç–æ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.

|blendMode| - –∞–ª–≥–æ—Ä–∏—Ç–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Ç–µ–∫—Å—Ç—É

–î–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É |DrawScope| –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤ –ø–∏–∫—Å–µ–ª—è—Ö –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–†–∞–∑–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:
   —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞, 
   –≤–∏–¥–∞ —à—Ä–∏—Ñ—Ç–∞, 
   –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏,
   –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥—Ä.

–í Compose –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å |TextMeasurer|, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É —Ç–µ–∫—Å—Ç–∞.
                        

                 
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ì—Ä–∞—Ñ–∏–∫–∞ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/overview?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose",
                    textUrl = "\uD83D\uDCD6 Animations in Compose ",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ö–æ–ª–ª–µ–∫—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤ ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/quick-guides/collections/display-text?hl=ru"
                ),
            ),

            nameFun = "",
            highlightCode = highCodeList + listOf(
                HighlightCode("AnimationSizeText", Color(0xFFffc530)),
                HighlightCode("fontSize", Color(0xFF3CEE0A)),
                HighlightCode("initialValue", Color(0xFF3CEE0A)),
                HighlightCode("targetValue", Color(0xFF3CEE0A)),
                HighlightCode("10f", Color(0xFF5EADD6)),
                HighlightCode("170f", Color(0xFF5EADD6)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { DrawTextCanvas() },
            code = """
@Composable
fun DrawTextCanvas(
    textToCenter: String = "Hello, World!"
) {
    val styleCenter = TextStyle(
        color = Color.White,
        fontSize = 24.sp,
        fontFamily = Alice,
        fontWeight = FontWeight.Bold,
        textDecoration = TextDecoration.Underline
    )

    val textMeasurer = rememberTextMeasurer()

    val textLayoutCenter = remember(textToCenter) {
        textMeasurer.measure(textToCenter, styleCenter)
    }

    Canvas(
        Modifier
            .fillMaxSize()
            .padding(16.dp)
            .background(color = Color.Black)
    ) {
        val height = size.height
        val width = size.width

        val startX = 0f
        val endX = width
        val startY = height / 2 + 50.dp.toPx()
        val endY = startY


        drawLine(
            start = Offset(x = startX, y = startY),
            end = Offset(x = endX, y = endY),
            color = Color.Yellow,
            strokeWidth = 10f,
            pathEffect = PathEffect.dashPathEffect(
                intervals = floatArrayOf(
                    10f.dp.toPx(),
                    10f.dp.toPx()
                ),
                phase = 10f.dp.toPx()
            )
        )

//—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        drawText(
            textMeasurer = textMeasurer,
            text = textToCenter,
            style = styleCenter,
//            topLeft = Offset(50.dp.toPx(),50.dp.toPx()),
            topLeft = Offset(
                x = center.x - textLayoutCenter.size.width / 2,
                y = center.y - textLayoutCenter.size.height / 2,
            ),
        )

    }
}
                
            """.trimIndent()
        ),
        ExampleCode(
            id = 3,
            title = "–ú–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ö–æ–ª—Å—Ç–µ",
            comment = """
            """.trimIndent(),
            links = listOf(
                TextClickLink(
                    text = "–ì—Ä–∞—Ñ–∏–∫–∞ –≤ Compose ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/graphics/draw/overview?hl=ru"
                ),
                TextClickLink(
                    text = "–ê–Ω–∏–º–∞—Ü–∏–∏ –≤ Compose",
                    textUrl = "\uD83D\uDCD6 Animations in Compose ",
                    url = "https://developer.android.com/develop/ui/compose/animation/introduction"
                ),
                TextClickLink(
                    text = "–ö–æ–ª–ª–µ–∫—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤ ",
                    textUrl = "\uD83D\uDCD6 –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç",
                    url = "https://developer.android.com/develop/ui/compose/quick-guides/collections/display-text?hl=ru"
                ),
            ),

            nameFun = "",
            highlightCode = highCodeList + listOf(
                HighlightCode("DrawAnimeScaleAText", Color(0xFFffc530)),
                HighlightCode("initialValue", Color(0xFF3CEE0A)),
                HighlightCode("targetValue", Color(0xFF3CEE0A)),
                HighlightCode("33f", Color(0xFF5EADD6)),
                HighlightCode("1f", Color(0xFF5EADD6)),
                HighlightCode("10000", Color(0xFF5EADD6)),
                HighlightCode("18", Color(0xFF5EADD6)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = { DrawAnimeScaleAText() },
            code = """
@Composable
fun DrawAnimeScaleAText(
    modifier: Modifier = Modifier,
    duration: Int = 10000,   //10 sek
    textToCenter: String = "–ê",
    color: Color = Color.White,
    fontFamily: FontFamily = Cabin  //Alice
) {
    val textMeasurer = rememberTextMeasurer()

    val styleCenter = TextStyle(
        fontSize = 18.sp,
        fontFamily = fontFamily,
        fontWeight = FontWeight.Bold,
        color = color,
    )
    val textLayoutCenter = remember(textToCenter) {
        textMeasurer.measure(textToCenter, styleCenter)
    }

    val infiniteTransition = rememberInfiniteTransition(
        label = "infinite"
    )

    val scale by infiniteTransition.animateFloat(
        initialValue = 33f,
        targetValue = 1f,
        animationSpec = infiniteRepeatable(
            animation = tween(
                durationMillis = duration,
                easing = LinearEasing
            ),
            repeatMode = RepeatMode.Reverse
        ),
        label = "scale text"
    )

    Canvas(
        modifier = modifier
            .fillMaxSize()
            .background(color = Color.Black),
    ) {
        withTransform({
            scale(scaleX = scale, scaleY = scale)
        }) {
//—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ —Ü–µ—Ç—Ä—É —Ç–µ–∫—Å—Ç–∞
            drawText(
                textMeasurer = textMeasurer,
                text = textToCenter,
                style = styleCenter,
                topLeft = Offset(
                    x = center.x - textLayoutCenter.size.width / 2,
                    y = center.y - textLayoutCenter.size.height / 2,
                ),
            )

        }

    }
}
                
            """.trimIndent()
        ),



        ExampleCode(
            id = 20,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),
        ExampleCode(
            id = 21,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),
        ExampleCode(
            id = 22,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),
        ExampleCode(
            id = 23,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),
        ExampleCode(
            id = 24,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),
        ExampleCode(
            id = 25,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),
        ExampleCode(
            id = 26,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),
        ExampleCode(
            id = 27,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),
        ExampleCode(
            id = 28,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),
        ExampleCode(
            id = 29,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),
        ExampleCode(
            id = 30,
            title = "",
            highlightCode = listOf(
                HighlightCode("AnnotatedString", Color(0xFF3CEE0A)),
                HighlightCode("SpanStyle", Color(0xFF3CEE0A)),
                HighlightCode("TextLinkStyles", Color(0xFF3CEE0A)),
                HighlightCode("//", Color(0xFF3CEE0A)),
            ),
            lambdaFun = {  },
            code ="""
            """.trimIndent()
        ),


    )
}
